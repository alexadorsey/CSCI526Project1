ûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿûÿ  
   pCylinder1         x           D   0Szº       °×1<o:6Ò<                                 ð                  	 
   	                                 ! "   # ! $ % & $ ' % ( ) * * + , , + - . + / 0 + . 1 + 0 2 + 1 3 + 2 - 4 3 / 4 5 6 7 8 9 : 6 ; : 9 < : = = : > > : ? ? : @ @ : A A B ; C B <     +   D                           +       0                                       À  Û»oº Q;»Ë·}¿à[<Âº¾  À>   >Ï½>j¹¶·¥½}¿  ¿pJ»o:6Ò¼Ë·}¿à[<Ãº¾ÍÌÌ>=0?÷½>J¶7£½}¿  ¿pJ»oº6Ò¼Ë·}¿à[<Ãº¾ÍÌÌ>   >ü½>á7£½}¿  ¿é»o:Ü'<»Ë·}¿à[<Âº¾  À>=0?Ë½>^á·¥½}¿  ¿pJ»oº6Ò¼ýu1?v»µ8¿ÍÌÌ>   >
8?-æ5Ov1?  ¿>Éà:o:Û^ »ýu1?v»´8¿Ù>=0?F8?Ïð:èu1?  ¿Lâ:oºº»ýu1?v»µ8¿Ù>   >F8?ö:åu1?  ¿pJ»o:6Ò¼ýu1?v»µ8¿ÍÌÌ>=0?
8?Êú6Ov1?  ¿Lâ:oºº»¹Ê¾(+¼¢í|¿Ù>   >Ûð|?¡M¨»}¾¾  ¿¤<o: À»ºÊ¾(+¼¢í|¿gfæ>=0?+ñ|?htd7øÌ¾  ¿¤<oºÀ»¹Ê¾(+¼¢í|¿gfæ>   >+ñ|?7ùÌ¾  ¿>Éà:o:Û^ »»Ê¾(+¼¢í|¿Ù>=0?Õð|?¹û«»,¾¾  ¿¤<oºÀ»i?ke~<æmÓ>gfæ>   >ztÓ¾æ@ï7º%i?  ¿Ê7«;o:úÒ9i?ke~<æmÓ>43ó>=0?ÒdÓ¾åMø»6'i?  ¿\O¬;oºÆßÓ9i?le~<åmÓ>43ó>   >ÂdÓ¾<7ù»6'i?  ¿¤<o: À»i?le~<æmÓ>gfæ>=0?}tÓ¾O8¹%i?  ¿\O¬;oºÆßÓ9Ôc?B¹k<IJì¾43ó>   >vCì>®ã;xc?  ¿¢<o:À;Ôc?@¹k<KJì¾   ?=0?Pì>"à7Ûc?  ¿£<oºÀ;Ôc?@¹k<KJì¾   ?   >Pì>{Ü8Üc?  ¿Ê7«;o:úÒ9Ôc?@¹k<IJì¾43ó>=0?hCì>òä;xc?  ¿£<oºÀ;¹gð¼ò,¼á?   ?   >Æã¿e7¬ið¼  ¿;Éà:o:¾º;·gð¼ò,¼á?ff?=0?ã¿&ïF;ó4ð¼  ¿Dâ:oºþ5º;¹gð¼ò,¼á?ff?   >ã¿ôC;ý5ð¼  ¿¢<o:À;¹gð¼ñ,¼á?   ?=0?Æã¿B37£ið¼  ¿Dâ:oºþ5º;÷3?Æ\»>yH?ff?   >ªyH¿L£ºó3?  ¿tJ»o:4Ò<ö3?Æ\»>yH?ÌÌ?=0?yH¿yÆÄ524?  ¿uJ»oº5Ò<÷3?Æ\»>yH?ÌÌ?   >yH¿&§÷524?  ¿;Éà:o:¾º;ö3?Æ\»>yH?ff?=0?ªyH¿#& ºó3?  ¿uJ»oº5Ò<Ô}¿+]<>ÌÌ?   >¾Ì7Â}¿  ¿é»o:Yæp;Ô}¿+]<>23?=0?-,¾ö´Ë»­}¿  ¿Û»oºIp;Ô}¿+]<>23?   >ß,¾è³Ò»}¿  ¿tJ»o:4Ò<Ô}¿+]<>ÌÌ?=0?¾8Ã}¿  ¿Û»oºIp;
E¿-èd;ÔZ?23?   >èZ¿eÑ:E¿  ¿
×#¼o:    E¿-èd;ÔZ??=0?,Z¿ÿ¿5>E¿  ¿
×#¼oº    E¿-èd;ÔZ??   >,Z¿M¾è5>E¿  ¿é»o:Yæp;	E¿+èd;ÔZ?23?=0?æZ¿OJØ:E¿  ¿
×#¼oº    õ÷Û¾\åÔ9s+g¿?   >u+g?½¤«2÷÷Û¾  ¿é»o:Ü'<»÷÷Û¾\åÔ9s+g¿þÿ?=0?t+g?_ø«²ø÷Û¾  ¿Û»oº Q;»÷÷Û¾\åÔ9s+g¿þÿ?   >t+g?ÄùÔ²ø÷Û¾  ¿
×#¼o:    õ÷Û¾\åÔ9s+g¿?=0?u+g?´ÓÓ2÷÷Û¾  ¿pJ»oº6Ò¼      ¿    U\? ú;l'¿    ="M?  ¿    oº          ¿       ?>{¿    »<>  ¿Û»oº Q;»      ¿    V\ ?è=$âf¿    !+Ý>  ¿    oº          ¿       ?>þ¿    1ÏÖ;  ¿
×#¼oº          ¿      (?   >¦ï¿    ¦û¶¼  ¿Û»oºIp;      ¿    V\ ?¯~>c¿    ¤jì¾  ¿¤<oºÀ»      ¿    TG¿>¢è=%w{¿    á?>  ¿Lâ:oºº»      ¿    TGç> ú;¢@|¿    $.¾  ¿\O¬;oºÆßÓ9      ¿      °>  >òÿ¿    I?¬º  ¿£<oºÀ;      ¿    TG¿>°~>Ì{¿    Ê8¾  ¿Dâ:oºþ5º;      ¿    UGç>¤>­{¿    T.?>  ¿uJ»oº5Ò<      ¿    V\?¤>ö¿    S»<  ¿    oº          ¿       ?>eú~¿    ÎÎ¶½  ¿pJ»oº6Ò¼      ¿    U\? ú;h8¿    Ö1¿  ¿é»o:Ü'<»      ?    V\ ?ìo?4 ^¿    QÆü>  ¿    o:          ?       ?ffV?t|¿    Û)>  ¿pJ»o:6Ò¼      ?    V\?Ò
~?u	¿    ÷W?  ¿
×#¼o:          ?      (?  X?ï¿    kfº<  ¿    o:          ?       ?ffV?Jþ¿    ãÁì»  ¿é»o:Yæp;      ?    V\ ?}@?²«k¿    ôÇ¾  ¿>Éà:o:Û^ »      ?    UGç>Ò
~?Y{¿    ø=¾  ¿¤<o: À»      ?    TG¿>ìo?ß¿~¿    á-Ê=  ¿Ê7«;o:úÒ9      ?      °>  X?ï}¿    ¨f¾  ¿¢<o:À;      ?    TG¿>}@?x¿    ï(}¾  ¿;Éà:o:¾º;      ?    TGç>.õ1?Z |¿    7v1>  ¿tJ»o:4Ò<      ?    U\?.õ1?°¿    S/J=  ¿    o:          ?       ?ffV?¿M~¿    [_ë½  ¿pJ»o:6Ò¼      ?    V\?Ò
~?¡8¿    °[1¿  ¿                                                                                                                                                                            0Szº       °×1<o:6Ò<	      pPipe1         °          ÿ      5      5 @ÍÌL>¸~@                                 `	                           	  
 	  
  	   
                                                                !  " !   " # ! $ # " $ % # & % $ & ' % ( ' & ( ) ' * ) ( * + ) , + * , - + . - , . / - 0 / . 0 1 / 2 1 0 2 3 1 4 3 2 4 5 3 6 5 4 6 7 5 8 7 6 8 9 7 : 9 8 : ; 9 < ; : < = ; > = < > ? = @ ? > @ A ? B A @ B C A D C B D E C F E D F G E H G F H I G J I H J K I L K J L M K N M L N O M P O N P Q O R Q P R S Q T S R T U S V U T V W U X W V X Y W Z Y X Z [ Y \ [ Z \ ] [ ^ ] \ ^ _ ] ` _ ^ ` a _ b a ` b c a d c b d e c Y f W W f g Y h f [ h Y [ i h ] i [ ] j i _ j ] _ k j a k _ a l k c l a c m l e m c e n m f o g g o p g p q U g q U q S S q r S r Q Q r s Q s O O s t O t M M t u M u K K u v K v I I v w I w G G w x G x E E x y E y C C y z C z A A z { A { ? ? { | ? | = = | } = } ; ; } ~ ; ~ 9 9 ~  9  7 7   7  5 5   5  3 3   3  1 1   1  / /   /  - -   -  + +   +  ) )   )  ' '   '  % %   %  # #   #  ! !   !                                                                    	 	   	                                                         ¡    ¡   ¢ ¡  ¢   £ ¢  £   ¤ £  ¤   ¥ ¤  ¥   ¦ ¥  ¦   § ¦  §   ¨ §  ¨   © ¨  ©   ª ©  ª   « ª  «   ¬ «  ¬   ­ ¬  ­   ® ­  ®   ¯ ®  ¯   ° ¯  °   ± °  ±   ² ±  ²   ³ ²  ³   ´ ³  ´   µ ´  µ   ¶ µ ~ ¶  ~ · ¶ } · ~ } ¸ · | ¸ } | ¹ ¸ { ¹ | { º ¹ z º { z » º y » z y ¼ » x ¼ y x ½ ¼ w ½ x w ¾ ½ v ¾ w v ¿ ¾ u ¿ v u À ¿ t À u t Á À s Á t s Â Á r Â s r Ã Â q Ã r q p Ã ¾ Ä ½ ½ Ä Å ¾ Æ Ä ¿ Æ ¾ ¿ Ç Æ À Ç ¿ À È Ç Á È À Á É È Â É Á Â Ê É Ã Ê Â Ã Ë Ê p Ë Ã p Ì Ë o Ì p o Í Ì Î Í o f Î o h Î f h Ï Î i Ï h i Ð Ï j Ð i j Ñ Ð k Ñ j k Ò Ñ l Ò k l Ó Ò m Ó l m Ô Ó n Ô m n Õ Ô Ï Ö Î Î Ö Í Ï × Ö Ð × Ï Ð Ø × Ñ Ø Ð Ñ Ù Ø Ò Ù Ñ Ò Ú Ù Ó Ú Ò Ó Û Ú Ô Û Ó Ô Ü Û Õ Ü Ô Õ Ý Ü W g U  Þ   ß Þ  ß   à ß  à   á à  á   â á   â    ã â ¡ ã   ¡ ä ã ¢ ä ¡ ¢ å ä £ å ¢ £ æ å ¤ æ £ ¤ ç æ ¥ ç ¤ ¥ è ç ¦ è ¥ ¦ é è § é ¦ § ê é ¨ ê § ¨ ë ê © ë ¨ © ì ë ª ì © ª í ì « í ª « î í ¬ î « ¬ ï î ­ ï ¬ ­ ð ï ® ð ­ ® ñ ð ¯ ñ ® ¯ ò ñ ° ò ¯ ° ó ò ± ó ° ± ô ó ² ô ± ² õ ô ³ õ ² ³ ö õ ´ ö ³ ´ ÷ ö µ ÷ ´ µ ø ÷ ¶ ø µ ¶ ù ø · ù ¶ · ú ù ¸ ú · ¸ û ú ¹ û ¸ ¹ ü û º ü ¹ º ý ü » ý º » þ ý ¼ þ » ¼ Å þ ½ Å ¼     +   ÿ                           +       0                                       Ð/  ÊîjÀÍÌL¾iní¾	4E?S!¿ÝLÇ=
×£<  ?PW >¼ë2;û}¿  ¿ÍÌlÀÍÌL>ÍÌL$<ÅF?¥S!?          @?®Ì<üû¼Ì¿  ¿ÍÌlÀÍÌL¾ÍÌL¤<ÅF?¥S!¿          ?®Ì<üû<Ì¿  ¿ÊîjÀÍÌL>iní¾4E?S!?ÞLÇ=
×£<  @?QW >?½1;û}¿  ¿J\eÀÍÌL¾ k¿¡@?S!¿ºE>
×#=  ?¨~>é3±õw¿  ¿J\eÀÍÌL> k¿ @?S!?ºE>
×#=  @?¨~>³l²õw¿  ¿Ì+\ÀÍÌL¾X®¿ïÏ8?S!¿=X>Âu=  ?Òz¼>[1Õn¿  ¿Ì+\ÀÍÌL>X®¿ïÏ8?S!?=X>Âu=  @?Òz¼>çýW²Õn¿  ¿jOÀÍÌL¾(ä¿/.?S!¿Y¿>
×£=  ?n¨ö>o]<±¢U`¿  ¿jOÀÍÌL>(ä¿/.?S!?[¿>
×£=  @?n¨ö>]0¢U`¿  ¿B?ÀÍÌL¾0ÀÏ ?S!¿:«é>ÌÌÌ=  ?y?_+2½O¿  ¿B?ÀÍÌL>0ÀÏ ?S!?<«é>ÌÌÌ=  @?y?ì2¾O¿  ¿ª,ÀÍÌL¾Ì"ÀÃå?S!¿[?Âõ=  ?z>/?hJ3±:¿  ¿ª,ÀÍÌL>Ì"ÀÄå?S!?[?Âõ=  @?z>/?1öh³±:¿  ¿'ñÀÍÌL¾"u6Àõfý>S!¿Å'?(\>  ?]@E?à7Ë26.#¿  ¿'ñÀÍÌL>"u6Àõfý>S!?Å'?(\>  @?]@E?¬16.#¿  ¿Äý¿ÍÌL¾ÖïGÀ\Õ>S!¿ÚÓ'?	×#>  ?à%X?é´ñ+	¿  ¿Äý¿ÍÌL>ÖïGÀZÕ>S!?ÙÓ'?	×#>  @?à%X?î&4ñ+	¿  ¿+¦É¿ÍÌL¾XCVÀÊC©>S!¿ZÚ3?êQ8>  ?½¢g??r~³ÄÿÙ¾  ¿+¦É¿ÍÌL>XCVÀÊC©>S!?ZÚ3?êQ8>  @?¾¢g?ææ2ÄÿÙ¾  ¿¸Y¿ÍÌL¾Ð5aÀ¬±u>S!¿¿
=?ËÌL>  ?oxs?óR±7¾  ¿¸Y¿ÍÌL>Ð5aÀ¬±u>S!?¿
=?ËÌL>  @?oxs?ÿü27¾  ¿Ô|1¿ÍÌL¾hÀÊû>¡S!¿í?C?¬Ga>  ?-w{?7¯³ëà?¾  ¿Ô|1¿ÍÌL>hÀÉû>¢S!?ì?C?¬Ga>  @?-w{?¢o3ëà?¾  ¿æm¾ÍÌL¾0UlÀÐ±G=¢S!¿Ô`F?Âu>  ?®~?þ*0X½  ¿æm¾ÍÌL>0UlÀÐ±G=¢S!?Ô`F?Âu>  @?®~?ö±W½  ¿æm>ÍÌL¾0UlÀÊ±G½¥S!¿Ñ`F?·>  ?®~?j¶n2X=  ¿æm>ÍÌL>0UlÀË±G½¥S!?Ò`F?·>  @?®~?C<n2U=  ¿Ô|1?ÍÌL¾hÀÃû¾¨S!¿ç?C?(\>  ?-w{?°3èà?>  ¿Ô|1?ÍÌL>hÀÃû¾§S!?ç?C?(\>  @?-w{?M³çà?>  ¿¹Y?ÍÌL¾Ð5aÀ±u¾¨S!¿·
=?>  ?pxs?°d»1~7>  ¿¹Y?ÍÌL>Ð5aÀ±u¾¨S!?¸
=?>  @?pxs?¯6Û±~7>  ¿-¦É?ÍÌL¾XCVÀ½C©¾­S!¿PÚ3?
×£>  ?¿¢g?fc3ÀÿÙ>  ¿-¦É?ÍÌL>XCVÀ½C©¾¬S!?PÚ3?
×£>  @?¿¢g?ø²ÀÿÙ>  ¿Äý?ÍÌL¾ÖïGÀEÕ¾±S!¿ÌÓ'?{®>  ?â%X?}î²3î+	?  ¿Äý?ÍÌL>ÖïGÀEÕ¾±S!?ÌÓ'?{®>  @?ã%X?? <³î+	?  ¿*ñ@ÍÌL¾"u6Àâfý¾°S!¿¸'?ìQ¸>  ?\@E?n5³7.#?  ¿*ñ@ÍÌL>"u6Àâfý¾²S!?·'?ìQ¸>  @?[@E?r8¤28.#?  ¿­,@ÍÌL¾Ë"À»å¿­S!¿P?]Â>  ?x>/?©&d³³:?  ¿­,@ÍÌL>Ë"À»å¿«S!?P?]Â>  @?x>/?3³:?  ¿F?@ÍÌL¾0ÀýÎ ¿±S!¿«é>ÎÌÌ>  ?y?ØW9³¾O?  ¿F?@ÍÌL>0ÀÿÎ ¿®S!?"«é>ÎÌÌ>  @?y?PÎö2¾O?  ¿nO@ÍÌL¾(ä¿/.¿³S!¿B¿>?
×>  ?l¨ö>m¦°¢U`?  ¿nO@ÍÌL>(ä¿/.¿³S!?B¿>?
×>  @?l¨ö>M±¢U`?  ¿Ð+\@ÍÌL¾ÿW®¿ÖÏ8¿¹S!¿)X>°Gá>  ?Òz¼>Õî0Õn?  ¿Ð+\@ÍÌL>ÿW®¿×Ï8¿¶S!?*X>°Gá>  @?Òz¼>]°Õn?  ¿N\e@ÍÌL¾k¿@¿¸S!¿~ºE>!ë>  ?¨~>0õw?  ¿N\e@ÍÌL>k¿@¿µS!?ºE>!ë>  @?¨~>¥K¤²õw?  ¿Îîj@ÍÌL¾Pní¾î3E¿¶S!¿ÀLÇ=Âõ>  ?PW >W[ì²;û}?  ¿Îîj@ÍÌL>Pní¾î3E¿¶S!?ÃLÇ=Âõ>  @?PW >îHD²;û}?  ¿ÑÌl@ÍÌL¾  `5,ÅF¿¸S!¿      ?  ?Ñ[0êj°  ?  ¿ÑÌl@ÍÌL>  `5,ÅF¿¸S!?      ?  @?ç>¶/Eà/  ?  ¿Îîj@ÍÌL¾ní>ò3E¿³S!¿ÄLÇ½¹?  ?OW ¾kTç1;û}?  ¿Îîj@ÍÌL>ní>ò3E¿³S!?ÅLÇ½¹?  @?QW ¾[#³;û}?  ¿N\e@ÍÌL¾1k?@¿°S!¿ºE¾q=
?  ?¨~¾V½i²õw?  ¿N\e@ÍÌL>1k?@¿°S!?ºE¾q=
?  @?¨~¾t¦ ³õw?  ¿Ï+\@ÍÌL¾X®?ØÏ8¿²S!¿9X¾)\?  ?áz¼¾U°²Òn?  ¿Ï+\@ÍÌL>X®?ØÏ8¿²S!?9X¾)\?  @?áz¼¾sXú2Òn?  ¿lO@ÍÌL¾¡(ä?/.¿´S!¿F¿¾áz?  ?s¨ö¾Íã¶± U`?  ¿lO@ÍÌL>¡(ä?/.¿´S!?F¿¾áz?  @?s¨ö¾>Ù1 U`?  ¿D?@ÍÌL¾	0@ùÎ ¿µS!¿«é¾?  ?y¿wë¨2¼O?  ¿D?@ÍÌL>	0@ùÎ ¿µS!?«é¾?  @?y¿[Á%³¼O?  ¿«,@ÍÌL¾Ñ"@´å¿³S!¿P¿Q¸?  ?|>/¿ôÏ?3¯:?  ¿«,@ÍÌL>Ñ"@³å¿´S!?P¿Q¸?  @?}>/¿ý²®:?  ¿(ñ@ÍÌL¾'u6@Üfý¾´S!¿·'¿	×#?  ?]@E¿î35.#?  ¿(ñ@ÍÌL>'u6@Ùfý¾¶S!?µ'¿	×#?  @?]@E¿z³5.#?  ¿Äý?ÍÌL¾ÛïG@@Õ¾¸S!¿ÇÓ'¿Áõ(?  ?â%X¿iQÔ³ï+	?  ¿Äý?ÍÌL>ÛïG@=Õ¾ºS!?ÅÓ'¿Áõ(?  @?â%X¿æý3ï+	?  ¿*¦É?ÍÌL¾]CV@«C©¾¼S!¿FÚ3¿y.?  ?À¢g¿öx³¸ÿÙ>  ¿*¦É?ÍÌL>]CV@ªC©¾½S!?EÚ3¿y.?  @?Á¢g¿aFO3·ÿÙ>  ¿¶Y?ÍÌL¾Ô5a@y±u¾¾S!¿¨
=¿133?  ?rxs¿j·3r7>  ¿¶Y?ÍÌL>Ô5a@y±u¾¾S!?¨
=¿133?  @?rxs¿gb³s7>  ¿Î|1?ÍÌL¾h@£û¾ÃS!¿Ó?C¿éQ8?  ?.w{¿ö2Îà?>  ¿Î|1?ÍÌL>h@¢û¾ÃS!?Ò?C¿éQ8?  @?.w{¿Q)30Ðà?>  ¿|æm>ÍÌL¾2Ul@m±G½ÅS!¿¸`F¿¡p=?  ?®~¿®³.=  ¿|æm>ÍÌL>2Ul@m±G½ÅS!?¸`F¿¡p=?  @?®~¿þZ30=  ¿¸æm¾ÍÌL¾2Ul@­±G=ÉS!¿´`F¿YB?  ?®~¿3#-V½  ¿¸æm¾ÍÌL>2Ul@­±G=ÉS!?´`F¿YB?  @?®~¿nµ_2U½  ¿Ý|1¿ÍÌL¾h@¬û>ÌS!¿Ë?C¿®G?  ?-w{¿3æà?¾  ¿Ý|1¿ÍÌL>h@­û>ÌS!?Ë?C¿®G?  @?-w{¿ÙdT³æà?¾  ¿¾Y¿ÍÌL¾Ò5a@z±u>ÌS!¿
=¿ÉÌL?  ?pxs¿N%27¾  ¿¾Y¿ÍÌL>Ò5a@z±u>ÌS!?
=¿ÉÌL?  @?pxs¿áªY²7¾  ¿1¦É¿ÍÌL¾ZCV@®C©>ÎS!¿6Ú3¿ëQ?  ?½¢g¿ð@Ù³ÇÿÙ¾  ¿1¦É¿ÍÌL>ZCV@­C©>ÎS!?5Ú3¿ëQ?  @?½¢g¿liÓ3ÇÿÙ¾  ¿Äý¿ÍÌL¾ØïG@/Õ>ÎS!¿¶Ó'¿9
W?  ?á%X¿±06²ð+	¿  ¿Äý¿ÍÌL>ØïG@/Õ>ÏS!?¶Ó'¿9
W?  @?á%X¿tY3ð+	¿  ¿,ñÀÍÌL¾$u6@»fý>ÑS!¿¥'¿ñ(\?  ?^@E¿U35.#¿  ¿,ñÀÍÌL>$u6@»fý>ÑS!?¥'¿ñ(\?  @?]@E¿Cÿ³5.#¿  ¿¯,ÀÍÌL¾Í"@¥å?ÎS!¿>¿©Ga?  ?y>/¿1©2²:¿  ¿¯,ÀÍÌL>Í"@§å?ÌS!?@¿©Ga?  @?y>/¿Æè³²:¿  ¿H?ÀÍÌL¾0@îÎ ?ÈS!¿«é¾aff?  ?y¿Ãäî²¾O¿  ¿H?ÀÍÌL>0@ðÎ ?ÅS!?	«é¾aff?  @?y¿¤áò2¿O¿  ¿pOÀÍÌL¾(ä?ù..?ÇS!¿.¿¾k?  ?i¨ö¾ÝRÙ²£U`¿  ¿pOÀÍÌL>(ä?÷..?ÉS!?,¿¾k?  @?i¨ö¾=ãx2£U`¿  ¿Ò+\ÀÍÌL¾X®?ÆÏ8?ÍS!¿X¾Ñ£p?  ?Ñz¼¾J²Õn¿  ¿Ò+\ÀÍÌL>X®?ÆÏ8?ÍS!?X¾Ñ£p?  @?Ñz¼¾=3,2Õn¿  ¿P\eÀÍÌL¾k?r@?ÏS!¿kºE¾Âu?  ?¨~¾/3õw¿  ¿P\eÀÍÌL>k?r@?ÏS!?kºE¾Âu?  @?¨~¾ª³õw¿  ¿ÐîjÀÍÌL¾Xní>Ý3E?ÎS!¿LÇ½Aáz?  ?íV ¾l%3>û}¿  ¿ÐîjÀÍÌL>Xní>Ü3E?ÑS!?LÇ½Aáz?  @?îV ¾¿³>û}¿  ¿ÍÌlÀÍÌL¾ÍÌL¤<ÅF?¥S!¿    ùÿ?  ?-Ì¼ùû¼Ì¿  ¿ÍÌlÀÍÌL>ÍÌL$<ÅF?¥S!?    ùÿ?  @?¼Ì¼À÷û<Ì¿  ¿A.#ÀÍÌL>h@E@6¿'Ñ?' "?ñ(\?   ?\@E¿ãþ26.#¿  ¿ù+	ÀÍÌL>î%X@;}á¾'Ñ?9¨1?9
W?   ?â%X¿qÜ³î+	¿  ¿»:ÀÍÌL>>/@Tb¿%Ñ?	?©Ga?   ?{>/¿á ;²°:¿  ¿ÉOÀÍÌL>"y@0:*¿"Ñ?ÔZ÷>aff?   ?y¿p-#²¼O¿  ¿°U`ÀÍÌL>|¨ö?Çb8¿"Ñ?î»Ê>k?   ?t¨ö¾ë¡á1 U`¿  ¿änÀÍÌL>àz¼?ö¢C¿%Ñ?ê>Ñ£p?   ?Úz¼¾÷±Ón¿  ¿!õwÀÍÌL>¤¨~?LÍK¿(Ñ?_OQ>Âu?   ?£¨~¾ï% 2õw¿  ¿Lû}ÀÍÌL>gW ?òÀP¿Ñ?÷Ò=Aáz?   ?hV ¾TÌè´Bû}¿  ¿  ÀÍÌL>ÍÌL$¦iR¿Ñ?    ùÿ?   ?§¼«ñ¼øÕ¿  ¿ù+	ÀÍÌL¾î%X@=}á¾'Ñ¿:¨1?9
W?  >â%X¿Õ<3ï+	¿  ¿ÈÿÙ¿ÍÌL¾Í¢g@ª-³¾(Ñ¿c>?ëQ?  >Â¢g¿î½$³³ÿÙ¾  ¿ÈÿÙ¿ÍÌL>Í¢g@ª-³¾(Ñ?c>?ëQ?   ?Â¢g¿ÿz3³ÿÙ¾  ¿7¿ÍÌL>xs@¼
¾%Ñ?:H?ÉÌL?   ?rxs¿+m3q7¾  ¿èà?¿ÍÌL><w{@µ¾%Ñ?~¯N?®G?   ?.w{¿kËÍ2Ïà?¾  ¿L¾ÍÌL>¼~@ÅcS½"Ñ?OÿQ?YB?   ?®~¿ß ³)½  ¿b>ÍÌL>»~@dS=!Ñ?QÿQ?¡p=?   ?®~¿> Ñ³`=  ¿òà??ÍÌL>:w{@µµ>Ñ?¯N?éQ8?   ?-w{¿àÞF3õà?>  ¿7?ÍÌL>|xs@Ú
>Ñ?@H?133?   ?nxs¿©w47>  ¿ËÿÙ?ÍÌL>É¢g@È-³>Ñ?c>?y.?   ?¼¢g¿¥3ÉÿÙ>  ¿ù+	@ÍÌL>é%X@S}á>Ñ?B¨1?Áõ(?   ?Þ%X¿cÑ²õ+	?  ¿@.#@ÍÌL>c@E@E?Ñ?1 "?	×#?   ?Y@E¿¼?2;.#?  ¿¹:@ÍÌL>>/@cb?Ñ?	?Q¸?   ?w>/¿Ì^ã±³:?  ¿ÆO@ÍÌL>y@=:*?Ñ?ÚZ÷>?   ?y¿ì1¿O?  ¿¬U`@ÍÌL>r¨ö?Öb8?Ñ?ñ»Ê>áz?   ?g¨ö¾¬^V±¤U`?  ¿ßn@ÍÌL>×z¼?£C?Ñ?ê>)\?   ?Ïz¼¾M)2Ön?  ¿õw@ÍÌL>¨~?`ÍK?Ñ?_OQ>q=
?   ?¨~¾Û~±õw?  ¿Eû}@ÍÌL>ZW ?êÀP?Ñ?9ùÒ=¹?   ?SW ¾n³;û}?  ¿ @ÍÌL>  Ð´¥iR?Ñ?      ?   ?LãÛ3¦´  ?  ¿Dû}@ÍÌL>fW ¿çÀP?Ñ?QùÒ½Âõ>   ?fW >¿²:û}?  ¿õw@ÍÌL>¨~¿^ÍK?Ñ?hOQ¾!ë>   ?¨~>q7³õw?  ¿Ýn@ÍÌL>Üz¼¿£C?Ñ?ê¾°Gá>   ?àz¼>hk2Òn?  ¿©U`@ÍÌL>v¨ö¿Ôb8?Ñ? ¼Ê¾?
×>   ?x¨ö>K³U`?  ¿ÂO@ÍÌL>yÀ::*?Ñ?ëZ÷¾ÎÌÌ>   ?y?ÒÔÀ²¹O?  ¿´:@ÍÌL>>/À`b?	Ñ?	¿]Â>   ?~>/?ÿA?3­:?  ¿;.#@ÍÌL>b@EÀA?Ñ?6 "¿ìQ¸>   ?]@E?³¢Î25.#?  ¿ô+	@ÍÌL>ç%XÀK}á>Ñ?K¨1¿{®>   ?ä%X?Ãç³ì+	?  ¿ÀÿÙ?ÍÌL>Å¢gÀº-³>	Ñ?!c>¿
×£>   ?Â¢g?±À2¯ÿÙ>  ¿z7?ÍÌL>vxsÀÍ
>Ñ?OH¿>   ?rxs?þú:2t7>  ¿àà??ÍÌL>3w{À¦µ>Ñ?¯N¿(\>   ?.w{?!~Ê2×à?>  ¿G>ÍÌL>³~À£cS= Ñ?hÿQ¿·>   ?®~?òtÀ3=  ¿_¾ÍÌL>²~ÀfdS½þÐ?hÿQ¿Âu>   ?®~?±_3}½  ¿ìà?¿ÍÌL>1w{À»µ¾ýÐ?¯N¿¬Ga>   ?-w{?ð³ïà?¾  ¿7¿ÍÌL>sxsÀå
¾úÐ?TH¿ËÌL>   ?nxs?à>Z²7¾  ¿ÃÿÙ¿ÍÌL>À¢gÀØ-³¾ûÐ?%c>¿êQ8>   ?¼¢g?u$é2ÉÿÙ¾  ¿ô+	ÀÍÌL>á%XÀa}á¾ûÐ?S¨1¿	×#>   ?à%X?}j­³ò+	¿  ¿:.#ÀÍÌL>\@EÀQ¿÷Ð?= "¿(\>   ?X@E?sºÌ3<.#¿  ¿²:ÀÍÌL>{>/Àpb¿õÐ?	¿Âõ=   ?v>/?H3´:¿  ¿¾OÀÍÌL>yÀO:*¿ñÐ?ðZ÷¾ÌÌÌ=   ?y?8pn2ÁO¿  ¿£U`ÀÍÌL>j¨ö¿èb8¿ñÐ?¼Ê¾
×£=   ?f¨ö>^ó±¤U`¿  ¿ÕnÀÍÌL>Òz¼¿£C¿õÐ?ê¾Âu=   ?Òz¼>¥¶²Õn¿  ¿õwÀÍÌL>¨~¿oÍK¿ôÐ?wOQ¾
×#=   ?¨~>»OG²õw¿  ¿;û}ÀÍÌL>[W ¿üÀP¿òÐ?SùÒ½
×£<   ?YW >4Á²;û}¿  ¿  ÀÍÌL>ÍÌL$¦iR¿Ñ?           ?§<­"ñ<öÕ¿  ¿  ÀÍÌL¾ÍÌL¤¦iR¿Ñ¿          >§<®"ñ¼öÕ¿  ¿;û}ÀÍÌL¾[W ¿þÀP¿ðÐ¿XùÒ½
×£<  >[W >&22;û}¿  ¿õwÀÍÌL¾¨~¿rÍK¿ñÐ¿zOQ¾
×#=  >¨~>S^å2õw¿  ¿ÕnÀÍÌL¾Òz¼¿£C¿õÐ¿ê¾Âu=  >Òz¼>Q¹3Õn¿  ¿£U`ÀÍÌL¾j¨ö¿æb8¿ôÐ¿¼Ê¾
×£=  >f¨ö>D!3¤U`¿  ¿¾OÀÍÌL¾yÀM:*¿ôÐ¿íZ÷¾ÌÌÌ=  >y?4E2³ÀO¿  ¿²:ÀÍÌL¾{>/Àpb¿öÐ¿	¿Âõ=  >v>/?Åm*³´:¿  ¿:.#ÀÍÌL¾\@EÀQ¿÷Ð¿= "¿(\>  >X@E?é²õ³;.#¿  ¿ô+	ÀÍÌL¾á%XÀ`}á¾øÐ¿T¨1¿	×#>  >à%X?Ãû¤3ñ+	¿  ¿ÃÿÙ¿ÍÌL¾À¢gÀØ-³¾ùÐ¿%c>¿êQ8>  >¼¢g??Áå2ÊÿÙ¾  ¿7¿ÍÌL¾sxsÀå
¾úÐ¿TH¿ËÌL>  >nxs?ò±7¾  ¿ìà?¿ÍÌL¾1w{À»µ¾ûÐ¿¯N¿¬Ga>  >-w{?¬¨Õ3îà?¾  ¿_¾ÍÌL¾²~ÀgdS½þÐ¿iÿQ¿Âu>  >®~?:®²½  ¿G>ÍÌL¾³~À¢cS= Ñ¿gÿQ¿·>  >®~?BË³=  ¿àà??ÍÌL¾3w{À¥µ>Ñ¿¯N¿(\>  >.w{?_»B³×à?>  ¿z7?ÍÌL¾vxsÀÍ
>Ñ¿NH¿>  >rxs?-«2t7>  ¿ÀÿÙ?ÍÌL¾Å¢gÀº-³>	Ñ¿!c>¿
×£>  >Ã¢g?f½1¯ÿÙ>  ¿ô+	@ÍÌL¾ç%XÀK}á>Ñ¿K¨1¿{®>  >ã%X?¬xT²ì+	?  ¿;.#@ÍÌL¾b@EÀB?Ñ¿7 "¿ìQ¸>  >]@E?ñHk25.#?  ¿´:@ÍÌL¾>/À_b?
Ñ¿	¿]Â>  >~>/?îÃ²­:?  ¿ÂO@ÍÌL¾yÀ9:*?Ñ¿éZ÷¾ÎÌÌ>  >y?RÝÊ2¹O?  ¿©U`@ÍÌL¾v¨ö¿Ôb8?Ñ¿ ¼Ê¾?
×>  >x¨ö>¢;3U`?  ¿Ýn@ÍÌL¾Üz¼¿£C?Ñ¿ê¾°Gá>  >àz¼>V²Òn?  ¿õw@ÍÌL¾¨~¿[ÍK?Ñ¿gOQ¾!ë>  >¨~>À2õw?  ¿Dû}@ÍÌL¾fW ¿çÀP?Ñ¿SùÒ½Âõ>  >hW >'o3:û}?  ¿ @ÍÌL¾  Ð´¥iR?Ñ¿      ?  >×©3|´ô3  ?  ¿Eû}@ÍÌL¾ZW ?êÀP?Ñ¿9ùÒ=¹?  >SW ¾-Ý83;û}?  ¿õw@ÍÌL¾¨~?`ÍK?Ñ¿_OQ>q=
?  >¨~¾µO3õw?  ¿ßn@ÍÌL¾×z¼?£C?Ñ¿ê>)\?  >Ïz¼¾Ç(­²Ön?  ¿¬U`@ÍÌL¾r¨ö?Öb8?Ñ¿ñ»Ê>áz?  >g¨ö¾ax²£U`?  ¿ÆO@ÍÌL¾y@=:*?Ñ¿ÚZ÷>?  >y¿
2ÀO?  ¿¹:@ÍÌL¾>/@cb?Ñ¿	?Q¸?  >x>/¿Kü3³:?  ¿@.#@ÍÌL¾c@E@G?Ñ¿3 "?	×#?  >Y@E¿M¿²;.#?  ¿ù+	@ÍÌL¾é%X@U}á>Ñ¿C¨1?Áõ(?  >Þ%X¿}%²õ+	?  ¿ËÿÙ?ÍÌL¾É¢g@É-³>Ñ¿c>?y.?  >¼¢g¿-N¥²ÊÿÙ>  ¿7?ÍÌL¾|xs@Û
>Ñ¿AH?133?  >nxs¿há´7>  ¿òà??ÍÌL¾:w{@¶µ>Ñ¿¯N?éQ8?  >-w{¿b@³õà?>  ¿b>ÍÌL¾»~@dS=!Ñ¿QÿQ?¡p=?  >®~¿BÊ3`=  ¿L¾ÍÌL¾¼~@ÅcS½"Ñ¿OÿQ?YB?  >®~¿ô=¡3)½  ¿èà?¿ÍÌL¾<w{@µ¾%Ñ¿~¯N?®G?  >.w{¿©7³Ðà?¾  ¿7¿ÍÌL¾xs@¼
¾%Ñ¿:H?ÉÌL?  >rxs¿Bÿ³q7¾  ¿*¦É?ÍÌL¾]CV@«C©¾¼S!¿FÚ3¿y.?    À¢g¿±Ñ
´¹ÿÙ>  ¿Äý?ÍÌL¾ÛïG@@Õ¾¸S!¿ÇÓ'¿Áõ(?    â%X¿Mõ³ï+	?  ¿¶Y?ÍÌL¾Ô5a@y±u¾¾S!¿¨
=¿133?    rxs¿ïï3t7>  ¿Î|1?ÍÌL¾h@£û¾ÃS!¿Ó?C¿éQ8?    .w{¿H°/Ðà?>  ¿|æm>ÍÌL¾2Ul@m±G½ÅS!¿¸`F¿¡p=?    ®~¿=t³1=  ¿¸æm¾ÍÌL¾2Ul@­±G=ÉS!¿´`F¿YB?    ®~¿çEá²S½  ¿Ý|1¿ÍÌL¾h@¬û>ÌS!¿Ë?C¿®G?    -w{¿:3çà?¾  ¿¾Y¿ÍÌL¾Ò5a@z±u>ÌS!¿
=¿ÉÌL?    pxs¿±'d27¾  ¿1¦É¿ÍÌL¾ZCV@®C©>ÎS!¿6Ú3¿ëQ?    ½¢g¿ò´ÆÿÙ¾  ¿Äý¿ÍÌL¾ØïG@/Õ>ÎS!¿¶Ó'¿9
W?    à%X¿¢¹Ó3ñ+	¿  ¿A.#ÀÍÌL¾h@E@6¿'Ñ¿' "?ñ(\?  >]@E¿}º±26.#¿  ¿»:ÀÍÌL¾>/@Sb¿(Ñ¿	?©Ga?  >{>/¿àmR2°:¿  ¿ÉOÀÍÌL¾"y@.:*¿$Ñ¿ÓZ÷>aff?  >y¿+A$²»O¿  ¿°U`ÀÍÌL¾|¨ö?Éb8¿ Ñ¿ï»Ê>k?  >s¨ö¾P2 U`¿  ¿änÀÍÌL¾àz¼?ö¢C¿%Ñ¿ê>Ñ£p?  >Úz¼¾¦ý 1Ón¿  ¿!õwÀÍÌL¾¤¨~?LÍK¿(Ñ¿_OQ>Âu?  >¤¨~¾õ1õw¿  ¿Lû}ÀÍÌL¾gW ?óÀP¿	Ñ¿÷Ò=Aáz?  >VV ¾õJ2Cû}¿  ¿  ÀÍÌL¾ÍÌL¤¦iR¿Ñ¿    ùÿ?  >§¼;ñ<øÕ¿  ¿,ñÀÍÌL¾$u6@»fý>ÑS!¿¥'¿ñ(\?    ^@E¿³­35.#¿  ¿¯,ÀÍÌL¾Í"@¥å?ÎS!¿>¿©Ga?    y>/¿;Q,3²:¿  ¿H?ÀÍÌL¾0@îÎ ?ÈS!¿«é¾aff?    y¿´²¿O¿  ¿pOÀÍÌL¾(ä?ù..?ÇS!¿.¿¾k?    i¨ö¾M
V²£U`¿  ¿Ò+\ÀÍÌL¾X®?ÆÏ8?ÍS!¿X¾Ñ£p?    Ðz¼¾C¿z±Õn¿  ¿P\eÀÍÌL¾k?r@?ÏS!¿kºE¾Âu?    ¨~¾ª²õw¿  ¿ÐîjÀÍÌL¾Xní>Ý3E?ÎS!¿LÇ½Aáz?    ¼V ¾ð¶}5@û}¿  ¿ÍÌlÀÍÌL¾ÍÌL¤<ÅF?¥S!¿    ùÿ?    -Ì¼ùû¼Ì¿  ¿ÍÌlÀÍÌL¾ÍÌL¤<ÅF?¥S!¿            ±Ì<üû<Ì¿  ¿ÊîjÀÍÌL¾iní¾	4E?S!¿ÝLÇ=
×£<    RW >KB3;û}¿  ¿J\eÀÍÌL¾ k¿¡@?S!¿ºE>
×#=    ¨~>âª1õw¿  ¿Ì+\ÀÍÌL¾X®¿ïÏ8?S!¿=X>Âu=    Òz¼>Ùo,²Õn¿  ¿jOÀÍÌL¾(ä¿/.?S!¿Y¿>
×£=    l¨ö>ö³¢U`¿  ¿B?ÀÍÌL¾0ÀÏ ?S!¿:«é>ÌÌÌ=    y?ñG¡1½O¿  ¿ª,ÀÍÌL¾Ì"ÀÃå?S!¿[?Âõ=    y>/?¿à²±:¿  ¿'ñÀÍÌL¾"u6Àõfý>S!¿Å'?(\>    ]@E?o§26.#¿  ¿Äý¿ÍÌL¾ÖïGÀ\Õ>S!¿ÚÓ'?	×#>    á%X?º³ð+	¿  ¿+¦É¿ÍÌL¾XCVÀÊC©>S!¿ZÚ3?êQ8>    ½¢g?é»ø³ÆÿÙ¾  ¿¸Y¿ÍÌL¾Ð5aÀ¬±u>S!¿¿
=?ËÌL>    oxs?é²7¾  ¿Ô|1¿ÍÌL¾hÀÊû>¡S!¿í?C?¬Ga>    -w{?5åb³êà?¾  ¿æm¾ÍÌL¾0UlÀÐ±G=¢S!¿Ô`F?Âu>    ®~?*Lr³^½  ¿æm>ÍÌL¾0UlÀÊ±G½¥S!¿Ñ`F?·>    ®~?Xö²S=  ¿Ô|1?ÍÌL¾hÀÃû¾¨S!¿ç?C?(\>    -w{?á3èà?>  ¿¹Y?ÍÌL¾Ð5aÀ±u¾¨S!¿·
=?>    pxs?Câ9³}7>  ¿-¦É?ÍÌL¾XCVÀ½C©¾­S!¿PÚ3?
×£>    ¿¢g?O%J³¾ÿÙ>  ¿Äý?ÍÌL¾ÖïGÀEÕ¾±S!¿ÌÓ'?{®>    â%X?Ô$:4ï+	?  ¿*ñ@ÍÌL¾"u6Àâfý¾°S!¿¸'?ìQ¸>    \@E?.Î²7.#?  ¿­,@ÍÌL¾Ë"À»å¿­S!¿P?]Â>    x>/?¼x³³:?  ¿F?@ÍÌL¾0ÀýÎ ¿±S!¿«é>ÎÌÌ>    y?D"³¾O?  ¿nO@ÍÌL¾(ä¿/.¿³S!¿B¿>?
×>    l¨ö>±éË±¢U`?  ¿Ð+\@ÍÌL¾ÿW®¿ÖÏ8¿¹S!¿)X>°Gá>    Ñz¼>õû 2Õn?  ¿N\e@ÍÌL¾k¿@¿¸S!¿~ºE>!ë>    ¨~>6<@3õw?  ¿Îîj@ÍÌL¾Pní¾î3E¿¶S!¿ÀLÇ=Âõ>    PW >@½²;û}?  ¿ÑÌl@ÍÌL¾  `5,ÅF¿¸S!¿      ?    é`³£ 3  ?  ¿Îîj@ÍÌL¾ní>ò3E¿³S!¿ÄLÇ½¹?    TW ¾ãÞ3;û}?  ¿N\e@ÍÌL¾1k?@¿°S!¿ºE¾q=
?    ¨~¾°d;³õw?  ¿Ï+\@ÍÌL¾X®?ØÏ8¿²S!¿9X¾)\?    áz¼¾Ðvy²Òn?  ¿lO@ÍÌL¾¡(ä?/.¿´S!¿F¿¾áz?    t¨ö¾];3 U`?  ¿D?@ÍÌL¾	0@ùÎ ¿µS!¿«é¾?    y¿pð2¼O?  ¿«,@ÍÌL¾Ñ"@´å¿³S!¿P¿Q¸?    |>/¿ìÎ3¯:?  ¿(ñ@ÍÌL¾'u6@Üfý¾´S!¿·'¿	×#?    ]@E¿=ûÖ25.#?  ¿                                                                                                                                                                               5      5 @ÍÌL>¸~@           pasted__pPlane1        Ü            Pº18Ö<{C;$Á=!¾ñ<}C;                                 ¸              	  
                                   !  "   # $ % # & $ ' ( ) ' * ( + , - + . , / 0 1 / 2 0 3 4 5 6 7 8 6 9 7 : ; < : = ; > ? @ > A ? B C D B E C F G H F I G J K L J M K N O P N Q O R S T R U S V W X V Y W Z [ \ Z ] [ ^ _ ` ^ a _ b c d b e c f g h i j k i l j m n o m p n q r s q t r u v w u x v y z { y | z } ~  }  ~                                                ¡ ¢   £ ¡ ¤ ¥ ¦ ¤ § ¥ ¨ © ª ¨ « © ¬ ­ ® ¬ ¯ ­ ° ± ² ° ³ ± ´ µ ¶ ´ · µ ¸ ¹ º ¸ » ¹ ¼ ½ ¾ ¼ ¿ ½ À Á Â À Ã Á Ä Å Æ Ä Ç Å È É Ê È Ë É Ì Í Î Ì Ï Í Ï Ð Í Ï Ñ Ð Ò Ó Ô Ò Õ Ó Õ Ö Ó Õ × Ö Ø Ù Ú Ø Û Ù Û Ü Ù Û Ý Ü Þ ß à Þ á ß á â ß á ã â ä å æ ä ç å ç è å ç é è ê ë ì ê í ë í î ë í ï î ð ñ ò ð ó ñ ó ô ñ ó õ ô ö ÷ ø ö ù ÷ ù ú ÷ ù û ú ü ý þ ü ÿ ý ÿ  ý ÿ  	
		 !" #!#$!#%$&'(&)'('*(*++*,+,-*.,*/.'/*'0/)0')1023425356357689:8;9;<9;=<>?@>A?AB?ACBDEFDGEGHEGIHJKLJMKMNKMONPQRPSQSTQSUTVWXVYWYZWY[Z\]^\_]_`]_a`bcdbecefcegfhijhkiklikmlnopnqoqroqsrtuvtwuwxuwyxz{|z}{}~{}~    +                             +       0                                       L  UºÇQºF=Á;qc±59Y ¶  ?   ?      ¿;@Ý³oc±5  ¿ª¬:=A:G=Á;qc±59Y ¶  ?     a?  ¿;@Ý³oc±5  ¿Pº;A:P=Á;rc±5:Y ¶  ?  ? a?  ¿;@Ý³pc±5  ¿ª¬:=A:G=Á;/ÏÜ5T?µ  ?        ôý¿Á<Ý5  ¿Rº~î;P=Á;1ÏÜ5T?µ  ?  ?  ?ÿ¿{·j;&Ý5  ¿Pº;A:P=Á;1ÏÜ5T?µ  ?  ?      ¿Ú@Ý³0ÏÜ5  ¿Â$;Äv;G=Á;.ÏÜ5T?µ  ?      ?ü¿þå(<£ÈÝ5  ¿Â$;Äv;G=Á;Ôq5ª´  ?        ÿ¿eXh;ü¾5  ¿Xº ½<P=Á;I´4a{´  ?  ?  ?Ùÿ¿à/;H´4  ¿Rº~î;P=Á;Õq5ª´  ?  ?    ü¿þå(<ùP5  ¿Îá<_<G=Á;¢ê4:ò_´  ?      ?çÿ¿¨Täº£¸4  ¿Îá<_<G=Á;¢ê4:ò_´  ?        Zÿ¿ô;íi4  ¿Wº^Îx<P=Á;Á064ñÍÜ´  ?  ?  ?úÿ¿%V^:64  ¿Xº ½<P=Á;I´4a{´  ?  ?    çÿ¿¨TäºÊ³4  ¿¿`<îÙv<G=Á;aÿ3Ùýµ  ?      ?Êþ¿]1Ç;V4  ¿¿`<îÙv<G=Á;aÿ3Ùýµ  ?        3ÿ¿¼¢;¼«4  ¿TºRC<P=Á;j<:%4»¼ÿ?  ?  ?Öþ¿;åÁ;KØ@:  ¿Wº^Îx<P=Á;Á064ñÍÜ´  ?  ?    Êþ¿]1Ç;ß84  ¿yVÀ<I<R=Á;îªi:Ê4_»ÿ?      ?4ÿ¿Q§;9ým:  ¿yVÀ<I<R=Á;îªi:Ê4_»ÿ?        ïÿ¿ä"ºå¯h:  ¿UºpÝß<|Ã;els:A"ª¶ùÿ?  ?  ?ÿ¿¯_;1ms:  ¿TºRC<P=Á;j<:%4»¼ÿ?  ?    7ÿ¿Z°;`@:  ¿¯÷<dfà<R=Á;½l:Wo»:èÿ?      ?Õÿ¿rÂ»¾m:  ¿¯÷<dfà<R=Á;½l:Wo»:èÿ?        Ùÿ¿ê »Fzm:  ¿TºY÷
=P=Á;ð®:ÕU;Ïÿ?  ?  ?Úÿ¿º²»Pø:  ¿UºpÝß<|Ã;els:A"ª¶ùÿ?  ?    Ôÿ¿B­»ks:  ¿8=Ó;=G=Á;ÿÖï9ä¢;Öÿ?      ?Þÿ¿Lìÿºgò9  ¿8=Ó;=G=Á;ÿÖï9ä¢;Öÿ?        ªý¿
¼#ù9  ¿Tºòº=P=Á;    {´  ?  ?  ?Çÿ¿b*»»=°  ¿TºY÷
=P=Á;ð®:ÕU;Ïÿ?  ?    Þÿ¿æÿºå:  ¿F½=­õ=R=Á;    ø´  ?      ?Mý¿¶¼bâ2±  ¿F½=­õ=R=Á;    ø´  ?        ª÷¿,«¼b.±  ¿Uº®0=F=Á;zÖ1´3Ñ³4  ?  ?  ?Ýü¿mD ¼¶O.´  ¿Tºòº=P=Á;    {´  ?  ?    Mý¿¶¼}%±  ¿zü<ªÊ2=\=Á;1´fé¦4  ?      ?Óö¿G¼4s+´  ¿zü<ªÊ2=\=Á;1´fé¦4  ?        ÷ÿ¿Ö´ºø¸0´  ¿»Dò:{ÕC=G=Á;Ë.´ìWo5  ?  ?  ? ø¿ö}¼î´  ¿Uº®0=F=Á;zÖ1´3Ñ³4  ?  ?    Óö¿H¼Ë+´  ¿^Åå<ÕC=G=Á;tÇ/´±p5  ?      ?ßÿ¿7];¥±1´  ¿^Åå<ÕC=G=Á;tÇ/´±p5  ?        Éÿ¿ÉM';<2´  ¿xM¨;BjN=G=Á;    Oc´  ?  ?  ?Þÿ¿ùb;Wë/  ¿»Dò:{ÕC=G=Á;Ë.´ìWo5  ?  ?    ßÿ¿7];r²0´  ¿àÉ<3N=G=Á;    J`Y´  ?      ?Äÿ¿Í/;|ª0  ¿àÉ<3N=G=Á;    J`Y´  ?        ÿ¿Û{;ÎÛU0  ¿Pð< 'U=R=Á;    ¬*E¶  ?  ?  ?Áÿ¿Üæ2;zÉ	2  ¿xM¨;BjN=G=Á;    Oc´  ?  ?    Äÿ¿Í/;u0  ¿n¬<[ðT=R=Á;    w*E¶  ?      ?jÿ¿V;oU2  ¿n¬<[ðT=R=Á;    w*E¶  ?        Æþ¿yÈ»s²  ¿|YO<DöY=\=Á;    #Ã¶  ?  ?  ?°ÿ¿ò²J;\}M2  ¿Pð< 'U=R=Á;    ¬*E¶  ?  ?    jÿ¿V;¨U2  ¿Wv<¾:Z=\=Á;    "Ã¶  ?      ?É÷¿±¼z³  ¿UºÇQºF=Á;sc±µ6Y ¶  ?   ?      ?<@Ý³qc±5  ?Pº;A:P=Á;rc±µ6Y ¶  ?  ? a?  ?<@Ý³pc±5  ?¤]_»=A:G=Á;tc±µ7Y ¶  ?     a?  ?<@Ý³rc±5  ?¤]_»=A:G=Á;)hØµT?µ  ?        ôý?Á<	(Ù5  ?Rº~î;P=Á;&hØµT?µ  ?  ?  ?ÿ?}·j;¿Ø5  ?P»Äv;G=Á;(hØµT?µ  ?      ?ü?ÿå(<­aÙ5  ?Pº;A:P=Á;(hØµT?µ  ?  ?      ?Ø@Ý³'hØ5  ?P»Äv;G=Á;lK;´à¸µ  ?        ÿ?kXh;74=4  ?Xº ½<P=Á;     C±´  ?  ?  ?Ùÿ?ß/;RéD0  ?¤D¼_<R=Á;=34Å´  ?      ?çÿ?¨TäºÜ4´  ?Rº~î;P=Á;lK;´à¸µ  ?  ?    ü?ÿå(<×@4  ?¤D¼_<R=Á;=34Å´  ?        Zÿ?ô;82´  ?Wº^Îx<P=Á;]Üö3÷Ëõ4  ?  ?  ?úÿ?&V^:Ñ±÷³  ?ª1ª¼îÙv<\=Á;    ½p5  ?      ?Êþ?]1Ç;s)»±  ?Xº ½<P=Á;     C±´  ?  ?    çÿ?¨TäºÙ°  ?ª1ª¼îÙv<\=Á;    ½p5  ?        3ÿ?¼¢;ãF±  ?TºRC<P=Á; <ºO4»¼ÿ?  ?  ?Öþ?8åÁ;RÞ@:  ?d'Ó¼I<G=Á;´iº2_»ÿ?      ?4ÿ?Q§;Sn:  ?Wº^Îx<P=Á;]Üö3÷Ëõ4  ?  ?    Êþ?\1Ç;:Õü³  ?d'Ó¼I<G=Á;´iº2_»ÿ?        ïÿ?ä"º¹h:  ?UºpÝß<|Ã;@tsºX±¶ùÿ?  ?  ?ÿ?®_;us:  ?Mö½dfà<G=Á;=ÄlºIf»:èÿ?      ?Õÿ?qÂ»dm:  ?TºRC<P=Á; <ºO4»¼ÿ?  ?    7ÿ?[°;p@:  ?Mö½dfà<G=Á;=ÄlºIf»:èÿ?        Ùÿ?ê »ìm:  ?TºY÷
=P=Á;O±º9R;Ïÿ?  ?  ?Úÿ?º²»¨ú:  ? ½Ó;=G=Á;LÛï¹;Öÿ?      ?Þÿ?Mìÿº¦ò9  ?UºpÝß<|Ã;@tsºX±¶ùÿ?  ?    Ôÿ?A­»_ss:  ? ½Ó;=G=Á;LÛï¹;Öÿ?        ªý?
¼6ù9  ?Tºòº=P=Á;    {´  ?  ?  ?Çÿ?b*»»=°  ?»%½­õ=R=Á;    ø´  ?      ?Mý?¶¼câ2±  ?TºY÷
=P=Á;O±º9R;Ïÿ?  ?    Þÿ?æÿºÝç:  ?»%½­õ=R=Á;    ø´  ?        ª÷?-«¼a.±  ?Uº®0=F=Á;Úh.4-Ñ³4  ?  ?  ?Ýü?nD ¼!â*´  ?¥½ªÊ2=\=Á;-4cé¦4  ?      ?Óö?H¼íæ'´  ?Tºòº=P=Á;    {´  ?  ?    Mý?¶¼~%±  ?¥½ªÊ2=\=Á;-4cé¦4  ?        ÷ÿ?Ö´º,-´  ?ÙÔ»{ÕC=G=Á;lr04Ðè05  ?  ?  ? ø?ö}¼÷t%´  ?Iø¼ÕC=G=Á;O^14´45  ?      ?ßÿ?6];MÎ2´  ?Uº®0=F=Á;Úh.4-Ñ³4  ?  ?    Óö?H¼^(´  ?Iø¼ÕC=G=Á;O^14´45  ?        Éÿ?ÉM';63´  ?!ó»BjN=R=Á;    p
¶  ?  ?  ?Þÿ?ùb;v1  ?õ°Ü¼3N=R=Á;    ³Ð ¶  ?      ?Äÿ?Í/;D2°1  ?ÙÔ»{ÕC=G=Á;lr04Ðè05  ?  ?    ßÿ?6];°Ú1´  ?õ°Ü¼3N=R=Á;    ³Ð ¶  ?        ÿ?Û{;*vý1  ?%3¼ 'U=\=Á;    m&¶  ?  ?  ?Áÿ?Üæ2;Çè1  ?Xè¾¼[ðT=\=Á;    ¨	&¶  ?      ?jÿ?V; r32  ?!ó»BjN=R=Á;    p
¶  ?  ?    Äÿ?Í/;>°1  ?Xè¾¼[ðT=\=Á;    ¨	&¶  ?        Æþ?yÈ»µ²  ?Pût¼DöY=G=Á;    #Ã7  ?  ?  ?°ÿ?ó²J;]}Í²  ?AG¼¾:Z=G=Á;    "Ã7  ?      ?É÷?±¼z4  ?%3¼ 'U=\=Á;    m&¶  ?  ?    jÿ?V;¶o32  ?UºÇQº
×#°4      ¿   ?      ¿¹@Ý³´  ?Uº;A:
×#°4      ¿  ? a?  ¿¹@Ý³´  ?í¬:=A:    4      ¿     a?  ¿¹@Ý³´  ?í¬:=A:    cÍW4ò¨Ú³  ¿        ôý¿¿<ì¨X´  ?Uº~î;
×#°cÍW4ó¨Ú³  ¿  ?  ?ÿ¿=·j;F1X´  ?Ï$;Äv;    cÍW4ò¨Ú³  ¿      ?ü¿óå(<úêX´  ?Uº;A:
×#°cÍW4ò¨Ú³  ¿  ?      ¿¸@Ý³bÍW´  ?Ï$;Äv;              ¿        ÿ¿LXh;      ?Uº ½<
×#°          ¿  ?  ?Ùÿ¿á/;      ?Òá<_<              ¿      ?çÿ¿¤Täº      ?Uº~î;
×#°          ¿  ?    ü¿óå(<      ?Òá<_<              ¿        Zÿ¿ô;      ?Uº^Îx<
×#°          ¿  ?  ?úÿ¿V^:      ?À`<îÙv<              ¿      ?Êþ¿[1Ç;      ?Uº ½<
×#°          ¿  ?    çÿ¿£Täº      ?À`<îÙv<              ¿        3ÿ¿¼¢;      ?TºRC<
×#°          ¿  ?  ?Úþ¿,öÁ;      ?yVÀ<I<              ¿      ?;ÿ¿=Á;      ?Uº^Îx<
×#°          ¿  ?    Êþ¿\1Ç;      ?yVÀ<I<              ¿        öÿ¿Qmº      ?UºpÝß<
×#°          ¿  ?  ?ÿ¿Ç_;      ?¯÷<dfà<              ¿      ?Üÿ¿`­»      ?TºRC<
×#°          ¿  ?    ;ÿ¿=Á;      ?¯÷<dfà<              ¿        àÿ¿~û »      ?TºY÷
=
×#°          ¿  ?  ?Üÿ¿ø»      ?8=Ó;=              ¿      ?àÿ¿ »      ?UºpÝß<
×#°          ¿  ?    Üÿ¿`­»      ?8=Ó;=              ¿        ¬ý¿ì
¼      ?Tºòº=
×#°          ¿  ?  ?Çÿ¿b*»      ?F½=­õ=              ¿      ?Mý¿¶¼      ?TºY÷
=
×#°          ¿  ?    àÿ¿ »      ?F½=­õ=              ¿        ª÷¿,«¼      ?Uº®0=
×#°          ¿  ?  ?Ýü¿mD ¼      ?zü<ªÊ2=              ¿      ?Óö¿G¼      ?Tºòº=
×#°          ¿  ?    Mý¿¶¼      ?zü<ªÊ2=              ¿        ÷ÿ¿Ö´º      ?»Dò:{ÕC=              ¿  ?  ? ø¿ö}¼      ?^Åå<ÕC=              ¿      ?ßÿ¿7];      ?Uº®0=
×#°          ¿  ?    Óö¿H¼      ?^Åå<ÕC=              ¿        Éÿ¿ÉM';      ?xM¨;BjN=              ¿  ?  ?Þÿ¿ùb;      ?àÉ<3N=              ¿      ?Äÿ¿Í/;      ?»Dò:{ÕC=              ¿  ?    ßÿ¿7];      ?àÉ<3N=              ¿        ÿ¿Û{;      ?Pð< 'U=              ¿  ?  ?Áÿ¿Üæ2;      ?n¬<[ðT=              ¿      ?jÿ¿V;      ?xM¨;BjN=              ¿  ?    Äÿ¿Í/;      ?n¬<[ðT=              ¿        Æþ¿yÈ»      ?|YO<DöY=              ¿  ?  ?°ÿ¿ò²J;      ?Wv<¾:Z=              ¿      ?É÷¿±¼      ?Pð< 'U=              ¿  ?    jÿ¿V;      ?UºÇQº
×#°´      ¿   ?      ?º@Ý³´  ¿Ê]_»=A:    ´      ¿     a?  ?º@Ý³´  ¿Uº;A:
×#°´      ¿  ? a?  ?º@Ý³´  ¿Ê]_»=A:    cÍW´ô¨Ú³  ¿        ôý?¾<ì¨X´  ¿Uº~î;
×#°cÍW´ô¨Ú³  ¿  ?  ?ÿ?>·j;F1X´  ¿Uº;A:
×#°cÍW´ô¨Ú³  ¿  ?      ?º@Ý³bÍW´  ¿P»Äv;    cÍW´ô¨Ú³  ¿      ?ü?óå(<úêX´  ¿P»Äv;              ¿        ÿ?LXh;      ¿Uº ½<
×#°          ¿  ?  ?Ùÿ?à/;      ¿Uº~î;
×#°          ¿  ?    ü?óå(<      ¿¦D¼_<              ¿      ?çÿ?¥Täº      ¿¦D¼_<              ¿        Zÿ?ô;      ¿Uº^Îx<
×#°          ¿  ?  ?úÿ?#V^:      ¿Uº ½<
×#°          ¿  ?    çÿ?¦Täº      ¿ª1ª¼îÙv<              ¿      ?Êþ?]1Ç;      ¿ª1ª¼îÙv<              ¿        3ÿ?¼¢;      ¿TºRC<
×#°          ¿  ?  ?Úþ?,öÁ;      ¿Uº^Îx<
×#°          ¿  ?    Êþ?\1Ç;      ¿d'Ó¼I<              ¿      ?;ÿ?<Á;      ¿d'Ó¼I<              ¿        öÿ?Rmº      ¿UºpÝß<
×#°          ¿  ?  ?ÿ?Æ_;      ¿TºRC<
×#°          ¿  ?    ;ÿ?<Á;      ¿Mö½dfà<              ¿      ?Üÿ?_­»      ¿Mö½dfà<              ¿        àÿ?û »      ¿TºY÷
=
×#°          ¿  ?  ?Üÿ?ø»      ¿UºpÝß<
×#°          ¿  ?    Üÿ?`­»      ¿ ½Ó;=              ¿      ?àÿ? »      ¿ ½Ó;=              ¿        ¬ý?í
¼      ¿Tºòº=
×#°          ¿  ?  ?Çÿ?b*»      ¿TºY÷
=
×#°          ¿  ?    àÿ? »      ¿»%½­õ=              ¿      ?Mý?¶¼      ¿»%½­õ=              ¿        ª÷?-«¼      ¿Uº®0=
×#°          ¿  ?  ?Ýü?nD ¼      ¿Tºòº=
×#°          ¿  ?    Mý?¶¼      ¿¥½ªÊ2=              ¿      ?Óö?H¼      ¿¥½ªÊ2=              ¿        ÷ÿ?Ö´º      ¿ÙÔ»{ÕC=              ¿  ?  ? ø?ö}¼      ¿Uº®0=
×#°          ¿  ?    Óö?H¼      ¿Iø¼ÕC=              ¿      ?ßÿ?6];      ¿Iø¼ÕC=              ¿        Éÿ?ÉM';      ¿!ó»BjN=              ¿  ?  ?Þÿ?ùb;      ¿ÙÔ»{ÕC=              ¿  ?    ßÿ?6];      ¿õ°Ü¼3N=              ¿      ?Äÿ?Í/;      ¿õ°Ü¼3N=              ¿        ÿ?Û{;      ¿%3¼ 'U=              ¿  ?  ?Áÿ?Üæ2;      ¿!ó»BjN=              ¿  ?    Äÿ?Í/;      ¿Xè¾¼[ðT=              ¿      ?jÿ?V;      ¿Xè¾¼[ðT=              ¿        Æþ?yÈ»      ¿Pût¼DöY=              ¿  ?  ?°ÿ?ó²J;      ¿%3¼ 'U=              ¿  ?    jÿ?V;      ¿AG¼¾:Z=              ¿      ?É÷?±¼      ¿í¬:=A:    U.?ºv!¿dÿ¾     a?)+¯>Ú¹¾¡à]?  ¿Uº/\»E=A;õÚ*?j¤>¿Å],´   ?    cæ3L\ ´  ?  ¿UºÇQº
×#°_è?Ýë#¿´¿   ?    nw®>û«Â¾J\?  ¿Í¢:w×ºG=A;ðf-?(T<¿È×H4     a?
´}À4  ?  ¿UºÇQºF=Á;dè?Õë#¿´?   ?    |w®¾ú«Â>I\?  ¿ª¬:=A:G=Á;O.?¶v!¿³dÿ>     a?6+¯¾Ú¹>à]?  ¿Ï$;Äv;    ~?$¿§.õ¾      ?÷¦>³¾½`?  ¿Í¢:w×ºG=A;ðf-?(T<¿È×H4        
´}À4  ?  ¿í¬:=A:    U.?ºv!¿dÿ¾        )+¯>Ú¹¾¡à]?  ¿Ê1;®±9G=A;Y,/?µ®:¿5      ?óaÏ´Ý4  ?  ¿ª¬:=A:G=Á;O.?¶v!¿³dÿ>        6+¯¾Ú¹>à]?  ¿Â$;Äv;G=Á;{?þ$¿·.õ>      ?÷¦¾³>½`?  ¿Òá<_<    ?ü0¿Ñ/ï¾      ?j>»¾Yb?  ¿Ê1;®±9G=A;Y,/?µ®:¿5        óaÏ´Ý4  ?  ¿Ï$;Äv;    ~?$¿§.õ¾        ÷¦>³¾½`?  ¿ª)<`ò;G=A;H×!?ZF¿ëîq4      ?µò´ñs;4  ?  ¿Â$;Äv;G=Á;{?þ$¿·.õ>        ÷¦¾³>½`?  ¿Îá<_<G=Á;?ü0¿Þ/ï>      ?q¾»>Yb?  ¿À`<îÙv<    p³?U7¿æ¾      ?>·x¸¾_°d?  ¿ª)<`ò;G=A;H×!?ZF¿ëîq4        µò´ñs;4  ?  ¿Òá<_<    ?ü0¿Ñ/ï¾        j>»¾Yb?  ¿ù <bêf<G=A;ýÂ?¼­L¿ñÁï3      ?³B±¿3  ?  ¿Îá<_<G=Á;?ü0¿Þ/ï>        q¾»>Yb?  ¿¿`<îÙv<G=Á;m³?U7¿æ>      ?¾¿x¸>^°d?  ¿yVÀ<I<    $Ã&?'8¿¨}Þ¾      ?ì >¯¤¾Åf?  ¿ù <bêf<G=A;ýÂ?¼­L¿ñÁï3        ³B±¿3  ?  ¿À`<îÙv<    p³?U7¿æ¾        >·x¸¾_°d?  ¿nàË<3<R=A;ïç<?åÅ,¿          ?          ?  ¿¿`<îÙv<G=Á;m³?U7¿æ>        ¾¿x¸>^°d?  ¿yVÀ<I<R=Á;!Ã&?*8¿ª}Þ>      ?ì ¾´¤>Åf?  ¿¯÷<dfà<    á»A?ð¾U0é¾      ?39Æ>E£u¾Eèc?  ¿nàË<3<R=A;ïç<?åÅ,¿                      ?  ¿yVÀ<I<    $Ã&?'8¿¨}Þ¾        ì >¯¤¾Åf?  ¿Ëã=Ká<R=A;na?~ò¾          ?          ?  ¿yVÀ<I<R=Á;!Ã&?*8¿ª}Þ>        ì ¾´¤>Åf?  ¿¯÷<dfà<R=Á;á»A?ð¾T0é>      ?39Æ¾D£u>Fèc?  ¿8=Ó;=    ý¦W?^Ø¾h¿      ?-õ>c}?
¢½  ?Ëã=Ká<R=A;na?~ò¾                      ?  ¿¯÷<dfà<    á»A?ð¾U0é¾        39Æ>E£u¾Eèc?  ¿ê==G=A;ç;~?Ó$ð½Â	M´      ?©K4¤VÀ²  ?  ¿¯÷<dfà<R=Á;á»A?ð¾T0é>        39Æ¾D£u>Fèc?  ¿8=Ó;=G=Á;þ¦W?aØ¾h?      ?1õ>b}?
¢=  ?F½=­õ=     ßP?ç=(¿      ?ò$¾½Å[~?·$=  ?ê==G=A;ç;~?Ó$ð½Â	M´        ©K4¤VÀ²  ?  ¿8=Ó;=    ý¦W?^Ø¾h¿        -õ>c}?
¢½  ?o|
=#=R=A;~È|?´Ò!>          ?          ?  ¿8=Ó;=G=Á;þ¦W?aØ¾h?        1õ>b}?
¢=  ?F½=­õ=R=Á;"ßP?Eç=~(?      ?º$¾½Æ[~?$½  ?zü<ªÊ2=    ­ò;?F}>Tq¿      ?^Ýh¾®t?ÔA>  ?o|
=#=R=A;~È|?´Ò!>                      ?  ¿F½=­õ=     ßP?ç=(¿        ò$¾½Å[~?·$=  ?Pº=9=\=A;i?K¹Ó>ü¶4      ?8¦´2V´  ?  ¿F½=­õ=R=Á;"ßP?Eç=~(?        º$¾½Æ[~?$½  ?zü<ªÊ2=\=Á;«ò;?M}>Sq?      ?gÝh¾­t?ÔA¾  ?Uº®0=
×#°éP¿/?!°¾  ?    dÎj¾ù¨>èmv?  ?^;ÁK=G=A;4:¿£®/?      ?  ?          ?  ?»Dò:{ÕC=    ø>¿·?¹¦¾  ?  ?¾>àL>r?  ?UºÛ²6=G=A;ûµX¿ÕG?      ?              ?  ?»Dò:{ÕC=G=Á;ø>¿·?¹¦>  ?  ?>>àL¾r?  ?Uº®0=F=Á;ëP¿/?#°>  ?    kÎj>ù¨¾èmv?  ?^Åå<ÕC=    ?t?¹%¿      ?üÞ«¾KD\?YMÄ>  ?Pº=9=\=A;i?K¹Ó>ü¶4        8¦´2V´  ?  ¿zü<ªÊ2=    ­ò;?F}>Tq¿        ^Ýh¾®t?ÔA>  ?ksó<PcK=G=A;<?»¯-?,±´      ?(4¸hp4  ?  ¿zü<ªÊ2=\=Á;«ò;?M}>Sq?        gÝh¾­t?ÔA¾  ?^Åå<ÕC=G=Á;þ?t?¹%?      ?
ß«¾FD\?gMÄ¾  ¿»Dò:{ÕC=    ø>¿·?¹¦¾  ?    ¾>àL>r?  ?Â´;@!W=G=A;ì¿]Æ\?      ?  ?          ?  ?xM¨;BjN=    =åû¾<?
ï¾  ?  ?ü¾¡Æ>cb?  ?^;ÁK=G=A;4:¿£®/?      ?              ?  ?xM¨;BjN=G=Á;Cåû¾<?
ï>  ?  ?¡ü>¡Æ¾cb?  ?»Dò:{ÕC=G=Á;ø>¿·?¹¦>  ?    >>àL¾r?  ?àÉ<3N=    åÇ>Íó$?Lk(¿      ?ó½k?Ê¬¾J>  ¿ksó<PcK=G=A;<?»¯-?,±´        (4¸hp4  ?  ¿^Åå<ÕC=    ?t?¹%¿        üÞ«¾KD\?YMÄ>  ?¥õÕ<ÏåV=G=A;"Ú?8Z?¢´      ?Ø_3÷ïþ3  ?  ?^Åå<ÕC=G=Á;þ?t?¹%?        
ß«¾FD\?gMÄ¾  ¿àÉ<3N=G=Á;ïÇ>Êó$?Nk(?      ?ñ½k?Ñ¬¾T¾  ?xM¨;BjN=    =åû¾<?
ï¾  ?    ü¾¡Æ>cb?  ?"<Yu^=R=A;ýl­¾ïÝp?      ?  ?          ?  ?Pð< 'U=    =
 ¾öG?`
¿  ?  ?!,s?ñ>A$6¾  ¿Â´;@!W=G=A;ì¿]Æ\?      ?              ?  ?Pð< 'U=R=Á;L
 ¾öG?`
?  ?  ?,s?ú>X$6>  ¿xM¨;BjN=G=Á;Cåû¾<?
ï>  ?    ¡ü>¡Æ¾cb?  ?n¬<[ðT=    æi>7È4?À"(¿      ?Xâv?PF¾q8>  ¿¥õÕ<ÏåV=G=A;"Ú?8Z?¢´        Ø_3÷ïþ3  ?  ?àÉ<3N=    åÇ>Íó$?Lk(¿        ó½k?Ê¬¾J>  ¿ðx¶<é9^=R=A;õS·>Ïo?;+4      ?^|Î³2´  ?  ?àÉ<3N=G=Á;ïÇ>Êó$?Nk(?        ñ½k?Ñ¬¾T¾  ?n¬<[ðT=R=Á;ùi>/È4?Ä"(?      ?Vâv?PF¾9q8¾  ¿Pð< 'U=    =
 ¾öG?`
¿  ?    !,s?ñ>A$6¾  ¿þH\<«°c=\=A;g± ¾bø}?E¤í3  ?  ?¡ín2êÁë³  ?  ?|YO<DöY=    ´¾ÏTJ?Ë¿  ?  ?Rb}?0é=*Ë¯½  ¿"<Yu^=R=A;ýl­¾ïÝp?      ?              ?  ?ÏÜ<)ûc=\=A;Õ£)>qv|?¦_þ3      ?ï¨²ØÛú³  ?  ?Wv<¾:Z=    «Í=+B?Vý$¿      ?±¶~?æ7½âÑ=  ¿ðx¶<é9^=R=A;õS·>Ïo?;+4        ^|Î³2´  ?  ?n¬<[ðT=    æi>7È4?À"(¿        Xâv?PF¾q8>  ¿n¬<[ðT=R=Á;ùi>/È4?Ä"(?        Vâv?PF¾9q8¾  ¿Wv<¾:Z=\=Á;ÓÍ=+B?Vý$?      ?°¶~?8½üÑ½  ¿|YO<DöY=\=Á;Ì¾ÐTJ?È?  ?  ?Qb}?Á0é=DË¯=  ¿Pð< 'U=R=Á;L
 ¾öG?`
?  ?    ,s?ú>X$6>  ¿UºÇQº
×#°aè¿Üë#¿´¿   ?    pw®¾ù«Â¾L\?  ¿8Ög»w×ºG=A;ñf-¿&T<¿½4     a?*94NñH4  ?  ¿Ê]_»=A:    V.¿»v!¿dÿ¾     a?&+¯¾Ú¹¾¢à]?  ¿Uº/\»E=A;ùÚ*¿g¤>¿È],´   ?    mæ³L\ ´  ?  ¿¤]_»=A:G=Á;N.¿¶v!¿¸dÿ>     a?:+¯>Ú¹>à]?  ¿UºÇQºF=Á;fè¿Ñë#¿ ´?   ?    w®>ú«Â>G\?  ¿Ê]_»=A:    V.¿»v!¿dÿ¾        &+¯¾Ú¹¾¢à]?  ¿ð(¤»®±9G=A;W,/¿¶®:¿q_(5      ?Ðlæ4õ4  ?  ¿P»Äv;    ¿$¿ .õ¾      ?÷¦¾³¾½`?  ¿8Ög»w×ºG=A;ñf-¿&T<¿½4        *94NñH4  ?  ¿P»Äv;G=Á;x¿$¿³.õ>      ?÷¦>³>½`?  ¿¤]_»=A:G=Á;N.¿¶v!¿¸dÿ>        :+¯>Ú¹>à]?  ¿P»Äv;    ¿$¿ .õ¾        ÷¦¾³¾½`?  ¿~­N¼`ò;R=A;H×!¿ZF¿ßîq4      ?®ò4és;4  ?  ¿¦D¼_<    ¿ü0¿Â/ï¾      ?`¾»¾Yb?  ¿ð(¤»®±9G=A;W,/¿¶®:¿q_(5        Ðlæ4õ4  ?  ¿¤D¼_<R=Á;¿ü0¿Î/ï>      ?e>»>Yb?  ¿P»Äv;G=Á;x¿$¿³.õ>        ÷¦>³>½`?  ¿¦D¼_<    ¿ü0¿Â/ï¾        `¾»¾Yb?  ¿äc³¼bêf<\=A;ýÂ¿¼­L¿,Ù4      ?Ü´3ï3  ?  ¿ª1ª¼îÙv<    p³¿¡U7¿mæ¾      ?r¾ªx¸¾d°d?  ¿~­N¼`ò;R=A;H×!¿ZF¿ßîq4        ®ò4és;4  ?  ¿ª1ª¼îÙv<\=Á;r³¿U7¿ræ>      ?w>¬x¸>c°d?  ¿¤D¼_<R=Á;¿ü0¿Î/ï>        e>»>Yb?  ¿ª1ª¼îÙv<    p³¿¡U7¿mæ¾        r¾ªx¸¾d°d?  ¿X±Þ¼3<G=A;ðç<¿åÅ,¿v'´      ? %÷³C
â³  ?  ?d'Ó¼I<     Ã&¿*8¿­}Þ¾      ?ì ¾¶¤¾Äf?  ?äc³¼bêf<\=A;ýÂ¿¼­L¿,Ù4        Ü´3ï3  ?  ¿d'Ó¼I<G=Á;%Ã&¿%8¿ª}Þ>      ?ì >¯¤>Åf?  ?ª1ª¼îÙv<\=Á;r³¿U7¿ræ>        w>¬x¸>c°d?  ¿d'Ó¼I<     Ã&¿*8¿­}Þ¾        ì ¾¶¤¾Äf?  ?@L½Ká<G=A;na¿vò¾Ëü³      ?¯Þ³vo³  ?  ?Mö½dfà<    Þ»A¿ÿð¾d0é¾      ?A9Æ¾P£u¾Bèc?  ?X±Þ¼3<G=A;ðç<¿åÅ,¿v'´         %÷³C
â³  ?  ?Mö½dfà<G=Á;à»A¿ ð¾]0é>      ?;9Æ>H£u>Eèc?  ?d'Ó¼I<G=Á;%Ã&¿%8¿ª}Þ>        ì >¯¤>Åf?  ?Mö½dfà<    Þ»A¿ÿð¾d0é¾        A9Æ¾P£u¾Bèc?  ?_u½=G=A;è;~¿$ð½Æ	M´      ?®K´vVÀ²  ?  ? ½Ó;=    ü¦W¿KØ¾h¿      ?õ¾d}?
¢½  ¿@L½Ká<G=A;na¿vò¾Ëü³        ¯Þ³vo³  ?  ? ½Ó;=G=Á;ý¦W¿JØ¾h?      ?õ¾d}?
¢=  ¿Mö½dfà<G=Á;à»A¿ ð¾]0é>        ;9Æ>H£u>Eèc?  ? ½Ó;=    ü¦W¿KØ¾h¿        õ¾d}?
¢½  ¿ää½#=R=A;È|¿Ò!>          ?          ?  ?»%½­õ=     ßP¿lç=(¿      ?Ù$¾=Æ[~?¦$=  ¿_u½=G=A;è;~¿$ð½Æ	M´        ®K´vVÀ²  ?  ?»%½­õ=R=Á;"ßP¿Eç=~(?      ?º$¾=Æ[~?$½  ¿ ½Ó;=G=Á;ý¦W¿JØ¾h?        õ¾d}?
¢=  ¿»%½­õ=     ßP¿lç=(¿        Ù$¾=Æ[~?¦$=  ¿Æ"½9=\=A;i¿@¹Ó>÷4      ?,ëà4ñML´  ?  ?¥½ªÊ2=    ¯ò;¿8}>Tq¿      ?HÝh>±t?qÔA>  ¿ää½#=R=A;È|¿Ò!>                      ?  ?¥½ªÊ2=\=Á;«ò;¿9}>Yq?      ?EÝh>°t?yÔA¾  ¿»%½­õ=R=Á;"ßP¿Eç=~(?        º$¾=Æ[~?$½  ¿¥½ªÊ2=    ¯ò;¿8}>Tq¿        HÝh>±t?qÔA>  ¿+"½PcK=G=A;<¿½¯-?5ê´      ?<´ô -4  ?  ?Iø¼ÕC=    ¿t?¹%¿      ?	ß«>HD\?bMÄ>  ?Æ"½9=\=A;i¿@¹Ó>÷4        ,ëà4ñML´  ?  ?Iø¼ÕC=G=Á;ý¿t?¹%?      ?ß«>DD\?iMÄ¾  ¿¥½ªÊ2=\=Á;«ò;¿9}>Yq?        EÝh>°t?yÔA¾  ¿ÙÔ»{ÕC=    ø>?·?z¹¦¾  ?  ?ý>4àL>r?  ¿UºÛ²6=G=A;ûµX?ÕG?      ?              ?  ¿Uº®0=
×#°êP?/?°¾  ?    VÎj>ï¨>émv?  ¿®r»ÁK=G=A; 4:?¡®/?      ?  ?          ?  ¿Uº®0=F=Á;êP?/?°>  ?    VÎj¾ï¨¾émv?  ¿ÙÔ»{ÕC=G=Á;ø>?·?x¹¦>  ?  ?ü¾0àL¾r?  ¿Iø¼ÕC=    ¿t?¹%¿        	ß«>HD\?bMÄ>  ?Æè¼ÏåV=R=A;%Ú¿8Z?4C@4      ?~É3^ã#´  ?  ?õ°Ü¼3N=    èÇ¾Ôó$?Gk(¿      ?ó½k?Ô¬>I¾  ¿+"½PcK=G=A;<¿½¯-?5ê´        <´ô -4  ?  ?õ°Ü¼3N=R=Á;ýÇ¾Ëó$?Hk(?      ?î½k?Ý¬>Z>  ?Iø¼ÕC=G=Á;ý¿t?¹%?        ß«>DD\?iMÄ¾  ¿!ó»BjN=    ;åû><?
ï¾  ?  ?ü>¡Æ>cb?  ?®r»ÁK=G=A; 4:?¡®/?      ?              ?  ¿ÙÔ»{ÕC=    ø>?·?z¹¦¾  ?    ý>4àL>r?  ¿kXÿ»@!W=R=A;ì?]Æ\?jÄ´  ?  ?ÜF4Ác©4  ?  ?ÙÔ»{ÕC=G=Á;ø>?·?x¹¦>  ?    ü¾0àL¾r?  ¿!ó»BjN=R=Á;Kåû><?
ï>  ?  ?ü¾¡Æ¾cb?  ?õ°Ü¼3N=    èÇ¾Ôó$?Gk(¿        ó½k?Ô¬>I¾  ¿ÛIÉ¼é9^=\=A;ïS·¾Ðo?645      ?¸4@C(µ  ?  ?Xè¾¼[ðT=    îi¾1È4?Â"(¿      ?Wâv?PF>'q8¾  ¿Æè¼ÏåV=R=A;%Ú¿8Z?4C@4        ~É3^ã#´  ?  ?Xè¾¼[ðT=\=Á;ái¾1È4?Å"(?      ?Yâv?|PF>q8>  ¿õ°Ü¼3N=R=Á;ýÇ¾Ëó$?Hk(?        î½k?Ý¬>Z>  ?%3¼ 'U=    A
 >öG?`
¿  ?  ? ,s?ñ¾L$6>  ¿kXÿ»@!W=R=A;ì?]Æ\?jÄ´  ?    ÜF4Ác©4  ?  ?!ó»BjN=    ;åû><?
ï¾  ?    ü>¡Æ>cb?  ?éÃ<¼Yu^=\=A;öl­>ñÝp?zq?4  ?  ?+±³\ 4´  ?  ?!ó»BjN=R=Á;Kåû><?
ï>  ?    ü¾¡Æ¾cb?  ?%3¼ 'U=\=Á;@
 >öG?`
?  ?  ? ,s?ò¾F$6¾  ¿Xè¾¼[ðT=    îi¾1È4?Â"(¿        Wâv?PF>'q8¾  ¿¹­¤¼)ûc=G=A;¾£)¾rv|?.É´      ?á6³Éá4  ?  ?AG¼¾:Z=    ÇÍ½!B?bý$¿      ?±¶~?ô7=ÿÑ½  ¿ÛIÉ¼é9^=\=A;ïS·¾Ðo?645        ¸4@C(µ  ?  ?iõ¼«°c=G=A;Z± >bø}?Ô,´  ?  ?Ä­2Îu+4  ?  ?Pût¼DöY=    É>ÌTJ?Í¿  ?  ?Qb}?·0é½GË¯=  ¿éÃ<¼Yu^=\=A;öl­>ñÝp?zq?4  ?    +±³\ 4´  ?  ?%3¼ 'U=    A
 >öG?`
¿  ?     ,s?ñ¾L$6>  ¿%3¼ 'U=\=Á;@
 >öG?`
?  ?     ,s?ò¾F$6¾  ¿Pût¼DöY=G=Á;>ËTJ?Ñ?  ?  ?Sb}?h0é½Ë¯½  ¿AG¼¾:Z=G=Á;~Í½$B?`ý$?      ?²¶~?¾7=ÍÑ=  ¿Xè¾¼[ðT=\=Á;ái¾1È4?Å"(?        Yâv?|PF>q8>  ¿                                                                                                                                                                            Pº18Ö<{C;$Á=!¾ñ<}C;	          pPlane1                          Ç>¡»d4=»=¯U¢;©=                                              	 
      +                              +       0                                       @  »={t8d4=­¹ÿÿ?        ­eh>ÿÿ¿­¹Å­1  ¿»½    «oö¼®¹ÿÿ?      ?­eè>¼úr¿®¤y¹85¡¾  ¿»½    ®oö<­¹ÿÿ?      ?    ¼úr¿¬¤y¹85¡¾  ¿»½    ®oö<q½IpM?gè?        s?ùC=¼PZ=  ¿a¦z½;Ê!¼d4=q½IpM?fè?      ?|o?	]=ï	<  ¿»={t8d4=o½IpM?gè?  ?   ?|o?]=ï	<  ¿»={t8d4=ª¹ÿÿ?        ­eh>ÿÿ¿ª¹Å­1  ?»½    ðþl=©¹ÿÿ?      ?    ¼úr¿¤¤y¹85¡>  ?»½    O·ñ=ª¹ÿÿ?      ?­eè>¼úr¿¦¤y¹85¡>  ?»½    ðþl=½HpM?fè¿        s?D=ÃPZ½  ?»={t8d4=½HpM?fè¿  ?   ?|o?]=û	¼  ?a¦z½;Ê!¼d4=½IpM?fè¿      ?|o?]=û	¼  ?                                                                                                                                                                                Ç>¡»d4=»=¯U¢;©=	          polySurface24                       K¹ÐIk;    *Q%<¼âå<¦èÐ:                                 <	                                                           	 
  	 
  	 
  	 
   	   	   	   	                                                                                                                                  !  !    !    !    !     !  " # $ " # $ " % # % $ " % # $ % $ " % # $ " % # & ' ( & ' ( & ) ' ) ( & ) ' ( ) ( & ) ' ( & ) ' * + , * + , * - + - , * - + , - , * - + , * - + . / 0 . / 0 . 1 / . 1 / 2 3 4 2 3 4 2 5 3 2 5 3 6 7 8 6 9 7 8 9 7 8 6 9 : ; < : = ; < = ; < : = > ? @ > A ? @ A ? @ > A A B ? A C B ? C B ? A C D E F D E F D G E D H E I J K I J K I J K I J K I L J I L J I L J I L J M N O M N O M P N M P N Q R S Q R S Q R S Q R S Q T R Q T R Q T R Q T R U V W U X V Y Z [ Y \ Z Y Z \ Y Z \ Y \ Z \ ] Z \ Z ] \ Z ] \ ] Z \ ^ ] \ ] ^ \ ] ^ \ ^ ] ^ _ ] ^ ] _ ^ ] _ ^ _ ] ^ ` _ ^ _ ` ^ _ ` ^ ` _ ` a Y ` _ a Y a Z ` a Y ` _ a Y a Z ` a _ ` Y a Y Z a b c d b c d b e c b e c f g h f g h f i g f i g j k l j k l j m k j m k n o p n o p n q o n q o r s t r s t r s t r s t r u s r u s r u s r u s v w x v w x v w x v w x v y w v y w v y w v y w z { | z { | z { | z { | z } { z } { z } { z } { ~   ~   ~   ~   ~   ~   ~   ~                                                                                                                                                                                                     ¡ ¢   ¡ ¢   £ ¡   £ ¡ ¤ ¥ ¦ ¤ ¥ ¦ ¤ § ¥ ¤ § ¥ ¨ © ª ¨ « © « ª ¨ « © ª ¬ ­ ® ¬ ¯ ­ ¯ ® ¬ ¯ ­ ® ° ± ² ° ³ ± ³ ² ° ³ ± ² ² ± ´ ² ´ µ ± µ ² ± ´ µ ¶ · ¸ ¶ · ¸ ¶ ¹ · ¶ ¹ · º » ¼ º » ¼ º » ¼ º » ¼ º ½ » º ½ » º ½ » º ½ » ¾ ¿ À ¾ Á ¿ Â ¿ À Â Ã ¿ Ä Å Æ Ä Å Æ Ä Å Æ Ä Ç Å Ä Ç Å Ä Ç Å Ä È Æ Ä É È Ê Ë Ì Ê Ì Ë Ê Ì Ë Ê Í Ë Ê Ë Í Ê Ë Í Ì Ë Î Ì Î Ë Ì Î Ë Ì Î Ï Ì Ï Î Ì Ï Î Ï Î Ð Ï Ð Î Ï Ð Î Ï Î Ð Ï Ð Ñ Ñ Í Ê Ñ Ð Í Ï Ñ Ð Ñ Í Ð Ñ Ê Í Ï Ñ Ð Ñ Í Ð Ñ Ê Í Ï Ð Ñ Ò Î Ï Ò Ë Î Ó Ô Õ Ó Ö Ô × Ø Õ × Ù Ø Ú Û Ü Ú Û Ü Ú Ý Û Ú Ý Û Þ ß à Þ ß à Þ á ß Þ á ß â ã ä â ã ä â å ã â å ã æ ç è æ é ç ê é æ ë ì ê í î ï í ð î ñ ò ó ñ ô ò õ ö ÷ õ ø ö ù ú û ü ý þ ü ÿ ý þ ý      +                             +       0                                       00  B}(¼µÈÆ;¦èÐº          ¿        zR@?Kö(¿      ?áÉ:yÈ¼¦èÐº          ¿c?  ?ÿ>?u*¿      ?rý»i¼¦èÐº          ¿      ?Ê»>þLn¿      ?Y|_»{¬ª8¦èÐº          ¿c?    A?Ñ(¿      ? ©ï;q¼¦èÐ:          ?        Á]¿mÐÿ>      ¿}Á÷»tr³<¦èÐ:          ?  ?k?`FZ¿ßÂ?      ¿ LÈº« ¼¦èÐ:          ?  ?    Þ(_¿xâú>      ¿Þ¦:ïé<¦èÐ:          ?    k?þ©X¿äZ?      ¿B}(¼µÈÆ;¦èÐ:          ?        zR@?Kö(¿      ¿áÉ:yÈ¼¦èÐ:          ?c?  ?ÿ>?u*¿      ¿Y|_»{¬ª8¦èÐ:          ?c?    A?Ñ(¿      ¿rý»i¼¦èÐ:          ?      ?Ê»>þLn¿      ¿ ©ï;q¼¦èÐº          ¿        Á]¿mÐÿ>      ?}Á÷»tr³<¦èÐº          ¿  ?k?`FZ¿ßÂ?      ?Þ¦:ïé<¦èÐº          ¿    k?þ©X¿äZ?      ? LÈº« ¼¦èÐº          ¿  ?    Þ(_¿xâú>      ?B}(¼µÈÆ;¦èÐ:<)o¿ ¶¾                      ?  ?rý»i¼¦èÐº<)o¿ ¶¾          ?          ?  ?rý»i¼¦èÐ:<)o¿ ¶¾          ?          ?  ?B}(¼µÈÆ;¦èÐº<)o¿ ¶¾                      ?  ?áÉ:yÈ¼¦èÐºþLn¿Ë»¾    c?  ?          ?  ?áÉ:yÈ¼¦èÐ:þLn¿Ë»¾    c?  ?          ?  ?áÉ:yÈ¼¦èÐ:Lóz?ÜaJ>    c?  ?          ?  ¿Y|_»{¬ª8¦èÐºLóz?ÜaJ>    c?              ?  ¿Y|_»{¬ª8¦èÐ:Lóz?ÜaJ>    c?              ?  ¿áÉ:yÈ¼¦èÐºLóz?ÜaJ>    c?  ?          ?  ¿Y|_»{¬ª8¦èÐ:Ñ(?A?    c?              ?  ?B}(¼µÈÆ;¦èÐºÑ(?A?                      ?  ?B}(¼µÈÆ;¦èÐ:Ñ(?A?                      ?  ?Y|_»{¬ª8¦èÐºÑ(?A?    c?              ?  ? ©ï;q¼¦èÐºyâú¾Þ(_¿                      ?  ¿ LÈº« ¼¦èÐ:yâú¾Þ(_¿      ?              ?  ¿ LÈº« ¼¦èÐºyâú¾Þ(_¿      ?              ?  ¿ ©ï;q¼¦èÐ:yâú¾Þ(_¿                      ?  ¿ LÈº« ¼¦èÐºúz{¿.?¾      ?              ?  ?}Á÷»tr³<¦èÐ:úz{¿.?¾      ?k?          ?  ?}Á÷»tr³<¦èÐºúz{¿.?¾      ?k?          ?  ? LÈº« ¼¦èÐ:úz{¿.?¾      ?              ?  ?}Á÷»tr³<¦èÐºãZ?ÿ©X?      ?k?          ?  ?Þ¦:ïé<¦èÐ:ãZ?ÿ©X?        k?          ?  ?Þ¦:ïé<¦èÐºãZ?ÿ©X?        k?          ?  ?}Á÷»tr³<¦èÐ:ãZ?ÿ©X?      ?k?          ?  ?Þ¦:ïé<¦èÐºL{?M`C>        k?          ?  ¿ ©ï;q¼¦èÐ:L{?M`C>                      ?  ¿ ©ï;q¼¦èÐºL{?M`C>                      ?  ¿Þ¦:ïé<¦èÐ:L{?M`C>        k?          ?  ¿%"<.¼:¦èÐº          ¿        m@¿^½(?      ?øãõºû¥=¦èÐº          ¿c?  ?s?¿,Û)?      ?M;°²<¦èÐº          ¿      ?æ¹¾n?      ?F;Mé;¦èÐº          ¿c?    A¿Ò(?      ?%"<.¼:¦èÐ:          ?        m@¿^½(?      ¿øãõºû¥=¦èÐ:          ?c?  ?s?¿,Û)?      ¿F;Mé;¦èÐ:          ?c?    A¿Ò(?      ¿M;°²<¦èÐ:          ?      ?æ¹¾n?      ¿%"<.¼:¦èÐ:Ñ(¿A¿                      ?  ¿F;Mé;¦èÐºÑ(¿A¿    c?              ?  ¿%"<.¼:¦èÐºÑ(¿A¿                      ?  ¿F;Mé;¦èÐ:Ñ(¿A¿    c?              ?  ¿F;Mé;¦èÐ:/{¿H¾    c?              ?  ?øãõºû¥=¦èÐº/{¿H¾    c?  ?          ?  ?F;Mé;¦èÐº/{¿H¾    c?              ?  ?øãõºû¥=¦èÐ:/{¿H¾    c?  ?          ?  ?øãõºû¥=¦èÐ:n?æ¹>    c?  ?          ?  ¿M;°²<¦èÐºn?æ¹>          ?          ?  ¿øãõºû¥=¦èÐºn?æ¹>    c?  ?          ?  ¿M;°²<¦èÐ:n?æ¹>          ?          ?  ¿%"<.¼:¦èÐº=)o? ¶>                      ?  ¿%"<.¼:¦èÐ:=)o? ¶>                      ?  ¿B}(¼µÈÆ;xñé!          ?        zR@?Kö(¿      ¿áÉ:yÈ¼M          ?c?  ?ÿ>?u*¿      ¿Y|_»{¬ª8û£x           ?c?    A?Ñ(¿      ¿qý»i¼ãAø           ?      ?Ê»>ÿLn¿      ¿rý»i¼ãAø           ?      ?Ê»>þLn¿      ¿ ©ï;q¼}=Ö           ¿        Á]¿mÐÿ>      ?}Á÷»tr³<}=Ö           ¿  ?k?`FZ¿ßÂ?      ?Þ¦:ïé<}=Ö           ¿    k?þ©X¿äZ?      ? LÈº« ¼}=Ö           ¿  ?    Þ(_¿xâú>      ?B}(¼µÈÆ;^ç!          ¿        zR@?Kö(¿      ?áÉ:yÈ¼áwÄ          ¿c?  ?ÿ>?u*¿      ?rý»i¼%ÿ !          ¿      ?Ê»>þLn¿      ?Y|_»{¬ª8d           ¿c?    A?Ñ(¿      ? ©ï;q¼}=Ö           ?        Á]¿mÐÿ>      ¿}Á÷»tr³<}=Ö           ?  ?k?`FZ¿ßÂ?      ¿ LÈº« ¼}=Ö           ?  ?    Þ(_¿xâú>      ¿Þ¦:ïé<}=Ö           ?    k?þ©X¿äZ?      ¿B}(¼µÈÆ;^ç!          ?          ?          ?qý»i¼ãAø           ?      ?  ?          ?B}(¼µÈÆ;xñé!          ?          ?          ?rý»i¼%ÿ !          ?      ?  ?          ?rý»i¼%ÿ !      ?          ?  ?          ¿áÉ:yÈ¼M      ?    c?  ?  ?          ¿qý»i¼ãAø       ?          ?  ?          ¿áÉ:yÈ¼áwÄ      ?    c?  ?  ?          ¿Y|_»{¬ª8û£x       ?    c?      ?          ¿Y|_»{¬ª8d       ?    c?      ?          ¿B}(¼µÈÆ;xñé!      ?              ?          ¿B}(¼µÈÆ;^ç!      ?              ?          ¿rý»i¼ãAø       ?          ?  ?          ¿%"<.¼:}=Ö           ?        m@¿^½(?      ¿øãõºû¥=}=Ö           ?c?  ?s?¿,Û)?      ¿F;Mé;}=Ö           ?c?    A¿Ò(?      ¿M;°²<}=Ö           ?      ?æ¹¾n?      ¿B}(¼µÈÆ;xñé!          ¿        zR@?Kö(¿      ?áÉ:yÈ¼M          ¿c?  ?ÿ>?u*¿      ?rý»i¼ãAø           ¿      ?Ê»>þLn¿      ?Y|_»{¬ª8û£x           ¿c?    A?Ñ(¿      ?%"<.¼:}=Ö           ¿        m@¿^½(?      ?øãõºû¥=}=Ö           ¿c?  ?s?¿,Û)?      ?M;°²<}=Ö           ¿      ?æ¹¾n?      ?F;Mé;}=Ö           ¿c?    A¿Ò(?      ?B}(¼µÈÆ;^ç!          ?        zR@?Kö(¿      ¿áÉ:yÈ¼áwÄ          ?c?  ?ÿ>?u*¿      ¿Y|_»{¬ª8d           ?c?    A?Ñ(¿      ¿rý»i¼%ÿ !          ?      ?Ê»>þLn¿      ¿B}(¼µÈÆ;oº          ?        zR@?Kö(¿      ¿áÉ:yÈ¼oº          ?c?  ?ÿ>?u*¿      ¿Y|_»{¬ª8oº          ?c?    A?Ñ(¿      ¿rý»i¼oº          ?      ?Ê»>þLn¿      ¿ ©ï;q¼o:          ¿        Á]¿mÐÿ>      ?}Á÷»tr³<o:          ¿  ?k?`FZ¿ßÂ?      ?Þ¦:ïé<o:          ¿    k?þ©X¿äZ?      ? LÈº« ¼o:          ¿  ?    Þ(_¿xâú>      ?B}(¼µÈÆ;o:          ¿        zR@?Kö(¿      ?áÉ:yÈ¼o:          ¿c?  ?ÿ>?u*¿      ?rý»i¼o:          ¿      ?Ê»>þLn¿      ?Y|_»{¬ª8o:          ¿c?    A?Ñ(¿      ? ©ï;q¼oº          ?        Á]¿mÐÿ>      ¿}Á÷»tr³<oº          ?  ?k?`FZ¿ßÂ?      ¿ LÈº« ¼oº          ?  ?    Þ(_¿xâú>      ¿Þ¦:ïé<oº          ?    k?þ©X¿äZ?      ¿B}(¼µÈÆ;o:=)o? ¶>                      ?  ¿rý»i¼oº=)o? ¶>          ?          ?  ¿B}(¼µÈÆ;oº=)o? ¶>                      ?  ¿rý»i¼o:=)o? ¶>          ?          ?  ¿áÉ:yÈ¼oºþLn?Ë»>    c?  ?          ?  ¿áÉ:yÈ¼o:þLn?Ë»>    c?  ?          ?  ¿áÉ:yÈ¼o:Lóz¿ÝaJ¾    c?  ?          ?  ?Y|_»{¬ª8oºLóz¿ÝaJ¾    c?              ?  ?áÉ:yÈ¼oºLóz¿ÝaJ¾    c?  ?          ?  ?Y|_»{¬ª8o:Lóz¿ÝaJ¾    c?              ?  ?Y|_»{¬ª8o:Ñ(¿A¿    c?              ?  ¿B}(¼µÈÆ;oºÑ(¿A¿                      ?  ¿Y|_»{¬ª8oºÑ(¿A¿    c?              ?  ¿B}(¼µÈÆ;o:Ñ(¿A¿                      ?  ¿ ©ï;q¼oºwâú>Þ(_?                      ?  ? LÈº« ¼o:wâú>Þ(_?      ?              ?  ? ©ï;q¼o:wâú>Þ(_?                      ?  ? LÈº« ¼oºwâú>Þ(_?      ?              ?  ? LÈº« ¼oºúz{?1?>      ?              ?  ¿}Á÷»tr³<o:úz{?1?>      ?k?          ?  ¿ LÈº« ¼o:úz{?1?>      ?              ?  ¿}Á÷»tr³<oºúz{?1?>      ?k?          ?  ¿}Á÷»tr³<oºâZ¿ÿ©X¿      ?k?          ?  ¿Þ¦:ïé<o:âZ¿ÿ©X¿        k?          ?  ¿}Á÷»tr³<o:âZ¿ÿ©X¿      ?k?          ?  ¿Þ¦:ïé<oºâZ¿ÿ©X¿        k?          ?  ¿Þ¦:ïé<oºL{¿M`C¾        k?          ?  ? ©ï;q¼o:L{¿M`C¾                      ?  ?Þ¦:ïé<o:L{¿M`C¾        k?          ?  ? ©ï;q¼oºL{¿M`C¾                      ?  ?%"<.¼:oº          ?        m@¿^½(?      ¿øãõºû¥=oº          ?c?  ?s?¿,Û)?      ¿F;Mé;oº          ?c?    A¿Ò(?      ¿M;°²<oº          ?      ?æ¹¾n?      ¿%"<.¼:o:          ¿        m@¿^½(?      ?øãõºû¥=o:          ¿c?  ?s?¿,Û)?      ?M;°²<o:          ¿      ?æ¹¾n?      ?F;Mé;o:          ¿c?    A¿Ò(?      ?%"<.¼:o:Ñ(?A?                      ?  ?F;Mé;oºÑ(?A?    c?              ?  ?F;Mé;o:Ñ(?A?    c?              ?  ?%"<.¼:oºÑ(?A?                      ?  ?F;Mé;o:/{?H>    c?              ?  ¿øãõºû¥=oº/{?H>    c?  ?          ?  ¿øãõºû¥=o:/{?H>    c?  ?          ?  ¿F;Mé;oº/{?H>    c?              ?  ¿øãõºû¥=o:n¿æ¹¾    c?  ?          ?  ?M;°²<oºn¿æ¹¾          ?          ?  ?M;°²<o:n¿æ¹¾          ?          ?  ?øãõºû¥=oºn¿æ¹¾    c?  ?          ?  ?%"<.¼:oº=)o¿ ¶¾                      ?  ?%"<.¼:o:=)o¿ ¶¾                      ?  ?B}(¼µÈÆ;b´!          ¿        zR@?Kö(¿      ?áÉ:yÈ¼äj[           ¿c?  ?ÿ>?u*¿      ?rý»i¼¢!          ¿      ?Ê»>þLn¿      ?Y|_»{¬ª8ÇjÔ           ¿c?    A?Ñ(¿      ? ©ï;q¼              ?        Á]¿mÐÿ>      ¿}Á÷»tr³<              ?  ?k?`FZ¿ßÂ?      ¿ LÈº« ¼              ?  ?    Þ(_¿xâú>      ¿Þ¦:ïé<              ?    k?þ©X¿äZ?      ¿B}(¼µÈÆ;'Û²!          ?        zR@?Kö(¿      ¿áÉ:yÈ¼^3O           ?c?  ?ÿ>?u*¿      ¿Y|_»{¬ª8Ú           ?c?    A?Ò(¿      ¿rý»i¼$!          ?      ?Ê»>þLn¿      ¿A}(¼µÈÆ;'Û²!          ?        yR@?Lö(¿      ¿qý»i¼$!          ?      ?Ê»>ÿLn¿      ¿ ©ï;q¼              ¿        Á]¿mÐÿ>      ?}Á÷»tr³<              ¿  ?k?`FZ¿ßÂ?      ?Þ¦:ïé<              ¿    k?þ©X¿äZ?      ? LÈº« ¼              ¿  ?    Þ(_¿xâú>      ?|Á÷»tr³<              ¿  ?k?`FZ¿ßÂ?      ?LÈº« ¼              ¿  ?    Þ(_¿xâú>      ?B}(¼µÈÆ;'Û²!      ?              ?          ¿rý»i¼¢!      ?          ?  ?          ¿rý»i¼$!      ?          ?  ?          ¿B}(¼µÈÆ;b´!      ?              ?          ¿áÉ:yÈ¼äj[       ?    c?  ?  ?          ¿áÉ:yÈ¼^3O       ?    c?  ?  ?          ¿Y|_»{¬ª8ÇjÔ       ?    c?      ?          ¿Y|_»{¬ª8Ú       ?    c?      ?          ¿qý»i¼$!      ?          ?  ?          ¿%"<.¼:              ¿        m@¿^½(?      ?øãõºû¥=              ¿c?  ?s?¿,Û)?      ?M;°²<              ¿      ?æ¹¾n?      ?F;Mé;              ¿c?    A¿Ò(?      ?%"<.¼:              ¿        l@¿_½(?      ?ùãõºû¥=              ¿c?  ?r?¿-Û)?      ?F;Mé;              ¿c?    A¿Ó(?      ?B}(¼µÈÆ;b´!          ?        zR@?Kö(¿      ¿áÉ:yÈ¼äj[           ?c?  ?ÿ>?u*¿      ¿Y|_»{¬ª8ÇjÔ           ?c?    A?Ñ(¿      ¿rý»i¼¢!          ?      ?Ê»>þLn¿      ¿%"<.¼:              ?        m@¿^½(?      ¿øãõºû¥=              ?c?  ?s?¿,Û)?      ¿F;Mé;              ?c?    A¿Ò(?      ¿M;°²<              ?      ?æ¹¾n?      ¿B}(¼µÈÆ;'Û²!          ¿        zR@?Kö(¿      ?áÉ:yÈ¼^3O           ¿c?  ?ÿ>?u*¿      ?rý»i¼$!          ¿      ?Ê»>þLn¿      ?Y|_»{¬ª8Ú           ¿c?    A?Ò(¿      ?%"<.¼:          ?              ?          ¿F;Mé;          ?    c?      ?          ¿F;Mé;          ?    c?      ?          ¿%"<.¼:          ?              ?          ¿M;°²<          ?          ?  ?          ¿ùãõºû¥=          ?    c?  ?  ?          ¿øãõºû¥=          ?    c?  ?  ?          ¿F;Mé;              ¿c?      ?          ¿øãõºû¥=              ¿c?  ?  ?          ¿ùãõºû¥=              ¿c?  ?  ?          ¿F;Mé;              ¿c?      ?          ¿A}(¼µÈÆ;'Û²!          ?          ?          ?rý»i¼¢!          ?      ?  ?          ?qý»i¼$!          ?      ?  ?          ?B}(¼µÈÆ;b´!          ?          ?          ?Y|_»{¬ª8Ú           ¿c?      ?          ¿B}(¼µÈÆ;b´!          ¿          ?          ¿A}(¼µÈÆ;'Û²!          ¿          ?          ¿Y|_»{¬ª8ÇjÔ           ¿c?      ?          ¿ ©ï;q¼          ?              ?          ¿ LÈº« ¼          ?      ?      ?          ¿LÈº« ¼          ?      ?      ?          ¿LÈº« ¼              ¿  ?      ?          ¿}Á÷»tr³<              ¿  ?k?  ?          ¿|Á÷»tr³<              ¿  ?k?  ?          ¿ LÈº« ¼              ¿  ?      ?          ¿Þ¦:ïé<          ?        k?  ?          ¿                                                                                                                                                                             K¹ÐIk;    *Q%<¼âå<¦èÐ:	   	   Icosphere          ,            Óû¼½    ¼1½ØÓ=>Æ¨=                                 X                 	 
   	                                 ! "   # ! $ % & $ ' % ( ) * ( + ) , - . , / - 0 1 2 0 3 1 4 5 6 4 7 5 8 9 : 8 ; 9 < = > < ? = @ A B @ C A D E F D G E H I J H K I L M N L O M P Q R P S Q T U V T W U X Y Z X [ Y \ ] ^ \ _ ] ` a b ` c a d e f d g e h i j h k i l m n l o m p q r p s q t u v t w u x y z x { y | { x | } { ~ } | ~  }   ~                                                                                    ¡ ¢ £ ¡   £ ¤ ¡ ¥ ¤ £ ¥ ¦ ¤ § ¦ ¥ § ¨ ¦ © ¨ § © ª ¨ « ª © « ¬ ª ­ ¬ « ­ ® ¬ ¯ ® ­ ° ® ¯ ° ¯ ± ° ± ² ² ± ³ ² ³ ´ ´ ³ µ ´ µ ¶ ¶ µ · ¶ · ¸ ¸ · ¹ ¸ ¹ º º ¹ » º » ¼ ¼ » ½ ¼ ½ ¾ ¾ ½ ¿ À Á Â À Ã Á Ä Å Æ Ä Ç Å È É Ê È Ë É Ì Í Î Ì Ï Í Ð Ñ Ò Ð Ó Ñ Ô Õ Ö Ô × Õ Ø Ù Ú Ø Û Ù Ü Ý Þ Ü ß Ý à á â à ã á ä å æ ä ç å è é ê è ë é ì í î ì ï í ð ñ ò ð ó ñ ô õ ö ô ÷ õ ø ù ú ø û ù ü ý þ ü ÿ ý   	
	 !" #!$%&$'%()*(+),-.,/-01203145647589:8;9<;8<=;>=<>?=@?>@A?BA@BCADCBDECFEDFGEHGFHIGJIHJKIJLKKLMMLNMNOONPOPQQPRQRSSRTSTUUTVUVWXYZX[Y\]^\_]`abca`cdaedcefdgfeghfihgijhkjikljmlkmnlonmpnopoqpqrrqsrsttsutuvvuwvwxxwyxyzzy{z{||{}|}~~} ¡¢ £¡¤¥¦¤§¥¨©ª¨«©¬­®¬¯­°±²°³±´µ¶´·µ¸¹º¸»¹¼½¾¼¿½ÀÁÂÀÃÁÄÅÆÄÇÅÈÉÊÈËÉÌÍÎÌÏÍÐÑÒÐÓÑÔÕÖ×ØÙÚÛÜÚÝÛÞßàÞáßâãäâåãæçèæéçêëìêíëîïðñòóôõöô÷õøùúøûùüýþÿ 	
 !"#$%&'()*+,-./0123456789:8;9<=><?=@AB@CADEFDGEHIJHKILMNLOMPQRPSQTUVWXYWZX[\]^_`abcdefdgehijhkilmnopqrporsprotuvwuxvyz{y|z}~ ¡¢£¤¢¥£¦§¨¦©§ª«¬ª­«®¯°®±¯²³´²µ³¶·¸¶¹·º»¼º½»¾¿À¾Á¿ÂÃÄÂÅÃÆÇÈÆÉÇÊËÌÊÍËÎÏÐÎÑÏÒÓÔÒÕÓÖ×ØÖÙ×ÚÛÜÚÝÛÞßàÞáßâãäâåãæçèæéçêëìêíëîïðîñïòóôòõóö÷øùúûùüúýþÿý þ	
	 !"#$"%#&'(&)'*+,*-+./0.1/234253678697:;<:=;>?@>A?BCDBECFGHFIGJKLJMKNOPNQORSTRUSVWXVYWZ[\Z][^_`^a_bcdbecfghijklmnopqrstuvwxyz{|}~ ¡¢£¤¥¦§¨©ª¨«©¬­®¬¯­°±²°³±´µ¶´·µ¸¹º¸»¹¼½¾¼¿½ÀÁÂÃÄÅÆÄÃÆÃÇÈÉÊÈËÉÌÍÎÌÏÍÐÑÒÐÓÑÔÕÖÔ×ÕØÙÚØÛÙÜÝÞÜßÝàáâãäåæäãçäæèéêèëéìíîìïíðñòðóñôõöô÷õøùúøûùüýþüÿý  	
	 !" #!$%&$'%()*(+),-.,/-01203145647589:8;9<=><?=@ABCDECFDGHIJKLJMKNOPNQORSTRUSVWXVYWZ[\]^_`abcdefghijklmnlompqrpsqtuvwxyz{|}~    +                             +       0                                       Ü  ~Û½«Ä<ÊF?½8?¾V:?%×Õ>%?`±v?\Ç¿ê/?ã¾  ¿-¾KÄ<Ü½#ê¾hÂ6?ÊÁ¿33?Bx?¥(¿¼),¿ ®¬¾  ¿{Ò¾°Ä<ÅåÛ½8¿¾V:?%×Õ¾­l3?`±v?^Ç¿ê/¿ã¾  ¿â^½KÄ<B@½\!?dÂ6?
.> %?Bx?Î×ý¾ë),?/ª¿  ¿â^½KÄ<B@½\!?dÂ6?
.>~©?CV{?Í×ý¾ë),?/ª¿  ¿DX¾f\Ã<$Ý½^¿¾!(,?z#¿4?8}?c³<¿¡,"¿gêp¾  ¿-¾KÄ<Ü½#ê¾hÂ6?ÊÁ¿?CV{?¥(¿½),¿§®¬¾  ¿ç½f\Ã<DÃA½N¦6?-(,?zI>É?8}?y»Õ¾à,"?Ç&¿  ¿ç½f\Ã<DÃA½N¦6?-(,?zI>;>v?z»Õ¾á,"?Ç&¿  ¿!¾ÎØÁ<Ê³Ý½-N¾6ð?²=¿2²>bõw?Þ/O¿ó¿B¦¾  ¿DX¾f\Ã<$Ý½^¿¾!(,?z#¿bó±>v?c³<¿¡,"¿iêp¾  ¿¥x½ÎØÁ<ÐâB½EFJ?½ï?:Æ=h[>bõw?ûÂ°¾ýò?Ù>¿  ¿¥x½ÎØÁ<ÐâB½EFJ?½ï?:Æ=xÐh??§`>üÂ°¾þò?Ù>¿  ¿©ð¾3Ï¿<Ï1Þ½Òk¾)Ã?ÜkS¿£[w?.h>c_¿è>ø¾øq½  ¿!¾ÎØÁ<Ê³Ý½-N¾6ð?²=¿<w??§`>Þ/O¿ó¿@¦¾  ¿Û½.Ï¿<ÙÞC½Øy[?OÂ?·<ðh?.h>tY¾=ø>òS¿  ¿Û½.Ï¿<ÙÞC½Øy[?OÂ?·<)8?6\|?tY¾=ø>òS¿  ¿òÈ¾S½<;Þ½Z3¾í
Ï>@Íe¿C G?>~?õ¯l¿ñ	Ã¾<  ¿©ð¾3Ï¿<Ï1Þ½Òk¾)Ã?ÜkS¿½ G?6\|?c_¿ç>ø¾ïq½  ¿mÈ½S½<²­D½ni?
Ï>¾#½¯´8?>~?e|k¾Ã>ÆAe¿  ¿mÈ½S½<²­D½ni?
Ï>¾#½%?:y?e|k¾Ã>ÆAe¿  ¿o«¾u~º<æÞ½Áa	¾Ñ>us¿33?T{?av¿¥W¾EÂq=  ¿òÈ¾S½<;Þ½Z3¾í
Ï>@Íe¿­l3?:y?õ¯l¿ð	Ã¾¨<  ¿h½p~º<eGE½kt?j>YÒì½ %?T{?ÝöC¾òZ>8r¿  ¿h½p~º<eGE½kt?j>YÒì½/º>dw?ÝöC¾óZ>8r¿  ¿C¾§k·<fß½#ß½Hb>ôÝ{¿×>ØEy?Ü¦|¿·ô¾N¸=  ¿o«¾u~º<æÞ½Áa	¾Ñ>us¿W]×>dw?av¿¤W¾GÂq=  ¿i½¡k·<
¦E½äz?Cb>\¾]Åº>ØEy?¤+¾uõ>rz¿  ¿i½¡k·<
¦E½äz?Cb>\¾3j?éz?¤+¾jõ>sz¿  ¿ ¾]9´<a%ß½²Í½    ´~¿My?Ì{|?´~¿Ê%4²Í=  ¿C¾§k·<fß½#ß½Hb>ôÝ{¿Çôx?éz?Ü¦|¿µô¾N¸=  ¿É\½]9´<ýÅE½¸|?    ¤j#¾¹¨j?Ì{|?§j#¾    ¸|¿  ¿É\½]9´<ýÅE½¸|?    ¤j#¾om>v?§j#¾    ¸|¿  ¿C¾±<fß½?#ß½j¾¬Ý{¿¼Í>bõw?«¦|¿Ùû>J¸=  ¿ ¾]9´<a%ß½²Í½    ´~¿°>v?´~¿    ²Í=  ¿i½±<
¦E½z?j¾1¾)ím>bõw?ñ¥+¾ü¾z¿  ¿i½±<
¦E½z?j¾1¾JÎÙ>lA{?ð¥+¾|ü¾ z¿  ¿o«¾Jô­<æÞ½Áa	¾Ñ¾us¿äö>O#}?av¿¨W>>Âq=  ¿C¾±<fß½?#ß½j¾¬Ý{¿r¥ö>lA{?«¦|¿Øû>J¸=  ¿h½Eô­<eGE½kt?j¾YÒì½xÚ>O#}?ÙöC¾êZ¾:r¿  ¿h½Eô­<eGE½kt?j¾YÒì½;>x?ÛöC¾íZ¾9r¿  ¿òÈ¾"«<;Þ½Z3¾í
Ï¾@Íe¿2²>t~z?ô¯l¿õ	Ã>S<  ¿o«¾Jô­<æÞ½Áa	¾Ñ¾us¿bó±>x?`v¿¬W>4Âq=  ¿mÈ½"«<²­D½ni?
Ï¾¾#½h[>t~z?b|k¾Ã¾ÇAe¿  ¿mÈ½"«<²­D½ni?
Ï¾¾#½öïz;`{?_|k¾Ã¾ÈAe¿  ¿©ð¾£¨<Ï1Þ½Òk¾)Ã¿ÜkS¿¦ax=Cä|?c_¿è>ø>øq½  ¿òÈ¾"«<;Þ½Z3¾í
Ï¾@Íe¿<hv=`{?õ¯l¿ó	Ã>v<  ¿Û½£¨<ÙÞC½Øy[?OÂ¿·<JC;Cä|?qY¾=ø¾òS¿  ¿Û½£¨<ÙÞC½Øy[?OÂ¿·<)8?ß7r?qY¾=ø¾òS¿  ¿!¾ó¦<Ê³Ý½-N¾6ð¿²=¿C G?±t?Ý/O¿ó?E¦¾  ¿©ð¾£¨<Ï1Þ½Òk¾)Ã¿ÜkS¿½ G?ß7r?c_¿ë>ø>q½  ¿¥x½í¦<ÐâB½EFJ?½ï¿:Æ=¯´8?±t?úÂ°¾ýò¿Ù>¿  ¿¥x½í¦<ÐâB½EFJ?½ï¿:Æ=)8?Jw?ùÂ°¾üò¿Ù>¿  ¿DX¾Y¥<$Ý½^¿¾!(,¿z#¿C G?å+y?c³<¿¡,"?jêp¾  ¿!¾ó¦<Ê³Ý½-N¾6ð¿²=¿½ G?Jw?Þ/O¿ó?D¦¾  ¿ç½T¥<DÃA½N¦6?-(,¿zI>¯´8?å+y?x»Õ¾à,"¿Ç&¿  ¿ç½T¥<DÃA½N¦6?-(,¿zI>om>³%{?y»Õ¾á,"¿Ç&¿  ¿-¾§'¤<Ü½#ê¾hÂ6¿ÊÁ¿¼Í>}?¥(¿½),?¨®¬¾  ¿DX¾Y¥<$Ý½^¿¾!(,¿z#¿°>³%{?b³<¿¡,"?lêp¾  ¿â^½§'¤<B@½\!?dÂ6¿
.>lím>}?Î×ý¾ë),¿/ª¿  ¿â^½§'¤<B@½\!?dÂ6¿
.>3j?Æu?Ó×ý¾ì),¿+ª¿  ¿{Ò¾×£<ÅåÛ½8¿¾V:¿%×Õ¾My?iw?\Ç¿ê/?ã¾  ¿-¾§'¤<Ü½#ê¾hÂ6¿ÊÁ¿Çôx?Æu?¥(¿½),?§®¬¾  ¿~Û½×£<ÊF?½8?¾V:¿%×Õ>¹¨j?iw?^Ç¿ê/¿ã¾  ¿~Û½×£<ÊF?½8?¾V:¿%×Õ>öïz;=ðu?^Ç¿ê/¿ã¾  ¿É¾§'¤<CÛ½\!¿dÂ6¿
.¾¦ax=Òw?Ó×ý¾ì),?+ª¿  ¿{Ò¾×£<ÅåÛ½8¿¾V:¿%×Õ¾<hv==ðu?^Ç¿ê/?ã¾  ¿X½§'¤<O>½#ê>hÂ6¿ÊÁ?JC;Òw?¥(¿¼),¿¢®¬¾  ¿X½§'¤<O>½#ê>hÂ6¿ÊÁ?Ð_È=7Þu?¥(¿½),¿¤®¬¾  ¿±L¾Y¥<§Ú½N¦6¿-(,¿zI¾\>	Àw?}»Õ¾â,"?Ç&¿  ¿É¾§'¤<CÛ½\!¿dÂ6¿
.¾7Þ>7Þu?Ò×ý¾ì),?,ª¿  ¿êÏ½T¥<NÊ<½^¿>!(,¿z#?\É=	Àw?d³<¿ ,"¿aêp¾  ¿êÏ½T¥<NÊ<½^¿>!(,¿z#?ÿU?¬y?d³<¿ ,"¿bêp¾  ¿ç¾ó¦<ÂÚ½EFJ¿½ï¿:Æ½!d?s{?ýÂ°¾þò?Ù>¿  ¿±L¾Y¥<§Ú½N¦6¿-(,¿zI¾d?¬y?|»Õ¾á,"?Ç&¿  ¿W>½í¦<Áª;½-N>6ð¿²=?µU?s{?ß/O¿ó¿;¦¾  ¿W>½í¦<Áª;½-N>6ð¿²=?JÎÙ>&¦s?à/O¿ó¿9¦¾  ¿L´¾£¨<½Ù½÷x[¿ÈÃ¿¼äö>ùu?A\¾p>ø>]ñS¿  ¿ç¾ó¦<ÂÚ½EFJ¿½ï¿:Æ½r¥ö>&¦s?ýÂ°¾þò?Ù>¿  ¿!½£¨<¸®:½Òk>)Ã¿ÜkS?xÚ>ùu?c_¿ä>ø¾ßq½  ¿!½£¨<¸®:½Òk>)Ã¿ÜkS?/º>:v|?c_¿è>ø¾øq½  ¿Ü¾"«<R2Ù½ni¿
Ï¾¾#=×>X~?f|k¾Ã>ÆAe¿  ¿L´¾£¨<½Ù½÷x[¿ÈÃ¿¼W]×>:v|?A\¾p>ø>]ñS¿  ¿î½"«<àß9½Z3>í
Ï¾@Íe?]Åº>X~?õ¯l¿ó	Ã¾v<  ¿î½"«<àß9½Z3>í
Ï¾@Íe?õôE?ML?õ¯l¿ò	Ã¾<  ¿ù¾Jô­<yåØ½kt¿j¾YÒì=T?.	?ÛöC¾íZ>9r¿  ¿Ü¾"«<R2Ù½ni¿
Ï¾¾#=`T?ML?b|k¾Ã>ÇAe¿  ¿)½Eô­<-F9½Áa	>Ñ¾us?{F?.	?av¿¦W¾BÂq=  ¿)½Eô­<-F9½Áa	>Ñ¾us?JÎÙ>Z¸x?av¿¦W¾DÂq=  ¿²¾±<&¶Ø½z¿j¾1>äö>,z?ñ¥+¾ü>z¿  ¿ù¾Jô­<yåØ½kt¿j¾YÒì=r¥ö>Z¸x?ÜöC¾ðZ>9r¿  ¿íM½±<ç8½?#ß=j¾¬Ý{?xÚ>,z?«¦|¿Ñû¾J¸=  ¿íM½±<ç8½?#ß=j¾¬Ý{?~©?!Íx?«¦|¿Ðû¾J¸=  ¿Õ¾b9´<+¦Ø½¸|¿    ¤j#>4?¯z?§j#¾öì	4¸|¿  ¿²¾±<&¶Ø½z¿j¾1>?!Íx?ñ¥+¾ü>z¿  ¿3Z½]9´<Ç8½²Í=    ´~?É?¯z?´~¿Mì	4²Í=  ¿3Z½]9´<Ç8½²Í=    ´~?-#%>(v?´~¿Dp%4²Í=  ¿²¾§k·<&¶Ø½z¿j>1>O_>úñw?ð¥+¾{ü¾ z¿  ¿Õ¾b9´<+¦Ø½¸|¿    ¤j#>|Ñ^>(v?§j#¾÷ì	4¸|¿  ¿íM½¡k·<ç8½?#ß=j>¬Ý{?E¡%>úñw?ª¦|¿ãû>J¸=  ¿íM½¡k·<ç8½?#ß=j>¬Ý{?Åk?*P?«¦|¿Øû>J¸=  ¿ù¾u~º<yåØ½kt¿j>YÒì=ÆPz?öR?ØöC¾éZ¾:r¿  ¿²¾§k·<&¶Ø½z¿j>1>/1z?*P?ï¥+¾yü¾ z¿  ¿)½u~º<-F9½i	>«>Ùts?2åk?öR?v¿Y>sÝq=  ¿)½u~º<-F9½i	>«>Ùts?i ;?}Ð»>v¿Y>fÝq=  ¿Ü¾S½<S2Ù½ni¿
Ï>¾#=I?!¿>b|k¾Ã¾ÇAe¿  ¿ù¾u~º<yåØ½kt¿j>YÒì=lI?}Ð»>ÛöC¾îZ¾9r¿  ¿î½S½<àß9½Z3>í
Ï>@Íe?ÿ;?!¿>ô¯l¿÷	Ã>.<  ¿î½S½<àß9½Z3>í
Ï>@Íe?;>³%{?ô¯l¿õ	Ã>T<  ¿L´¾3Ï¿<¾Ù½Øy[¿OÂ?·¼2²>}?qY¾=ø¾òS¿  ¿Ü¾S½<S2Ù½ni¿
Ï>¾#=bó±>³%{?_|k¾Ã¾ÈAe¿  ¿ ½.Ï¿<¸®:½Ók>°Á?µlS?h[>}?éc_¿>ø>Nìp½  ¿ ½.Ï¿<¸®:½Ók>°Á?µlS?om>x?éc_¿>ø>=ìp½  ¿ç¾ÓØÁ<ÂÚ½EFJ¿½ï?:Æ½¼Í>t~z?ûÂ°¾ýò¿Ù>¿  ¿L´¾3Ï¿<¾Ù½Øy[¿OÂ?·¼°>x?rY¾=ø¾òS¿  ¿V>½ÎØÁ<Äª;½-N>6ð?²=?)ím>t~z?ß/O¿ó?;¦¾  ¿V>½ÎØÁ<Äª;½-N>6ð?²=?.;l?Ê4?Ý/O¿ó?F¦¾  ¿°L¾k\Ã<§Ú½N¦6¿-(,?zI¾GÆz??}»Õ¾â,"¿Ç&¿  ¿ç¾ÓØÁ<ÂÚ½EFJ¿½ï?:Æ½Â¦z?Ê4?ýÂ°¾þò¿Ù>¿  ¿êÏ½f\Ã<NÊ<½^¿>!(,?z#?´Zl??b³<¿¡,"?lêp¾  ¿²¾§k·<&¶Ø½z¿j>1>y!å>/?¸>G5}?vS<  ?²¾±<&¶Ø½z¿j¾1>O;ä>¤ú.?-
¾C}?x_=  ?Õ¾b9´<+¦Ø½¸|¿    ¤j#>ä>ó.?²j;ï?µ<  ?ù¾Jô­<yåØ½kt¿j¾YÒì=ûÊã>t/?2¾¾ô¡u?ä=  ?ù¾u~º<yåØ½kt¿j>YÒì=Áå>!/?iW>}u?r^<  ?Ü¾"«<R2Ù½ni¿
Ï¾¾#=iUã>n1/?:rÌ¾èÏi?£=  ?Ü¾S½<S2Ù½ni¿
Ï>¾#=óYæ>aS/? 2Ð>íÃi?òé<  ?L´¾£¨<½Ù½÷x[¿ÈÃ¿¼6åâ>f/?½¬¿è[?U~i=  ?L´¾3Ï¿<¾Ù½Øy[¿OÂ?·¼Làæ>Õ/? D?&ÿZ?¹¼=  ?ç¾ó¦<ÂÚ½EFJ¿½ï¿:Æ½Aâ>C«/?Â¯¿Þ7K?Öc:  ?ç¾ÓØÁ<ÂÚ½EFJ¿½ï?:Æ½+Lç>æ/?EÍ?¯#K?vk>  ?±L¾Y¥<§Ú½N¦6¿-(,¿zI¾±2â>ý/?V+¿1¹<?â½½  ?°L¾k\Ã<§Ú½N¦6¿-(,?zI¾Fç>@0?¥ß?Z£<?kE>  ?É¾§'¤<CÛ½\!¿dÂ6¿
.¾@ûá>X0?õé.¿JY2?!ã_¾  ?É¾KÄ<CÛ½\!¿dÂ6?
.¾­½ç>I¡0??0J2?mNÎ>  ?{Ò¾×£<ÅåÛ½8¿¾V:¿%×Õ¾3ßá>Ë¹0?+ #¿½.?:¶¾  ?{Ò¾°Ä<ÅåÛ½8¿¾V:?%×Õ¾­½ç>É1?F>?¯.?©?  ?-¾§'¤<Ü½#ê¾hÂ6¿ÊÁ¿3ßá>L1?~á
¿øI2?\ð¾  ?-¾KÄ<Ü½#ê¾hÂ6?ÊÁ¿¡¡ç>
e1?I_Æ>Y2?x?  ?DX¾Y¥<$Ý½^¿¾!(,¿z#¿â>}1?3Ö¾#£<? É¿  ?DX¾f\Ã<$Ý½^¿¾!(,?z#¿/jç>À1?;<>¹<?¤k?  ?!¾ó¦<Ê³Ý½-N¾6ð¿²=¿×Pâ>×1?Y'¾<%K?9©¿  ?!¾ÎØÁ<Ê³Ý½-N¾6ð?²=¿ ç>Q2?< >L9K?óo?  ?©ð¾£¨<Ï1Þ½Òk¾)Ã¿ÜkS¿5·â>t)2?ÃM¾[?'Tô¾  ?©ð¾3Ï¿<Ï1Þ½Òk¾)Ã?ÜkS¿d¬æ>X2?§¢=Ç[?ØÝ?  ?òÈ¾"«<;Þ½Z3¾í
Ï¾@Íe¿8ã>m2?½¾dÌi?©Å¾  ?òÈ¾S½<;Þ½Z3¾í
Ï>@Íe¿1æ>?2?s»ê<ÔØi?"ÓÏ>  ?o«¾Jô­<æÞ½Áa	¾Ñ¾us¿£Ëã>ì 2?Í¨½¡u?sñ¾  ?o«¾u~º<æÞ½Áa	¾Ñ>us¿±å>5³2?»ôÊ¸u­u?ì>  ?C¾±<fß½?#ß½j¾¬Ý{¿fä>ð¾2?7¢W½Ñ:}?d;¾  ?C¾§k·<fß½#ß½Hb>ôÝ{¿ Eå> Å2?ò®|¼zH}?Có>  ? ¾]9´<a%ß½²Í½    ´~¿ùä>Í2?§2ª¼¶ñ?ær	;  ?{Ò¾°Ä<ÅåÛ½8¿¾V:?%×Õ¾O\>`[?]Ç¿ê/¿ã¾  ¿X½KÄ<O>½#ê>hÂ6?ÊÁ?Ð_È=}y}?¥(¿¼),?¡®¬¾  ¿~Û½«Ä<ÊF?½8?¾V:?%×Õ>\É=`[?^Ç¿ê/?ã¾  ¿É¾KÄ<CÛ½\!¿dÂ6?
.¾7Þ>}y}?Ð×ý¾ì),¿.ª¿  ¿êÏ½f\Ã<NÊ<½^¿>!(,?z#?)8?$Óy?c³<¿¡,"?eêp¾  ¿É¾KÄ<CÛ½\!¿dÂ6?
.¾C G?ö´{?Í×ý¾ë),¿/ª¿  ¿°L¾k\Ã<§Ú½N¦6¿-(,?zI¾½ G?$Óy?x»Õ¾à,"¿Ç&¿  ¿X½KÄ<O>½#ê>hÂ6?ÊÁ?¯´8?ö´{?¥(¿½),?¥®¬¾  ¿íM½±<ç8½?#ß=j¾¬Ý{?Qh=y-?ªi¼¢E}?[>  ¿íM½¡k·<ç8½?#ß=j>¬Ý{?$o=²-?¼[½X8}?æ¾  ¿3Z½]9´<Ç8½²Í=    ´~?ú~j=&r-?×ð°¼ð?ñä;  ¿)½Eô­<-F9½Áa	>Ñ¾us?£d=;-?- ºÒªu??þ>  ¿)½u~º<-F9½i	>«>Ùts?Zt=M-?v²ª½Âu?Ü¾  ¿î½"«<àß9½Z3>í
Ï¾@Íe?:`=§±-?6	Ö<ÿÐi?±Ð>  ¿î½S½<àß9½Z3>í
Ï>@Íe?®¸x=Ó-?
T¾Åi?AjÅ¾  ¿!½£¨<¸®:½Òk>)Ã¿ÜkS?¦]=¼æ-?è=m[?[ú?  ¿ ½.Ï¿<¸®:½Ók>°Á?µlS?yë|=.?Á?O¾±ÿZ?¹ô¾  ¿W>½í¦<Áª;½-N>6ð¿²=?ù÷Y=+.?Ø>º7K?±x?  ¿V>½ÎØÁ<Äª;½-N>6ð?²=?9%=Vf.?V¾#K?]¿  ¿êÏ½T¥<NÊ<½^¿>!(,¿z#?|{W=g}.?\>>%¹<?k?  ¿êÏ½f\Ã<NÊ<½^¿>!(,?z#?*R=èÀ.?Ö¾:£<?½É¿  ¿X½§'¤<O>½#ê>hÂ6¿ÊÁ?ð¿U=äØ.?8_Æ>Y2?~?  ¿X½KÄ<O>½#ê>hÂ6?ÊÁ?Èë=£!/?â
¿éI2?7ð¾  ¿~Û½×£<ÊF?½8?¾V:¿%×Õ>ßT=&:/?Ø=?£.?#?  ¿~Û½«Ä<ÊF?½8?¾V:?%×Õ>Èë=4/?{ #¿³.?¡9¶¾  ¿â^½§'¤<B@½\!?dÂ6¿
.>ßT=·/?*?$J2?OÎ>  ¿â^½KÄ<B@½\!?dÂ6?
.>{=då/?èé.¿LY2?¦ã_¾  ¿ç½T¥<DÃA½N¦6?-(,¿zI>ÇV=rý/?Yé?i¥<?$>  ¿ç½f\Ã<DÃA½N¦6?-(,?zI>Ð=ò@0?°O+¿4»<?Ò¾½  ¿¥x½í¦<ÐâB½EFJ?½ï¿:Æ=m<X=2Y0?`Ø?Ö'K?i>  ¿¥x½ÎØÁ<ÐâB½EFJ?½ï?:Æ=õd~=d0?\ª¿<K?õgS¹  ¿Û½£¨<ÙÞC½Øy[?OÂ¿·<B[=©0?bE?¼ [?8ß=  ¿Û½.Ï¿<ÙÞC½Øy[?OÂ?·<nP{=à×0?Ô«¿6[?úÕg=  ¿mÈ½"«<²­D½ni?
Ï¾¾#½ÚÆ_=%ë0?=.Ð>
Æi?ÒÉä<  ¿mÈ½S½<²­D½ni?
Ï>¾#½Ów=Ã1?qyÌ¾ØÑi?*]¢=  ¿h½Eô­<eGE½kt?j¾YÒì½ýld=.1?¢0>vu?Y®1<  ¿h½p~º<eGE½kt?j>YÒì½ Æs=21?ü¾|«u?(N=  ¿i½±<
¦E½z?j¾1¾üPi=§=1?>ÿ8}?V<  ¿i½¡k·<
¦E½äz?Cb>\¾dYp=D1?Í¼
¾ÁF}?7Y=  ¿É\½]9´<ýÅE½¸|?    ¤j#¾áñm=#L1?"Ë^;!ñ?E¬<  ¿~Û½×£¼ÊF?½8?¾V:?%×Õ>lÑº>p¾>[Ç¿ê/?ã¾  ¿-¾'¤¼Ü½#ê¾hÂ6?ÊÁ¿ç×>ß3Â>¥(¿¼),¿ ®¬¾  ¿{Ò¾×£¼ÅåÛ½8¿¾V:?%×Õ¾¨×>p¾>^Ç¿ê/¿ã¾  ¿ä^½'¤¼B@½\!?dÂ6?
.>w»>ß3Â>Ì×ý¾ë),?0ª¿  ¿ä^½'¤¼B@½\!?dÂ6?
.>;>Å®}?Ï×ý¾ë),?.ª¿  ¿EX¾J¥¼$Ý½^¿¾!(,?z#¿2²>¨?b³<¿¡,"¿jêp¾  ¿-¾'¤¼Ü½#ê¾hÂ6?ÊÁ¿bó±>Å®}?¥(¿½),¿©®¬¾  ¿ç½O¥¼DÃA½N¦6?-(,?zI>h[>¨?{»Õ¾á,"?Ç&¿  ¿ç½O¥¼DÃA½N¦6?-(,?zI>%?N(t?y»Õ¾à,"?Ç&¿  ¿!¾â¦¼Ê³Ý½-N¾6ð?²=¿33? 
v?ß/O¿ó¿=¦¾  ¿EX¾J¥¼$Ý½^¿¾!(,?z#¿­l3?N(t?d³<¿ ,"¿dêp¾  ¿¦x½â¦¼ÐâB½FJ?ï?Æ= %? 
v?áÁ°¾ô?Ø>¿  ¿¦x½â¦¼ÐâB½FJ?ï?Æ=øù> ·=àÁ°¾ô?Ø>¿  ¿©ð¾£¨¼Ï1Þ½Òk¾)Ã?ÜkS¿'?°Å®=c_¿é>ø¾ÿq½  ¿!¾â¦¼Ê³Ý½-N¾6ð?²=¿÷
? ·=Þ/O¿ó¿B¦¾  ¿Ü½£¨¼ÙÞC½÷x[?ÈÃ?<&Wù>°Å®=>\¾k>ø>_ñS¿  ¿Ü½£¨¼ÙÞC½÷x[?ÈÃ?<3j?Øx?>\¾k>ø>_ñS¿  ¿òÈ¾«¼;Þ½Z3¾í
Ï>@Íe¿My?ªòy?õ¯l¿õ	Ã¾[<  ¿©ð¾£¨¼Ï1Þ½Òk¾)Ã?ÜkS¿Çôx?Øx?c_¿ê>ø¾q½  ¿nÈ½«¼²­D½ni?
Ï>¾#½¹¨j?ªòy?a|k¾Ã>ÇAe¿  ¿nÈ½«¼²­D½ni?
Ï>¾#½öïz;}?c|k¾Ã>ÇAe¿  ¿p«¾9ô­¼æÞ½i	¾«>Ùts¿`x=Um?v¿Y¾pÝq=  ¿òÈ¾«¼;Þ½Z3¾í
Ï>@Íe¿<hv=}?õ¯l¿ô	Ã¾e<  ¿h½9ô­¼eGE½kt?j>YÒì½JC;Um?ÛöC¾ïZ>9r¿  ¿h½9ô­¼eGE½kt?j>YÒì½)8?ðÀt?ÛöC¾îZ>9r¿  ¿C¾±¼fß½?#ß½j>¬Ý{¿C G?Ó¢v?«¦|¿×û¾J¸=  ¿p«¾9ô­¼æÞ½i	¾«>Ùts¿½ G?ðÀt?v¿Y¾uÝq=  ¿i½±¼
¦E½z?j>1¾¯´8?Ó¢v?ñ¥+¾ü>z¿  ¿i½±¼
¦E½z?j>1¾b¾l?s-?ñ¥+¾ü>z¿  ¿ ¾S9´¼a%ß½²Í½    ´~¿I{?Eõ.?´~¿    ²Í=  ¿C¾±¼fß½?#ß½j>¬Ý{¿ö){?s-?«¦|¿Øû¾J¸=  ¿Ê\½S9´¼ ÆE½¸|?    ¤j#¾øÝl?Eõ.?§j#¾    ¸|¿  ¿Ê\½S9´¼ ÆE½¸|?    ¤j#¾/º>íy?§j#¾    ¸|¿  ¿C¾k·¼fß½?#ß½j¾¬Ý{¿×>ûÎ{?«¦|¿Øû>J¸=  ¿ ¾S9´¼a%ß½²Í½    ´~¿W]×>íy?´~¿    ²Í=  ¿i½k·¼
¦E½z?j¾1¾]Åº>ûÎ{?ñ¥+¾ü¾z¿  ¿i½k·¼
¦E½z?j¾1¾;>ns?ñ¥+¾ü¾z¿  ¿p«¾k~º¼æÞ½i	¾«¾Ùts¿2²>@lu?v¿Y>uÝq=  ¿C¾k·¼fß½?#ß½j¾¬Ý{¿bó±>ns?«¦|¿Øû>J¸=  ¿h½k~º¼eGE½kt?j¾YÒì½h[>@lu?ÛöC¾ïZ¾9r¿  ¿h½k~º¼eGE½kt?j¾YÒì½-#%>m«}?ÚöC¾íZ¾9r¿  ¿òÈ¾S½¼;Þ½Z3¾í
Ï¾@Íe¿O_>P?õ¯l¿ò	Ã><  ¿p«¾k~º¼æÞ½i	¾«¾Ùts¿|Ñ^>m«}?v¿Y>uÝq=  ¿nÈ½S½¼²­D½ni?
Ï¾¾#½E¡%>P?a|k¾Ã¾ÇAe¿  ¿nÈ½S½¼²­D½ni?
Ï¾¾#½-#%>9x?a|k¾Ã¾ÇAe¿  ¿©ð¾"Ï¿¼Ï1Þ½Òk¾)Ã¿ÜkS¿O_>{z?c_¿é>ø>ÿq½  ¿òÈ¾S½¼;Þ½Z3¾í
Ï¾@Íe¿|Ñ^>9x?õ¯l¿ô	Ã>e<  ¿Ü½"Ï¿¼ÙÞC½÷x[?ÈÃ¿<E¡%>{z?>\¾k>ø¾_ñS¿  ¿Ü½"Ï¿¼ÙÞC½÷x[?ÈÃ¿<Ë|>p¾>>\¾k>ø¾_ñS¿  ¿!¾ÂØÁ¼Ê³Ý½-N¾6ð¿²=¿>ß3Â>Þ/O¿ó?D¦¾  ¿©ð¾"Ï¿¼Ï1Þ½Òk¾)Ã¿ÜkS¿ß>p¾>c_¿ê>ø>q½  ¿¦x½ÂØÁ¼ÐâB½FJ?ï¿Æ=ã|>ß3Â>áÁ°¾ô¿Ø>¿  ¿¦x½ÂØÁ¼ÐâB½FJ?ï¿Æ=Ð_È=Igx?àÁ°¾ô¿Ø>¿  ¿EX¾U\Ã¼$Ý½^¿¾!(,¿z#¿\>,Iz?c³<¿¡,"?iêp¾  ¿!¾ÂØÁ¼Ê³Ý½-N¾6ð¿²=¿7Þ>Igx?Þ/O¿ó?B¦¾  ¿ç½[\Ã¼DÃA½N¦6?-(,¿zI>\É=,Iz?x»Õ¾à,"¿Ç&¿  ¿ç½[\Ã¼DÃA½N¦6?-(,¿zI>om>Å®}?v»Õ¾à,"¿Ç&¿  ¿-¾	KÄ¼Ü½#ê¾hÂ6¿ÊÁ¿¼Í>¨?¥(¿½),?§®¬¾  ¿EX¾U\Ã¼$Ý½^¿¾!(,¿z#¿°>Å®}?c³<¿¡,"?jêp¾  ¿ä^½KÄ¼B@½\!?dÂ6¿
.>lím>¨?Ë×ý¾ë),¿1ª¿  ¿ä^½KÄ¼B@½\!?dÂ6¿
.>f¾? ·=Ó×ý¾ì),¿+ª¿  ¿{Ò¾ Ä¼ÅåÛ½8¿¾V:¿%×Õ¾I?°Å®=[Ç¿ê/?ã¾  ¿-¾	KÄ¼Ü½#ê¾hÂ6¿ÊÁ¿ú)? ·=¥(¿¾),?«®¬¾  ¿~Û½ Ä¼ÊF?½8?¾V:¿%×Õ>ìÝ?°Å®=^Ç¿ê/¿ã¾  ¿~Û½ Ä¼ÊF?½8?¾V:¿%×Õ>(îø>CV{?]Ç¿ê/¿ã¾  ¿É¾	KÄ¼CÛ½\!¿dÂ6¿
.¾??8}?Ó×ý¾ì),?+ª¿  ¿{Ò¾ Ä¼ÅåÛ½8¿¾V:¿%×Õ¾¨â
?CV{?^Ç¿ê/?ã¾  ¿X½	KÄ¼O>½#ê>hÂ6¿ÊÁ?V-ù>8}?¥(¿½),¿¤®¬¾  ¿X½	KÄ¼O>½#ê>hÂ6¿ÊÁ?om>ns?¥(¿½),¿¤®¬¾  ¿±L¾U\Ã¼§Ú½N¦6¿-(,¿zI¾¼Í>@lu?{»Õ¾á,"?Ç&¿  ¿É¾	KÄ¼CÛ½\!¿dÂ6¿
.¾°>ns?Ð×ý¾ì),?-ª¿  ¿êÏ½[\Ã¼NÊ<½^¿>!(,¿z#?)ím>@lu?d³<¿ ,"¿aêp¾  ¿êÏ½[\Ã¼NÊ<½^¿>!(,¿z#?k?Ho?e³<¿ ,"¿_êp¾  ¿ç¾ÂØÁ¼ÂÚ½EFJ¿½ï¿:Æ½?y?+Q?þÂ°¾ÿò?Ù>¿  ¿±L¾U\Ã¼§Ú½N¦6¿-(,¿zI¾¨oy?Ho?|»Õ¾á,"?Ç&¿  ¿W>½ÂØÁ¼Äª;½-N>6ð¿²=?«#k?+Q?ß/O¿ó¿:¦¾  ¿W>½ÂØÁ¼Äª;½-N>6ð¿²=?%?Ã{?Þ/O¿ó¿@¦¾  ¿L´¾"Ï¿¼¾Ù½Øy[¿OÂ¿·¼33?v¥}?uY¾=ø>òS¿  ¿ç¾ÂØÁ¼ÂÚ½EFJ¿½ï¿:Æ½­l3?Ã{?þÂ°¾ÿò?Ù>¿  ¿!½"Ï¿¼¸®:½Ók>°Á¿µlS? %?v¥}?éc_¿>ø¾Gìp½  ¿!½"Ï¿¼¸®:½Ók>°Á¿µlS?öïz;Oyx?èc_¿>ø¾Vìp½  ¿Ü¾S½¼S2Ù½ni¿
Ï¾¾#=¦ax=![z?b|k¾Ã>ÇAe¿  ¿L´¾"Ï¿¼¾Ù½Øy[¿OÂ¿·¼<hv=Oyx?sY¾=ø>òS¿  ¿î½S½¼àß9½Z3>í
Ï¾@Íe?JC;![z?ô¯l¿õ	Ã¾P<  ¿î½S½¼àß9½Z3>í
Ï¾@Íe?JÎÙ>8/v?õ¯l¿ñ	Ã¾¢<  ¿ù¾f~º¼yåØ½kt¿j¾YÒì=äö>x?ÚöC¾ìZ>9r¿  ¿Ü¾S½¼S2Ù½ni¿
Ï¾¾#=r¥ö>8/v?`|k¾Ã>ÈAe¿  ¿)½k~º¼/F9½i	>«¾Ùts?xÚ>x?v¿Y¾{Ýq=  ¿)½k~º¼/F9½i	>«¾Ùts?(îø>!Íx?v¿Y¾uÝq=  ¿²¾k·¼&¶Ø½z¿j¾1>??¯z?ñ¥+¾ü>z¿  ¿ù¾f~º¼yåØ½kt¿j¾YÒì=¨â
?!Íx?ÜöC¾ñZ>9r¿  ¿íM½k·¼ç8½?#ß=j¾¬Ý{?V-ù>¯z?«¦|¿Øû¾J¸=  ¿íM½k·¼ç8½?#ß=j¾¬Ý{?Ð_È=kðz?«¦|¿Öû¾J¸=  ¿Ö¾S9´¼+¦Ø½¸|¿    ¤j#>\>=Ò|?§j#¾    ¸|¿  ¿²¾k·¼&¶Ø½z¿j¾1>7Þ>kðz?ñ¥+¾ü>z¿  ¿3Z½S9´¼Ç8½²Í=    ´~?\É==Ò|?´~¿    ²Í=  ¿3Z½S9´¼Ç8½²Í=    ´~?xÐh?Ëj>´~¿Ò	4²Í=  ¿²¾	±¼&¶Ø½z¿j>1>£[w?Sr>ñ¥+¾ü¾z¿  ¿Ö¾S9´¼+¦Ø½¸|¿    ¤j#><w?Ëj>§j#¾    ¸|¿  ¿íM½±¼ç8½?#ß=j>¬Ý{?ðh?Sr>«¦|¿àû>J¸=  ¿íM½±¼ç8½?#ß=j>¬Ý{?-#%>["{?«¦|¿Ùû>J¸=  ¿ù¾9ô­¼yåØ½kt¿j>YÒì=O_>.}?ÙöC¾ëZ¾:r¿  ¿²¾	±¼&¶Ø½z¿j>1>|Ñ^>["{?ð¥+¾|ü¾ z¿  ¿)½9ô­¼/F9½i	>«>Ùts?E¡%>.}?v¿Y>qÝq=  ¿)½9ô­¼/F9½i	>«>Ùts?l>p¾>v¿Y>fÝq=  ¿Ü¾«¼S2Ù½ni¿
Ï>¾#=í¹>ß3Â>b|k¾Ã¾ÇAe¿  ¿ù¾9ô­¼yåØ½kt¿j>YÒì=¿C¹>p¾>ÚöC¾íZ¾9r¿  ¿î½«¼àß9½Z3>í
Ï>@Íe?Å«>ß3Â>ô¯l¿÷	Ã>.<  ¿î½«¼àß9½Z3>í
Ï>@Íe?ÿU?Î|?õ¯l¿ô	Ã>c<  ¿L´¾}£¨¼¾Ù½÷x[¿ÈÃ?¼!d? ü}?=\¾i>ø¾`ñS¿  ¿Ü¾«¼S2Ù½ni¿
Ï>¾#=d?Î|?_|k¾Ã¾ÈAe¿  ¿!½£¨¼»®:½Òk>)Ã?ÜkS?µU? ü}?c_¿è>ø>ùq½  ¿!½£¨¼»®:½Òk>)Ã?ÜkS?-#%>s?c_¿è>ø>øq½  ¿ç¾â¦¼ÄÚ½EFJ¿½ï?:Æ½O_>èhu?üÂ°¾þò¿Ù>¿  ¿L´¾}£¨¼¾Ù½÷x[¿ÈÃ?¼|Ñ^>s??\¾l>ø¾_ñS¿  ¿W>½â¦¼Äª;½-N>6ð?²=?E¡%>èhu?Þ/O¿ó?@¦¾  ¿W>½â¦¼Äª;½-N>6ð?²=?3j?#}?ß/O¿ó?;¦¾  ¿±L¾J¥¼§Ú½N¦6¿-(,?zI¾My?Þ?z»Õ¾á,"¿Ç&¿  ¿ç¾â¦¼ÄÚ½EFJ¿½ï?:Æ½Çôx?#}?ûÂ°¾ýò¿Ù>¿  ¿êÏ½J¥¼PÊ<½^¿>!(,?z#?¹¨j?Þ?d³<¿ ,"?`êp¾  ¿²¾	±¼&¶Ø½z¿j>1>·å>§*?Þ>¡é{?«°=  ?²¾k·¼&¶Ø½z¿j¾1>²Úä>Kx*?Úù½¯{?Ëi>  ?Ö¾S9´¼+¦Ø½¸|¿    ¤j#>x)å>-w*?ù!<!?l}z=  ?ù¾f~º¼yåØ½kt¿j¾YÒì=¾gä>ª*?I¾#Ýs?½#>  ?ù¾9ô­¼yåØ½kt¿j>YÒì=ÇHæ>Ç¼*?R2>Hìs?È»=  ?Ü¾S½¼S2Ù½ni¿
Ï¾¾#=ùÚã>*?BÇ¾d g?1>  ?Ü¾«¼S2Ù½ni¿
Ï>¾#=2Ëæ>ü*?IxÑ>"Rg?	>  ?L´¾"Ï¿¼¾Ù½Øy[¿OÂ¿·¼ÉZã>CÇ*?Ð^¿gX?#a%>  ?L´¾}£¨¼¾Ù½÷x[¿ÈÃ?¼6:ç>(I+?Hö ?U³W?ìC>  ?ç¾ÂØÁ¼ÂÚ½EFJ¿½ï¿:Æ½ââ>+?Çè¿åèG?©Çö=  ?ç¾â¦¼ÄÚ½EFJ¿½ï?:Æ½ç><¡+?¨,?ÏF?s|>  ?±L¾U\Ã¼§Ú½N¦6¿-(,¿zI¾Wyâ>{M+?L1¿©8?Û§5=  ?±L¾J¥¼§Ú½N¦6¿-(,?zI¾A·ç>É ,?®*?~97?-Ö>  ?É¾	KÄ¼CÛ½\!¿dÂ6¿
.¾«$â>f£+?Â;¿À(-?oI½  ?É¾'¤¼CÛ½\!¿dÂ6?
.¾­½ç>kc,?Iæý>G,,?Â ?  ?{Ò¾ Ä¼ÅåÛ½8¿¾V:¿%×Õ¾Kéá>,?Ç9¿(?JP¾  ?{Ò¾×£¼ÅåÛ½8¿¾V:?%×Õ¾ç>ÎÄ,?:~Ä>(?mÇ%?  ?-¾	KÄ¼Ü½#ê¾hÂ6¿ÊÁ¿Éá>ob,? (¿a+,?°»¬¾  ?-¾'¤¼Ü½#ê¾hÂ6?ÊÁ¿bç>"-?Õ>"-?1?  ?EX¾U\Ã¼$Ý½^¿¾!(,¿z#¿Éá>"Å,?:¿%D7?Ó­Ý¾  ?EX¾J¥¼$Ý½^¿¾!(,?z#¿`ç>uw-?öV
>%8?ý.?  ?!¾ÂØÁ¼Ê³Ý½-N¾6ð¿²=¿tïá>%-?OØ¾ÀãF?´Ðî¾  ?!¾â¦¼Ê³Ý½-N¾6ð?²=¿?æ>@Á-?CD-=÷îG??  ?©ð¾"Ï¿¼Ï1Þ½Òk¾)Ã¿ÜkS¿h?â>N|-?]g ¾»W?{+à¾  ?©ð¾£¨¼Ï1Þ½Òk¾)Ã?ÜkS¿æ> ü-? Å¼mlX?ý?  ?òÈ¾S½¼;Þ½Z3¾í
Ï¾@Íe¿Å­â>CÈ-?Ui¾Sg?u¹¾  ?òÈ¾«¼;Þ½Z3¾í
Ï>@Íe¿å>¯'.?áÞ½k£g?8S×>  ?p«¾k~º¼æÞ½i	¾«¾Ùts¿33ã>W.?~,¾	Âs?þ¦¾  ?p«¾9ô­¼æÞ½i	¾«>Ùts¿7å>pA.?¶¹½SÄs?ÇW>  ?C¾k·¼fß½?#ß½j¾¬Ý{¿ Æã>ý0.?ºøý½[ä{?í]¾  ?C¾±¼fß½?#ß½j>¬Ý{¿¥ä>ÏJ.?ÁÎ½Ø¨{?d¾>  ? ¾S9´¼a%ß½²Í½    ´~¿Uä>ÜK.??~½?é&Í;  ?X½'¤¼R>½$ê>+Ã6?YÀ?JÎÙ>Ê}?¤(¿),?¡±¬¾  ¿{Ò¾×£¼ÅåÛ½8¿¾V:?%×Õ¾~äö>`¬?^Ç¿ê/¿ã¾  ¿É¾'¤¼CÛ½\!¿dÂ6?
.¾r¥ö>Ê}?Ò×ý¾ì),¿,ª¿  ¿~Û½×£¼ÊF?½8?¾V:?%×Õ>xÚ>`¬?^Ç¿ê/?ã¾  ¿êÏ½J¥¼PÊ<½^¿>!(,?z#?F³Ú> ·=d³<¿ ,"?`êp¾  ¿É¾'¤¼CÛ½\!¿dÂ6?
.¾yÉ÷>°Å®=Ò×ý¾ì),¿,ª¿  ¿±L¾J¥¼§Ú½N¦6¿-(,?zI¾n÷> ·=|»Õ¾â,"¿Ç&¿  ¿X½'¤¼R>½$ê>+Ã6?YÀ?RòÚ>°Å®=¤(¿),?¢±¬¾  ¿íM½k·¼ç8½?#ß=j¾¬Ý{?ãä>ý%?`dÌ½¬±{?ú¡>  ¿íM½±¼ç8½?#ß=j>¬Ý{?­¿å>Æ&?>ü½dê{?ìy¾  ¿3Z½S9´¼Ç8½²Í=    ´~?2å>nü%?Vp|½&?}ÝË;  ¿)½k~º¼/F9½i	>«¾Ùts?Pqä>ê&?D³½VÞs?y,>  ¿)½9ô­¼/F9½i	>«>Ùts?aPæ>¢A&?!&¾îs?#¾  ¿î½S½¼àß9½Z3>í
Ï¾@Íe?åã>!!&?Ù½¢g?åT×>  ¿î½«¼àß9½Z3>í
Ï>@Íe?FÒæ>4&?Wei¾ Ug?è¦¹¾  ¿!½"Ï¿¼¸®:½Ók>°Á¿µlS?geã>@L&?O@È¼®iX?3?  ¿!½£¨¼»®:½Òk>)Ã?ÜkS?æ@ç>}Í&?¥ ¾?¶W?xà¾  ¿W>½ÂØÁ¼Äª;½-N>6ð¿²=?»íâ>ä&?Y+=éG?Ø?  ¿W>½â¦¼Äª;½-N>6ð?²=?ûç>-%'?eÓØ¾ìÛF?Ñ¤î¾  ¿êÏ½[\Ã¼NÊ<½^¿>!(,¿z#?yâ>áÑ&?¯
>.8?T.?  ¿êÏ½J¥¼PÊ<½^¿>!(,?z#?c·ç>s'?.Q¿w>7?]Ý¾  ¿X½	KÄ¼O>½#ê>hÂ6¿ÊÁ?F$â>Ì''?K$>s%-?
û0?  ¿X½'¤¼R>½$ê>+Ã6?YÀ?­½ç>%è'?m¬(¿ö&,?¬¾  ¿~Û½ Ä¼ÊF?½8?¾V:¿%×Õ>Äèá>'?
Ä>¬x(?õ%?  ¿~Û½×£¼ÊF?½8?¾V:?%×Õ>oç>I(?ö²9¿q(?#O¾  ¿ä^½KÄ¼B@½\!?dÂ6¿
.>;Âá>`æ'?{ý>,?0Û?  ¿ä^½'¤¼B@½\!?dÂ6?
.>Wç>Î¥(?ûå;¿-?Ó½  ¿ç½[\Ã¼DÃA½N¦6?-(,¿zI>;Âá>ÏH(?B3?R=7?	Ö>  ¿ç½O¥¼DÃA½N¦6?-(,?zI>¡÷æ>ú(?!1¿è8?ÏÀ7=  ¿¦x½ÂØÁ¼ÐâB½FJ?ï¿Æ=ªîá>µ§(?
4?ðÔF?È@>  ¿¦x½â¦¼ÐâB½FJ?ï?Æ=*æ>xD)?äè¿úìG?@ïõ=  ¿Ü½"Ï¿¼ÙÞC½÷x[?ÈÃ¿<>â>2ÿ(? ?ÂW?¢A>  ¿Ü½£¨¼ÙÞC½÷x[?ÈÃ?<Âæ>é)?d¿WnX?n$>  ¿nÈ½S½¼²­D½ni?
Ï¾¾#½ ¨â>ýL)?êtÑ>yzg?K+û=  ¿nÈ½«¼²­D½ni?
Ï>¾#½Òå>m«)?¿oÇ¾f¸g?FC.>  ¿h½k~º¼eGE½kt?j¾YÒì½(ã>µ)?À(>ós?]¹=  ¿h½9ô­¼eGE½kt?j>YÒì½Gå>rÅ)?¥£¾bäs?É±">  ¿i½k·¼
¦E½z?j¾1¾··ã>¶)?iu>ï{?th®=  ¿i½±¼
¦E½z?j>1¾Kä>ÀÎ)?Ü+ú½·¶{?=w
>  ¿Ê\½S9´¼ ÆE½¸|?    ¤j#¾³Cä>îÏ)?è <È?×x=  ¿6)¾EÞ<éí½{+æ¾¼,¿EØ?Pß2?øPÂ>TM¿^*<M¿  ¿2jH¾GÁø<ÝÁ½m¿x#e=Ýò¼>3=?Ifý>µ¾¾:>½Km¿  ¿n5¾EÞ<Z ¾dl¿)û·>^*
¾Y2??ò}Á>Ó©½Ü¬¿ËX¿  ?WY>¾GÁø<²½p¦¿Ý£v=,©J?Pß2?<þ>K¿UP:ìñ¿  ¿Å	¾@Þ<R©È½Í²¼>¼ú·>B{[?^H>í~>CöM¿<Ø?°ßÍ=  ?|H4¾GÁø<V¥¢½p¦¿Ý£v=,©J?x~q>!½>SK¿bJ@»å¿  ¿ý¾@Þ<Û½{+æ¾¼,¿EØ?Íry>k}>Î³B¿R_½j %¿  ¿¡7*¾GÁø</½Èð½§e=ñÔ}?^H>b»>ð~¿Et÷<Çó½  ¿ý¾@Þ<Û½{+æ¾¼,¿EØ?¶-:?|,>xK¿Éæ¶åî¿  ¿WY>¾GÁø<²½p¦¿Ý£v=,©J?ËE?ÚS>|K¿<5àî¿  ¿6)¾EÞ<éí½{+æ¾¼,¿EØ?F?|,>xK¿åv¶äî¿  ¿|H4¾GÁø<V¥¢½p¦¿Ý£v=,©J?-;?ÚS>|K¿7·©4àî¿  ¿¡7*¾7Áø¼/½¦Q¾1½íê|?v*=üß5?:}?þO=>*>  ¿ý¾/Þ¼Û½{+æ¾¼,?EØ?u?§:TU?ç^H?>¼;D?  ¿|H4¾7Áø¼V¥¢½ÿ£¿;ã{½¤J?u?§:v86?>	K?¤fuºì?  ¿Æ	¾/Þ¼R©È½)¾¶>?º½¾[?kJ=Ñë?FW?L?Wø½  ?Æ	¾/Þ¼R©È½)¾¶>?º½¾[?ô?$}=ßÐ>[Æm?ê(¯>  ¿ý¾@Þ<Û½{+æ¾¼,¿EØ?>=?ÁXß<nÒ¾lð<?·þ?  ¿ý¾/Þ¼Û½{+æ¾¼,?EØ?ô?ÁXß<nÒ>lð<?µþ¿  ¿Å	¾@Þ<R©È½Í²¼>¼ú·>B{[?>=?$}=KQ¾Äæn?)©¾  ¿|H4¾7Áø¼V¥¢½ÿ£¿;ã{½¤J?ìMD?+%?÷K?¶Öµï?  ¿7)¾/Þ¼éí½{+æ¾¼,?EØ?×ø8?ML?wK?0ì¶åî?  ¿WY>¾7Áø¼²½ÿ£¿;ã{½¤J?±ø9?+%?÷K?ê
 µï?  ¿ý¾/Þ¼Û½{+æ¾¼,?EØ?¶ME?ML?xK?ù·¶åî?  ¿ý¾/Þ¼Û½{+æ¾¼,?EØ?,é>YM??nÒ>lð<?²þ¿  ¿6)¾EÞ<éí½{+æ¾¼,¿EØ?Ï!?{ø2?nÒ¾lð<?µþ?  ¿7)¾/Þ¼éí½{+æ¾¼,?EØ?,é>{ø2?nÒ>lð<?²þ¿  ¿ý¾@Þ<Û½{+æ¾¼,¿EØ?Ï!?YM??nÒ¾lð<?µþ?  ¿WY>¾7Áø¼²½ÿ£¿;ã{½¤J?;0?<þ>ÜÿJ?Ù7;`ø?  ¿o5¾/Þ¼Z ¾{¨k¿ÿ¹½¾ªBý½þò%?vü¿>À>À)¿rM?  ?2jH¾7Áø¼ÝÁ½2.k¿{2½;Ç>þò%?ü>§¾È>²q½èOk?  ¿7)¾/Þ¼éí½{+æ¾¼,?EØ?82?ërÂ>?R?^H_=Rc?  ¿7)¾/Þ¼éí½{+æ¾¼,?EØ?M>;Q2?nÒ>lð<?²þ¿  ¿n5¾EÞ<Z ¾dl¿)û·>^*
¾à>nü%?D¶>¯æn?cÎT=  ¿o5¾/Þ¼Z ¾{¨k¿ÿ¹½¾ªBý½M>nü%?	¼¾hÆm?8J½  ¿6)¾EÞ<éí½{+æ¾¼,¿EØ?à>;Q2?nÒ¾lð<?¸þ?  ¿v&¾kOß¼Âbõ½Þ>êÆ3?X¿*ý$?ÙG?ø¾Ä5?óÌ?  ¿f#¾Þä¼A¤¾"Õ=ð£<~¿è
?øQ?z~¿JÒ=æÒ½  ¿®2¾kOß¼Gë¾ÙÝ¥¾&*Á¾y^¿×¢%?TåS?e¿Þ-¾p>Ñ>  ?Ø¾Þä¼Ö¾î?È;K¿èg
?ÙG?×x4¿G°ì>q²	¿  ¿	¾kOß¼*{Ð½çúk?a*Á¾>¢¶=¨ß?Þß>Ù3>?êE?  ?Â¾Þä¼k]¾î?È;K¿æð>%§>%K?»í?  ¿=¾kOß¼÷îâ½Þ>êÆ3?X¿Çbë>Ü>cV?±Þ£½cì
?  ¿Þü½Þä¼ÿ9¾o?ºA£<ðÍ¶¾¨ß?`ª>µ ·>É'¯¼·o?  ¿=¾kOß¼÷îâ½Þ>êÆ3?X¿ÃIR?+%?K?ª¶\ï?  ¿Ø¾Þä¼Ö¾î?È;K¿!ZG?8
?K?êO3Àî?  ¿v&¾kOß¼Âbõ½Þ>êÆ3?X¿õôE?+%?K?«û¶[ï?  ¿Â¾Þä¼k]¾î?È;K¿äP?8
?K?gpV3Àî?  ¿ý½Ý}æ<
á¾Úl?äðº\ÊÃ¾]H?±£ñ<èÊÃ¾ cX»yl¿  ¿mN¾³¯Ý<Bâ½á>n<1¿¿¤äQ?¥>òN¿eÞ¼>¿  ¿Ñ¾Ý}æ<v¾·î?!´:K¿¤äQ?ªá<iK¿ÐßºÐî¿  ¿4K¾³¯Ý<ÐÎÏ½m?Å6¶>bÞ=)E?	>zÍ½R&?w"Y¿  ?4K¾³¯Ý<ÐÎÏ½m?Å6¶>bÞ=Ï!?nü%?ÿdµ¾Í;o?-ª½  ¿=¾kOß¼÷îâ½Þ>êÆ3?X¿,é>;Q2?RÛ¾Ò@6??  ¿mN¾³¯Ý<Bâ½á>n<1¿¿Ï!?;Q2?së×>¤¹8?¿  ¿	¾kOß¼*{Ð½çúk?a*Á¾>¢¶=,é>nü%?ë¿>sm?tU1=  ¿Ñ¾Ý}æ<v¾·î?!´:K¿ H?|,>K¿¶9²Àî¿  ¿¥Q&¾³¯Ý<i¶ô½á>n<1¿¿¢~S?ïYw>ïK¿éuó¶ï¿  ¿f¾Ý}æ<á'¾·î?!´:K¿vR?|,>K¿Ô.²Àî¿  ¿mN¾³¯Ý<Bâ½á>n<1¿¿Ô)G?ïYw>îK¿Òï¶ï¿  ¿mN¾³¯Ý<Bâ½á>n<1¿¿Î5>Å2?të×>¤¹8?¿  ¿v&¾kOß¼Âbõ½Þ>êÆ3?X¿ ¦=o>?VÛ¾Ò@6??  ¿¥Q&¾³¯Ý<i¶ô½á>n<1¿¿Î5>o>?uë×>¤¹8?¿  ¿=¾kOß¼÷îâ½Þ>êÆ3?X¿ ¦=Å2?VÛ¾Ò@6??  ¿f¾Ý}æ<á'¾·î?!´:K¿_§>~Q?ÿÕF¿dþM¾Í¿  ¿ÝT2¾³¯Ý<¾þ:°¾7¶>Èk^¿à>ÙG?Íðh¿­4Ð=úâÍ>  ?¸g¾ä}æ<MK¾3B>Þìº)Ê}¿qXª>ÙG?h}¿j!b½ô¾  ¿¥Q&¾³¯Ý<i¶ô½á>n<1¿¿£?Ü>/ÃS?0¿åg4¿Ï>  ¿¥Q&¾³¯Ý<i¶ô½á>n<1¿¿à>{ø2?wë×>¤¹8?¿  ¿®2¾kOß¼Gë¾ÙÝ¥¾&*Á¾y^¿M>YM??Ú¾m?ì³³¾  ¿ÝT2¾³¯Ý<¾þ:°¾7¶>Èk^¿à>YM??Qÿ=¾;o?¦¸ª>  ¿v&¾kOß¼Âbõ½Þ>êÆ3?X¿M>{ø2?TÛ¾Ò@6??  ¿|H4¾GÁø<V¥¢½p¦¿Ý£v=,©J?þ?Æ?ÞK?}£:í?  ¿ý½Ý}æ<
á¾Úl?äðº\ÊÃ¾ÊR?, À>ÊÃ>kÙË9îl?  ¿Ñ¾Ý}æ<v¾·î?!´:K¿ÉÈ?p?À>K?$(º²î?  ¿¡7*¾GÁø</½Èð½§e=ñÔ}?ÊR?4M?Z
~?Wö½úô=  ¿Ñ¾Ý}æ<v¾·î?!´:K¿\æ$?vü¿>K?Î"/2Àî?  ¿WY>¾GÁø<²½p¦¿Ý£v=,©J?ö?Uø?|K?a©´àî?  ¿|H4¾GÁø<V¥¢½p¦¿Ý£v=,©J?¾K%?Uø?|K?7·©´àî?  ¿f¾Ý}æ<á'¾·î?!´:K¿æ[?vü¿>K?Ô.2Àî?  ¿f¾Ý}æ<á'¾·î?!´:K¿K%?|,>K?ã^9Äî?  ¿2jH¾GÁø<ÝÁ½m¿x#e=Ýò¼>sö?÷­¾>j¾>I$=ìm?  ¿WY>¾GÁø<²½p¦¿Ý£v=,©J?K%?¾>K?Ö#J¹zï?  ¿¸g¾ä}æ<MK¾3B>Þìº)Ê}¿7Á?øl>;Ê}?±ÎVºB>  ¿4K¾³¯Ý<ÐÎÏ½m?Å6¶>bÞ=JC]?V>ë2s>vX¯¾,µh¿  ¿¡7*¾GÁø</½Èð½§e=ñÔ}?­Y?÷>û|?üC½½Jñù=  ¿Å	¾@Þ<R©È½Í²¼>¼ú·>B{[?ó\?#hÄ>÷Bi?»0="ËÑ¾  ¿4K¾³¯Ý<ÐÎÏ½m?Å6¶>bÞ=JC]?V>i¾[=½Ç|?  ¿ý½Ý}æ<
á¾Úl?äðº\ÊÃ¾­Y?s>ÕÃ>ÞV¦½Æk?  ¿¡7*¾GÁø</½Èð½§e=ñÔ}?­Y?÷>ýs¿	p¾<;Ã½  ¿	¾kOß¼*{Ð½çúk?a*Á¾>¢¶=ô?»·¢<«?À>îm?ad=  ¿Å	¾@Þ<R©È½Í²¼>¼ú·>B{[?<Ú4?È¨:Â§¾`ån?E¨§¾  ¿Æ	¾/Þ¼R©È½)¾¶>?º½¾[?J?u?§:vÊ>[Æm?@*¯>  ¿4K¾³¯Ý<ÐÎÏ½m?Å6¶>bÞ=õ4?»·¢<þdµ¾Í;o?Uª½  ¿Æ	¾/Þ¼R©È½)¾¶>?º½¾[?ToU?Ä>ù¿¥G¿l× ½  ¿Þü½Þä¼ÿ9¾o?ºA£<ðÍ¶¾nÞX?s>*´¾¾â¾u0W¿  ¿	¾kOß¼*{Ð½çúk?a*Á¾>¢¶=³ïR?^»¼>ïçZ=zTÕ½P=~¿  ¿¡7*¾7Áø¼/½¦Q¾1½íê|?nÞX?Af÷>»Z¿qþ¾J¾  ¿Â¾Þä¼k]¾î?È;K¿3O?Vº>K¿ÿ+=¹Ïî¿  ¿¡7*¾7Áø¼/½¦Q¾1½íê|?	ú?÷­¾>,:}¿ËÅ½,¾  ¿|H4¾7Áø¼V¥¢½ÿ£¿;ã{½¤J?3O?;¾>jK¿¤¹@9öî¿  ¿Þü½Þä¼ÿ9¾o?ºA£<ðÍ¶¾½Ä?ú>oñ¶¾%G<~o¿  ¿|H4¾7Áø¼V¥¢½ÿ£¿;ã{½¤J?	ú?ïT?÷K¿Gþ4ï¿  ¿Ø¾Þä¼Ö¾î?È;K¿âé?vü¿>K¿z¨T³Àî¿  ¿Â¾Þä¼k]¾î?È;K¿[_?vü¿>K¿gpV³Àî¿  ¿WY>¾7Áø¼²½ÿ£¿;ã{½¤J?DO?ïT?÷K¿ê
 5ï¿  ¿WY>¾7Áø¼²½ÿ£¿;ã{½¤J?þ?¾¾>K¿ºNñ¿  ¿f#¾Þä¼A¤¾"Õ=ð£<~¿ÊR?Àz>¨~¿>ÜD¼¦Õ½  ¿Ø¾Þä¼Ö¾î?È;K¿ÉÈ?Vº>´K¿±®:î¿  ¿2jH¾7Áø¼ÝÁ½2.k¿{2½;Ç>ÊR?ñð¾>)ÁÈ¾5=QNk¿  ¿®2¾kOß¼Gë¾ÙÝ¥¾&*Á¾y^¿­na?%>£wN?æ½>ðfì¾  ¿2jH¾7Áø¼ÝÁ½2.k¿{2½;Ç>yê]?÷>·ÍÉ¾2½=j¿  ¿o5¾/Þ¼Z ¾{¨k¿ÿ¹½¾ªBý½9^a?¯Ã>¿>æ40½Ý|¿  ¿®2¾kOß¼Gë¾ÙÝ¥¾&*Á¾y^¿­na?%>8Zj¿ÅÚ½¤·Æ>  ¿f#¾Þä¼A¤¾"Õ=ð£<~¿yê]?ú>~¿Ó=LÍÑ½  ¿2jH¾7Áø¼ÝÁ½2.k¿{2½;Ç>yê]?÷>.?¶>Å>>Üc?  ¿ÝT2¾³¯Ý<¾þ:°¾7¶>Èk^¿áðF?¾:?!Û><=o?z©>  ¿o5¾/Þ¼Z ¾{¨k¿ÿ¹½¾ªBý½N¹"?YM??N~¼¾Åm?¤«.½  ¿n5¾EÞ<Z ¾dl¿)û·>^*
¾f3G?YM??D¶>¯æn?cÎT=  ¿®2¾kOß¼Gë¾ÙÝ¥¾&*Á¾y^¿Év"?¾:?Ú¾m?ë³³¾  ¿n5¾EÞ<Z ¾dl¿)û·>^*
¾ÚN?áDÄ>êHg>.üJ?ãà?  ¿¸g¾ä}æ<MK¾3B>Þìº)Ê}¿sHR?ÓO>_d_?Âó>çê=  ¿ÝT2¾³¯Ý<¾þ:°¾7¶>Èk^¿­LL?æé¼>_Em? >Ëû¾  ¿2jH¾GÁø<ÝÁ½m¿x#e=Ýò¼>sHR?Af÷>4°>-7?jI?  ¿¸ôÞ¼    7øé¼uî>¿    2*¿C G?µ7\?
¾Û+y?u8/>  ¿µ!5;m^¼»õ²k>çg¿W6º¾J&?µ7\?Ù6<¿À«=ö3,¿  ¿÷í»D¬»»1ü7¿ú-¿Ë>G8-?«a?Ýé¿æå>vû0¿  ¿÷í»D¬»»1ü7¿ú-¿Ë>Ô)G?ìöy>?Òô¾þ²¨>9jP¿  ¿÷í»D¬;»1ü7¿ú-?Ë>H?E>x®¾¦µ#¾<,m¿  ¿¸ôÞ¼    7øé¼uî>¿    2*¿¥a?ìöy>ý!â>A¤?? /ý¾  ¿¸ôÞ¼    7øé¼uî>¿    2*¿AGK?ÀI?7*¿    qî>?  ¿ðå6<    á`Î»&]?    ó ¿J&?ÀI?~ó ¿    &]¿  ¿µ!5;m^¼»õ²k>çg¿W6º¾-+?¤TR?E~\¿Àu¼ì¿  ¿¸ôÞ¼    7øé¼uî>¿    2*¿AGK?u[?7*¿    qî>?  ¿µ!5;m^<»õ²k>çg?W6º¾-+?ãûR?E~\¿Àu<ì¿  ¿ðå6<    á`Î»&]?    ó ¿J&?u[?~ó ¿    &]¿  ¿¸ôÞ¼    7øé¼uî>¿    2*¿¨WV?Â2¶<
¾Û+y¿u8/>  ¿÷í»D¬;»1ü7¿ú-?Ë>¬o<?u?§:Ýé¿æå¾vû0¿  ¿µ!5;m^<»õ²k>çg?W6º¾|5?Â2¶<Ù6<¿À«½ö3,¿  ¿÷í»D¬»»1ü7¿ú-¿Ë>«l?cFx>¬q ¿Ú¡
?sp¿  ¿ç¼    ;ùd¿    ÷ä>«l?;«>)õ>¾(®h?Óö¾¾  ¿÷í»D¬;»1ü7¿ú-?Ë>êBt?%ç>?î>Ì´ ?@¿  ¿µ!5;m^¼»õ²k>çg¿W6º¾.;l?=¤>þßB¿BÏ=`'%¿  ¿µ!5»m^¼;°.Ì¾È,S¿³Í>.;l?ëÄµ>á¦`¿ì¤]>$Û¾  ¿÷í»D¬»»1ü7¿ú-¿Ë>Òs?Ö ­>{ª!¿¨?¿  ¿ðå6<    á`Î»&]?    ó ¿- =(ïc?Þ× ¿·'½-÷\¿  ¿¹u<¼0î;(ê?nH#¿ý±?2=5Ïm?·b½<+¿n=¿  ¿µ!5;m^¼»õ²k>çg¿W6º¾±j°=5Ïm?l¿êN>QT¿  ¿µ!5;m^<»õ²k>çg?W6º¾ïåV?mf?q?´í½Âr>  ¿¹u<<0î;(ê?nH#?ý±?_?om?æ?DA¿[.>  ¿ðå6<    á`Î»&]?    ó ¿_?ö$`?Ì.Ö>°¿I©7?  ¿÷í»D¬;»1ü7¿ú-?Ë>"ÿt?9BÆ>j1¿IX7¿_ì¡½  ¿µ!5»m^<;°.Ì¾È,S?³Í>(p?j·>Ph¿idÔ¾«M½  ¿µ!5;m^<»õ²k>çg?W6º¾.;l?9BÆ>Mèv¿´µ%>ÕÈU¾  ¿÷í»D¬»»1ü7¿ú-¿Ë>(p?¸Ç>ÊU/¿¿w:?Â³<  ¿µ!5»m^¼;°.Ì¾È,S¿³Í>.;l?f¿Ö>÷W¿T ?	E>  ¿ç¼    ;ùd¿    ÷ä>2ÿt?f¿Ö>A¾xxs?¾  ¿µ!5;m^¼»õ²k>çg¿W6º¾ Ti?ìöy>}Ðs¿Z¾ ¦¾  ¿¹u<¼0î;(ê?nH#¿ý±?åEb?;«>ÍJ¿¿ù>  ¿µ!5»m^¼;°.Ì¾È,S¿³Í>Sl?;«>Íbc¿t>ôðÈ¾  ¿ðå6<    á`Î»&]?    ó ¿á%T?ïYw>JãM>Æ¸j?_°>  ¿¹u<<0î;(ê?nH#?ý±?¤¨_?¬Ä\>zêK¿]?}É>  ¿¹u<¼0î;(ê?nH#¿ý±?á%T?­/B>c¼â=IÅ/?ó7?  ¿µ!5;m^<»õ²k>çg?W6º¾&'=(ïc?ò>[Ü¾ÒÜD¿  ¿µ!5»m^<;°.Ì¾È,S?³Í>ÙvÚ;(ïc?É»>;?¯8A¿  ¿¹u<<0î;(ê?nH#?ý±?öA<T5m?[?V«Á=½SH¿  ¿÷í»D¬;»1ü7¿ú-?Ë>Òs?yæ>ú?0O,?¿½¿  ¿ç¼    ;ùd¿    ÷ä>.;l?Åî>¾xs?¹¾  ¿µ!5»m^<;°.Ì¾È,S?³Í>Òs?÷>¬s??@é¿  ¿µ!5»m^¼;°.Ì¾È,S¿³Í>.;l?ú>t/j¿æ§>®r¾  ¿        
×#<5K¾    ¸äz?.;l?â¡>\J]¿1Eñ>!3¾  ¿ç¼    ;ùd¿    ÷ä>Òs?îÐ> =¹¾y? >9¿  ¿¹u<¼0î;(ê?nH#¿ý±?/Rh?Å=ÍJ¿¿ ù>  ¿        
×#<5K¾    ¸äz?gn?kIÇ=Q¡z¿;½KK¾  ¿µ!5»m^¼;°.Ì¾È,S¿³Í>r?Å=Íbc¿t>õðÈ¾  ¿¹u<<0î;(ê?nH#?ý±?êên?ºE?7(ð¾¨*E?JÝ¾  ¿        
×#<5K¾    ¸äz?RFh?ü8>?L¹ÿÿ?q_|¸  ¿¹u<¼0î;(ê?nH#¿ý±?Z a?í¸E?¥âï>¨*E?þÝ>  ¿µ!5»m^<;°.Ì¾È,S?³Í>çr?B
^>Íbc¿t¾õðÈ¾  ¿        
×#<5K¾    ¸äz?Þån?,.>>Q¡z¿;=KK¾  ¿¹u<<0î;(ê?nH#?ý±?xÐh?B
^>ÍJ¿? ù>  ¿ç¼    ;ùd¿    ÷ä>Òs?Øø>Ç¾Úþú>ÓG¿  ¿        
×#<5K¾    ¸äz?.;l?Î ?U¿}>?zÊ,¾  ¿µ!5»m^<;°.Ì¾È,S?³Í>Òs?0?_¿;>= V¿  ¿½Ïº½ó¼ÎH¿    É?a?n=?      ?      ¿gu½6;£½¡+½ª,¿    ë=¿j?ÓÝ1?      ?      ¿gu½Ïº½¡+½ª,¿    ë=¿a?ÓÝ1?      ?      ¿½6;£½ó¼ÎH¿    É?j?n=?      ?      ¿D÷@½Ïº½D¾¼µR¶½    Èû~?/º>Ç¼v?ýHû2  ?ó­31  ¿a½6;£½ r¦¼{¿    n¼Z?4Í>µÃo?.¡h4  ?8t4  ¿a½Ïº½ r¦¼{¿    n¼Z?/º>µÃo?      ?      ¿D÷@½6;£½?¾¼µR¶½    Èû~?4Í>Ç¼v?úÀ3  ?»½Þ1  ¿½é½ó¼ÎH¿    É?ñc`?c?      ?      ¿gu½0i½¡+½ª,¿    ë=¿ôái?oW?      ?      ¿gu½é½¡+½ª,¿    ë=¿ñc`?oW?      ?      ¿½0i½ó¼ÎH¿    É?ôái?c?      ?      ¿D÷@½é½?¾¼µR¶½    Èû~?Pq?hë?Èû~¿£ÑÇ4·R¶½  ¿a½0i½ r¦¼{¿    n¼Z?bx?ji?n¼Z¿`5{¿  ¿a½é½ r¦¼{¿    n¼Z?bx?hë?n¼Z¿    {¿  ¿D÷@½0i½?¾¼µR¶½    Èû~?Pq?ji?Èû~¿	µw5·R¶½  ¿½Ð:½ó¼ÎH¿    É?ìb??Cë3  ?£4  ¿fu½é½¡+½#¿[2¸½C¿îk?Øø>ÆKl½eö~?;P½  ¿gu½Ð:½¡+½ª,¿    ë=¿ìb?Øø>Ö¥¿4  ?Aì®´  ¿½é½ó¼bÝE¿dk½ÄÄ!?îk??£<6½±?Þý=  ¿D÷@½Ð:½?¾¼µ1Î½E¼°~?ÇG?lêx?oJwº ý?¹<  ¿a½é½r¦¼X¿¼>[?EQ?kñq?»ß¢»ïü?~ü<  ¿a½Ð:½r¦¼{¿    n¼Z?ÇG?kñq?      ?      ¿D÷@½ é½?¾¼/Ú¾nº´}?EQ?lêx?¸"¹õÿ?W¥:  ¿,N½á¼:¼°Î¬¾KD¾¬ík?¥ÚG?f0:?¡o¿ë]½P{³¾  ¿.u½ä:¼A¹¼¿ú½R?biP?YM??|S¿½FM»qô¿  ¿)ìs½T¼õE¾¼	t¿|ò­½S?=}P?0g:?RLT¿eÄ»¿  ¿b]S½ä:¼[¼uÓö¾|z1¾Û[?)[H?YM??Î_¿Ú«Û»Í#û¾  ¿ëo¼)Ý¼.ý¯¼{ü>¡T>¿2¿ç¾þò%?ML?è§O¿­&P¾Êa¿  ¿¢zÍ¼ä:¼o:N+Ø¾`®¿¡,?þò%?Uø?V7c¿>ÒÌâ¾  ¿^n2½ä:¼ÍG¼fÐ¾_Æ¾´S?Q8?È$?µh¿K¡=¤Ò¾  ¿SÌ»o®¼âUT¼«ô>J¿k:Ã¾:è.?Ø×>mQ¿x¾¸w¿  ¿¢zÍ¼ä:¼o:N+Ø¾`®¿¡,?w9?ßÜ_>CÞa¿5ú×=!Þê¾  ¿ëo¼)Ý¼.ý¯¼{ü>¡T>¿2¿ç¾w9?|,>!0K¿.¾é¿  ¿»­!¼åO<7BN¾¿8N?Üò%?¯´l>.u¿[(z½è¾  ¿»!<åO<7BN¾?8N?tp?ðN
?»z¿OÔ½ÑM1¾  ¿îÀ<7<P(W<îó!?^ZÆ>¬+?°¯e?hë?ª3F¿ Ç¬>·	?  ¿÷c<¿U<%ÆW;e :?<®-?Þ¢Þ½¯e?ù?b.¿?;?Îöñ;  ¿^¨´½Ä:<Ò7½$+¿»Û
?±?2=»	r?l>¿4êú¾¤ê¾  ¿N!È½	Üß;½r\½Zzg¿Àý«>_	¾oô±=ø6u?g©>¾W¦]¿âÈí¾  ¿ñÈ½?=;ÜUZ½Òç}¿Øÿ<Ðý½Õ%Ã=»	r?7ñN=kK¿åâ¿  ¿'½Ùº¼	õ¼¡C¿[#ù½2â"?x(^?ÉW=Õ¾eo?L ;¾  ¿ê½ä:¼<î½fr'¿usñ½½F??°Wh?+=p«¾Cn?Æ¾  ¿<J½xáÛ¼vy+½+¿êT¿¨úZ¾x(^?eÃ<Kl>¿7å?7¿¾  ¿»­!¼åO<7BN¾¿8N?Ô,Ð;X«J?o¬	¾ÅìT?ä	?  ¿¢zÍ¼¹:<o:N+Ø¾`®?¡,?$}=µß6?_¥>õ8K?#Ö¿  ¿¢zÍ¼ä:¼o:N+Ø¾`®¿¡,?u?§:µß6?_¥¾õ8K?#Ö?  ¿»!<åO<7BN¾?8N?U=X«J?o¬	>ÅìT?ä	¿  ¿îÀ<½7¼P(W<îó!?^ZÆ¾¬+?æ>T^?ï>.l?H>  ¿»!<åO<7BN¾?8N?¦>ÈS?o¬	>ÅìT?ä	¿  ¿»­!¼åO<7BN¾¿8N?ñK>ÈS?o¬	¾ÅìT?ä	?  ¿îÀ<7<P(W<îó!?^ZÆ>¬+?W£>T^?ï¾.l?H¾  ¿^¨´½Ù:¼Ò7½$+¿»Û
¿±?Ð_È=ø6u?l>¿4êú>¤ê¾  ¿ñÈ½=»ÜUZ½Òç}¿Øÿ¼Ðý½B>ø6u?7ñN=kK?åâ¿  ¿N!È½IÜß»½r\½Zzg¿Àý«¾_	¾X©>»	r?g©>¾W¦]?âÈí¾  ¿^¨´½Ù:¼Ò7½$+¿»Û
¿±?/>l
?)¿5þ==¿  ?ê½¹:<<î½fr'¿usñ=½F??7qB>®,?¼@¿¶Á»|(¿  ?^¨´½Ä:<Ò7½$+¿»Û
?±?Î5>Â/?ÔÉ)¿;j¾<¿  ?.u½ä:¼A¹¼¿ú½R?°>?UþR¿çq»ø¿  ?.u½¹:<A¹¼¿ú=R?ç >Ï,?GøR¿6Õ;õÿ¿  ?ê½ä:¼<î½fr'¿usñ½½F??´¯L>S?¾@¿±Ò;çx(¿  ?b]S½ä:¼[¼uÓö¾|z1¾Û[?XTD<½:[?p¿­½* |?HÃ>  ¿^n2½¹:<ÍG¼fÐ¾_Æ>´S?±j°=éGc?½d/>õk?»,²¾  ¿b]S½¹:<V¼uÓö¾|z1>Û[?±j°=½:[?¿­=* |??Ã¾  ¿^n2½ä:¼ÍG¼fÐ¾_Æ¾´S?XTD<éGc?´d/¾õk?½,²>  ¿¢zÍ¼ä:¼o:N+Ø¾`®¿¡,?º>Óã>rgU¿ïý¼k.¿  ¿^n2½¹:<ÍG¼fÐ¾_Æ>´S?S³W>n?ÞSb¿8×v="Dí¾  ¿^n2½ä:¼ÍG¼fÐ¾_Æ¾´S?S³W>Óã>ÞSb¿8×v½"Dí¾  ¿¢zÍ¼¹:<o:N+Ø¾`®?¡,?º>n?rgU¿ïý<k.¿  ¿<J½xáÛ¼vy+½+¿êT¿¨úZ¾Û÷¸>ö	?êÍ¿X¨?d(¿  ¿fu½é½¡+½#¿[2¸½C¿üm¯>®,?âam<íÖ}?5ì¾  ¿'½Ùº¼	õ¼¡C¿[#ù½2â"?üm¯>w?Äâ ¿°:?a@í¾  ¿,N½á<:¼°Î¬¾KD>¬ík?Ä\?ob8>âlg?dâS¾¿>  ¿a½é=r¦¼X¿<>[?ÂÂU? >±ÿV?gK¾öS?  ¿&ìs½D<õE¾¼	t¿|ò­=S?á%T?°?>¦<N?fÌ@¾lÍ?  ¿A÷@½é=?¾¼â¾E:É³}?Ä\?X7þ=Âvx?ÜN¾zL>  ¿^n2½¹:<ÍG¼fÐ¾_Æ>´S?­>Ü*?JâÏ¾åHc¿¬Ã]>  ¿¢zÍ¼¹:<o:N+Ø¾`®?¡,?­>®,?ðÇ¾^J¿úéð>  ¿ëo¼Ý<.ý¯¼{ü>¡T>?2¿ç¾M>zm
?n¾&!?á8?  ¿»!<åO<7BN¾?8N?Üò%?÷­¾>e½ï> 8G?£EÖ¾  ¿ëo¼Ý<.ý¯¼{ü>¡T>?2¿ç¾)Y:?ÓO>ó¥>K6¿¬L¿  ¿¢zÍ¼¹:<o:N+Ø¾`®?¡,?Üò%?Î >Èò>	K?	¿  ¿SÌ»Y®<âUT¼«ô>J?k:Ã¾Ý±8?Ù_¦>ÜÜ=ö÷¾Y\^¿  ¿»!<åO<7BN¾?8N?ñR?+%?³2K?ÂC?e_J¾  ¿÷c<¿U<%ÆW;e :?<®-?Þ¢Þ½7`?+%?b³>v\ ¿»J¿  ¿SÌ»Y®<âUT¼«ô>J?k:Ã¾q_?8º?«%?]¿eë¾  ¿ñÈ½?=;ÜUZ½Òç}¿Øÿ<Ðý½âV1?Ì}r>Cý<à?e(};  ¿^¨´½Ù:¼Ò7½$+¿»Û
¿±?Üò%?T>ÞÝ¾{W?y§>  ¿^¨´½Ä:<Ò7½$+¿»Û
?±?áî8?T>ÞÝ>{W?y§¾  ¿ñÈ½=»ÜUZ½Òç}¿Øÿ¼Ðý½Û-?Ì}r>Cý¼à?e(}»  ¿½É:=ó¼ÎH¿    É?ìb?0b§>      ?      ¿fu½ü/i=¡+½ª,¿    ë=¿îk?ú>      ?      ¿fu½É:=¡+½ª,¿    ë=¿ìb?ú>      ?      ¿½ü/i=ó¼ÎH¿    É?îk?0b§>      ?      ¿A÷@½É:=?¾¼µ1Î½E<°~?ÿU?lêx?oJw: ý?¹¼  ¿a½ü/i=r¦¼{¿    n¼Z?_?kñq?      ?      ¿a½É:=r¦¼{¿    n¼Z?ÿU?kñq?      ?      ¿A÷@½ü/i=?¾¼µR¶½    Èû~?_?lêx?      ?      ¿½é=ó¼ÎH¿    É?ÓÞ`?Ãd?Ç4  ?V4Á4  ¿fu½2;£=¡+½ª,¿    ë=¿Õ\j?8º?q©¦4  ?´  ¿fu½é=¡+½ª,¿    ë=¿ÓÞ`?8º?      ?      ¿½2;£=ó¼ÎH¿    É?Õ\j?Ãd?(5  ?·ë*5  ¿A÷@½é=?¾¼µR¶½    Èû~?×Û?á%x?      ?      ¿a½2;£=r¦¼{¿    n¼Z?ÚY$?à,q?      ?      ¿a½é=r¦¼{¿    n¼Z?×Û?à,q?      ?      ¿A÷@½2;£=?¾¼µR¶½    Èû~?ÚY$?á%x?      ?      ¿A÷@½Ëº=?¾¼µR¶½    Èû~?,é>íF?î&2  ?$Ï0  ¿a½>r¦¼¹ZÆ¾W*?=#?×¢%?ô??áC±>Òá>?Á¿  ¿a½Ëº=r¦¼{¿    n¼Z?,é>ô??      ?      ¿>÷@½>?¾¼ !½ø'?G(A?×¢%?íF?n=síA?t&¿  ¿½Ëº=ó¼ÎH¿    É?F³Ú>	>      ?      ¿du½>¡+½+4¿^
?`¿dv?\æ´=Zº>ibW?`dÌ>  ¿du½Ëº=¡+½ª,¿    ë=¿F³Ú>\æ´=      ?      ¿½>ó¼Ð¿(,?Þ
ë>dv?	>§	?Éw=?0Õ¾  ¿a½Ïº½ r¦¼{¿    n¼Z?)´ì=¥»c?n¼Z¿    {¿  ¿½6;£½ó¼ÎH¿    É?|$>¨9m?É¿    ÎH¿  ¿½Ïº½ó¼ÎH¿    É?|$>¥»c?É¿    ÎH¿  ¿a½6;£½ r¦¼{¿    n¼Z?)´ì=¨9m?n¼Z¿    {¿  ¿a½¾ r¦¼¹ZÆ¾W*¿=#?0ñ=s1?ÛC±¾Òá>?Á?  ¿½Ïº½ó¼ÎH¿    É?Î5>¬â%?      ?      ¿½¾ó¼Ð¿(,¿Þ
ë>0ñ=¬â%?§	¿Éw=?0Õ>  ¿a½Ïº½ r¦¼{¿    n¼Z?Î5>s1?      ?      ¿½¾ó¼Ð¿(,¿Þ
ë>M>.U%?§	¿Éw=?0Õ>  ¿gu½Ïº½¡+½ª,¿    ë=¿­½ç>ª?      ?      ¿gu½¾¡+½+4¿^
¿`¿M>ª?Zº¾ibW?`dÌ¾  ¿½Ïº½ó¼ÎH¿    É?­½ç>.U%?      ?      ¿½Ïº½Ío¼uKz?    øúV>Ç,k?<J9?55Ð³  ?åhò4  ¿D÷@½6;£½?¾¼µR¶½    Èû~?Éªt?ÓÝ1?Ò3  ?q:<1  ¿D÷@½Ïº½D¾¼µR¶½    Èû~?Ç,k?ÓÝ1?úÀ3  ?»½Þ1  ¿½6;£½Ío¼uKz?    øúV>Éªt?<J9?      ?      ¿½¾Ío¼jQ?í¿
4>,é>.U%?(Ï?­_V?Áë=  ¿D÷@½Ïº½D¾¼µR¶½    Èû~?×¢%?Äè?Ôµó3  ?#C.2  ¿D÷@½¾D¾¼ !½ø'¿G(A?,é>Äè?Ån½síA?t&?  ¿½Ïº½Ío¼uKz?    øúV>×¢%?.U%?¿1  ?}þÞ²  ¿D÷@½¾D¾¼ !½ø'¿G(A?b»{>íF?Ån½síA?t&?  ¿a½Ïº½ r¦¼{¿    n¼Z?à>ô??      ?      ¿a½¾ r¦¼¹ZÆ¾W*¿=#?b»{>ô??ÛC±¾Òá>?Á?  ¿D÷@½Ïº½D¾¼µR¶½    Èû~?à>íF?      ?      ¿a½é½ r¦¼{¿    n¼Z?ä0X>Lo?      ?      ¿½0i½ó¼ÎH¿    É?í(~>¥»c?      ?      ¿½é½ó¼ÎH¿    É?ä0X>¥»c?      ?      ¿a½0i½ r¦¼{¿    n¼Z?í(~>Lo?      ?      ¿a½6;£½ r¦¼{¿    n¼Z?6ï>µûa?n¼Z¿    {¿  ¿½é½ó¼ÎH¿    É?uZ?·yk?É¿    ÎH¿  ¿½6;£½ó¼ÎH¿    É?uZ?µûa?É¿    ÎH¿  ¿a½é½ r¦¼{¿    n¼Z?6ï>·yk?n¼Z¿    {¿  ¿½6;£½ó¼ÎH¿    É?/Ñ>}²j?      ?      ¿gu½é½¡+½ª,¿    ë=¿3ä>á_?      ?      ¿gu½6;£½¡+½ª,¿    ë=¿/Ñ>á_?      ?      ¿½é½ó¼ÎH¿    É?3ä>}²j?      ?      ¿½é½Ío¼uKz?    øúV>k?Ãd?      ?      ¿D÷@½0i½?¾¼µR¶½    Èû~?t?jø?      ?      ¿D÷@½é½?¾¼µR¶½    Èû~?k?jø?      ?      ¿½0i½Ío¼uKz?    øúV>t?Ãd?      ?      ¿½6;£½Ío¼uKz?    øúV>fLi?SÍ>      ?      ¿D÷@½é½?¾¼µR¶½    Èû~?hÊr?X7þ=      ?      ¿D÷@½6;£½?¾¼µR¶½    Èû~?fLi?X7þ=      ?      ¿½é½Ío¼uKz?    øúV>hÊr?SÍ>      ?      ¿D÷@½6;£½?¾¼µR¶½    Èû~?3j?­ßt?ü¦°¹ÿÿ?_ ü·  ¿a½é½ r¦¼{¿    n¼Z?Ìt?uçm?¦¹ÿÿ?ù\;¹  ¿a½6;£½ r¦¼{¿    n¼Z?Êj?æm?¦¹ÿÿ?ù\;¹  ¿D÷@½é½?¾¼µR¶½    Èû~?5t?àt?ü¦°¹ÿÿ?_ ü·  ¿a½Ð:½r¦¼{¿    n¼Z?Ü/>Lo?      ?      ¿½é½ó¼bÝE¿dk½ÄÄ!?æU>¥»c?£<6½±?Þý=  ¿½Ð:½ó¼ÎH¿    É?Ü/>¥»c?      ?      ¿a½é½r¦¼X¿¼>[?æU>Lo?»ß¢»ïü?~ü<  ¿a½0i½ r¦¼{¿    n¼Z?­ÀL?Ðµk?»Ü5  ?ë¡4  ¿½Ð:½ó¼ÎH¿    É?¯>V?ö$`?ãÎ4  ?7Ñ5  ¿½0i½ó¼ÎH¿    É?­ÀL?ö$`?(4  ?³ëª4  ¿a½Ð:½r¦¼{¿    n¼Z?¯>V?Ðµk?u5  ?Òó¥4  ¿½0i½ó¼ÎH¿    É?ìb?ïåÞ>Ç4  ?M4A4  ¿gu½Ð:½¡+½ª,¿    ë=¿îk?¸Ç>p©&4  ?´  ¿gu½0i½¡+½ª,¿    ë=¿ìb?¸Ç>      ?      ¿½Ð:½ó¼ÎH¿    É?îk?ïåÞ>(4  ?³ëª4  ¿½Ô:½Ío¼Û`z?_PºpjU>ñR?XË?Õ·»5á?,Ùö<  ¿D÷@½ é½?¾¼/Ú¾nº´}?o\?î^
?8G<áú?;U8;  ¿D÷@½Ð:½?¾¼µ1Î½E¼°~?ñR?î^
?oJwº ý?¹<  ¿w ½óÃ¼
¼â2ë>¸&¿å¡?_e?ù?Ù»>D(B?ûæ	?  ¿½0i½Ío¼uKz?    øúV>Åk?ÄÍM?      ?      ¿D÷@½Ð:½?¾¼µ1Î½E¼°~?Cu?[aF?oJwº ý?¹<  ¿D÷@½0i½?¾¼µR¶½    Èû~?Åk?[aF?      ?      ¿½Ô:½Ío¼Û`z?_PºpjU>Cu?ÄÍM?qK:ûÿ?yh-9  ¿D÷@½0i½?¾¼µR¶½    Èû~?)o?<<?Èû~¿;Ì5·R¶½  ¿a½Ð:½r¦¼{¿    n¼Z?;v?ºE?n¼Z¿>Ä4{¿  ¿a½0i½ r¦¼{¿    n¼Z?;v?<<?n¼Z¿Ä¥s5{¿  ¿D÷@½Ð:½?¾¼µ1Î½E¼°~?)o?ºE?¡²~¿ÿT»ª?Î½  ¿'»%½¿5¼*Ô¼øAÔ¼óýÑ¾+bi?.;l?^Ù>
Úv¿ºÏk¾Ó&¾  ¿b]S½ä:¼[¼uÓö¾|z1¾Û[?.u?û²ä>áe\¿ß[´½fD ¿  ¿,N½á¼:¼°Î¬¾KD¾¬ík?!®t?uÚ>"fj¿Æ3$¾£Ã¼¾  ¿^n2½ä:¼ÍG¼fÐ¾_Æ¾´S?m?û²ä>-c¿C×>½iÑê¾  ¿D÷@½ é½?¾¼/Ú¾nº´}?@]?X7þ=´î<¿sâ*??:Ê½  ¿w ½óÃ¼
¼â2ë>¸&¿å¡?@]?I->¨+"¿2)r>·<?  ¿,N½á¼:¼°Î¬¾KD¾¬ík?'¥h?ÁÊ!>½Ä8¿-c.?y(û½  ¿D÷@½ é½?¾¼/Ú¾nº´}?"O²=]âH?õp¿*( ¾TZ¾  ¿)ìs½T¼õE¾¼	t¿|ò­½S?-zç=ÐÒY?ÂVG¿if¾Öî¿  ¿a½é½r¦¼X¿¼>[?-zç=rþJ?+²P¿q¸¾5ºû¾  ¿,N½á¼:¼°Î¬¾KD¾¬ík?äÙ¥=:W?Õ4^¿ò¡¾ZÄ¾  ¿)ìs½T¼õE¾¼	t¿|ò­½S?LÅb?½âé=
Ç]½?~=  ¿ê½ä:¼<î½fr'¿usñ½½F??ïªg?Å=>ÿ½ä6~?éu·=  ¿'½Ùº¼	õ¼¡C¿[#ù½2â"?x(^?Æ¾¤= ´½é~?y­=  ¿.u½ä:¼A¹¼¿ú½R?ïªg?û ë=ð>:½Km?oÚH=  ¿a½é½r¦¼X¿¼>[?,é>vTa?ue¾òis?ÌÇ¾  ¿'½Ùº¼	õ¼¡C¿[#ù½2â"?â?ò±W?f&¾£^s?`}¾  ¿½é½ó¼bÝE¿dk½ÄÄ!?\ð>èLV?õa¾	Qu?:¾  ¿)ìs½T¼õE¾¼	t¿|ò­½S?uZ?vTa?ñ5¾Ðr?ûÔ½  ¿'½Ùº¼	õ¼¡C¿[#ù½2â"?9)h?ïYw>á¿É8?½³ð¾  ¿fu½é½¡+½#¿[2¸½C¿9)h?,.>>uB½ð~?È½  ¿½é½ó¼bÝE¿dk½ÄÄ!?ãO`?´`>ø8î¾|:?®º ¿  ¿&ìs½D<õE¾¼	t¿|ò­=S?S?û1?$>§r?±J×=  ¿½é=ó¼bÝE¿dk=ÄÄ!?Év^?nü%?íe>êÊt?Ñ.@>  ¿'½Äº<	õ¼¡C¿[#ù=2â"?ãT?ga'?lQ>±t?ó0>  ¿a½é=r¦¼X¿<>[?áña?û1?¥>|¾s?z«>  ¿.u½¹:<A¹¼¿ú=R?8
?*_?F÷R¿(á;#¿  ¿'½Äº<	õ¼¡C¿[#ù=2â"?W?¬h?ª$¿	È¯¼øD¿  ¿ê½¹:<<î½fr'¿usñ=½F??ø©?*_?©@¿mÏ»Å(¿  ¿&ìs½D<õE¾¼	t¿|ò­=S?È_
?»d?Ò;T¿¸<"¿  ¿ê½ä:¼<î½fr'¿usñ½½F??XTD<}Z?!d9¿		Ä>'Ô¿  ¿^¨´½Ù:¼Ò7½$+¿»Û
¿±?$}=ÊÂS?=¿¸Öá>wÖ¿  ¿<J½xáÛ¼vy+½+¿êT¿¨úZ¾XTD<RK?¡¹<¿¶À?ù=Æ¾  ¿,N½á<:¼°Î¬¾KD>¬ík?7Q?*_?É>¶$v?ÌÖÛ½  ¿t ½âÃ<
¼â2ë>¸&?å¡?¥?Zh?Ð¾£??!¬¿  ¿A÷@½é=?¾¼â¾E:É³}?×¢%?*_?>D>ê/{?iÊ<  ¿^n2½¹:<ÍG¼fÐ¾_Æ>´S?+b??Êe¿è°»«á¾  ¿,N½á<:¼°Î¬¾KD>¬ík?.Yi?øÆ$? %p¿ÁR<óC±¾  ¿b]S½¹:<V¼uÓö¾|z1>Û[?¶1j?¯µ?3`¿a½,¬ô¾  ¿'»%½¯5<%Ô¼øAÔ¼óýÑ>+bi?ÓÞ`?øÆ$?´*{¿HZ(>>Ð½  ¿b]S½¹:<V¼uÓö¾|z1>Û[?hçh?fÌ=¾h_¿hÎ¼sõù¾  ¿&ìs½D<õE¾¼	t¿|ò­=S?^õp?Øºô=ìT¿Ï¼#¨¿  ¿.u½¹:<A¹¼¿ú=R?^õp?Í= .S¿ñ¼î¿  ¿,N½á<:¼°Î¬¾KD>¬ík?/Rh?´Yõ=sõo¿3°<Ò²¾  ¿a½É:=r¦¼{¿    n¼Z?@¢=?ÄÍm?      ?      ¿½ü/i=ó¼ÎH¿    É?C G?ê<b?      ?      ¿½É:=ó¼ÎH¿    É?@¢=?ê<b?      ?      ¿a½ü/i=r¦¼{¿    n¼Z?C G?ÄÍm?      ?      ¿a½é=r¦¼X¿<>[?J&?ê<b?! [¿µr ;ì¿  ¿½É:=ó¼ÎH¿    É?ðÚ1?íºk?É¿ãU¤4ÎH¿  ¿½é=ó¼bÝE¿dk=ÄÄ!?ðÚ1?ê<b?z "¿´0
¼IF¿  ¿a½É:=r¦¼{¿    n¼Z?J&?íºk?n¼Z¿    {¿  ¿½é=ó¼bÝE¿dk=ÄÄ!?ìb?ÄÀ>£<6=±?Þý½  ¿fu½É:=¡+½ª,¿    ë=¿îk?¯°¨>      ?      ¿fu½é=¡+½#¿[2¸=C¿ìb?¯°¨>Ll=eö~?"P=  ¿½É:=ó¼ÎH¿    É?îk?ÄÀ>      ?      ¿½É:=Èo¼Ü`z?HH:qjU>öïz;þHu?µCºûÿ?ÄÓ&¹  ¿A÷@½ü/i=?¾¼µR¶½    Èû~?&'=Üm?=ò5  ?cÝW3  ¿A÷@½É:=?¾¼µ1Î½E<°~?öïz;Üm?oJw: ý?¹¼  ¿½ü/i=Èo¼uKz?    øúV>&'=þHu?ÉÎ93  ?tTX´  ¿t ½âÃ<
¼â2ë>¸&?å¡? EY?ô??b¿i>ÔÆ>  ¿A÷@½É:=?¾¼µ1Î½E<°~?ù`?öR?Û²~¿ÇF»ø$Î½  ¿A÷@½é=?¾¼â¾E:É³}?ù`?óH?b³}¿hÖ}»£à¾  ¿½É:=Èo¼Ü`z?HH:qjU>ÁY?öR?²jU¾Bäö:¿`z?  ¿A÷@½é=?¾¼â¾E:É³}?Ûo	?á%x?â"9õÿ?¥º  ¿a½É:=r¦¼{¿    n¼Z?Ýí?à,q?      ?      ¿a½é=r¦¼X¿<>[?Ûo	?à,q?»ß¢;ïü?~ü¼  ¿A÷@½É:=?¾¼µ1Î½E<°~?Ýí?á%x?oJw: ý?¹¼  ¿a½é=r¦¼{¿    n¼Z? b?û1?>là4  ?¶v4  ¿½2;£=ó¼ÎH¿    É?"l?!s%?(4  ?HÀ4  ¿½é=ó¼ÎH¿    É? b?!s%?(5  ?·ë*5  ¿a½2;£=r¦¼{¿    n¼Z?"l?û1?      ?      ¿a½ü/i=r¦¼{¿    n¼Z?02?ÄÍm?      ?      ¿½é=ó¼ÎH¿    É?2 <?ê<b?      ?      ¿½ü/i=ó¼ÎH¿    É?02?ê<b?      ?      ¿a½é=r¦¼{¿    n¼Z?2 <?ÄÍm?      ?      ¿½ü/i=ó¼ÎH¿    É?ìb?÷>      ?      ¿fu½é=¡+½ª,¿    ë=¿îk?n4à>      ?      ¿fu½ü/i=¡+½ª,¿    ë=¿ìb?n4à>      ?      ¿½é=ó¼ÎH¿    É?îk?÷>      ?      ¿½é=Èo¼uKz?    øúV>3j?YÁc?ýúV¾    uKz?  ¿A÷@½2;£=?¾¼µR¶½    Èû~?õq?[?m?Èû~¿    ´R¶½  ¿A÷@½é=?¾¼µR¶½    Èû~?õq?YÁc?Èû~¿    ´R¶½  ¿½2;£=Èo¼uKz?    øúV>3j?[?m?ýúV¾    uKz?  ¿½ü/i=Èo¼uKz?    øúV>3j?oW?ýúV¾    uKz?  ¿A÷@½é=?¾¼µR¶½    Èû~?õq?í`?Èû~¿    ´R¶½  ¿A÷@½ü/i=?¾¼µR¶½    Èû~?õq?oW?Èû~¿    ´R¶½  ¿½é=Èo¼uKz?    øúV>3j?í`?ýúV¾    uKz?  ¿A÷@½ü/i=?¾¼µR¶½    Èû~?ñc`?òv?      ?      ¿a½é=r¦¼{¿    n¼Z?ôái?rùo?      ?      ¿a½ü/i=r¦¼{¿    n¼Z?ñc`?rùo?      ?      ¿A÷@½é=?¾¼µR¶½    Èû~?ôái?òv?      ?      ¿½Ëº=Èo¼uKz?    øúV>Ë|>!½>î2  ?ÞE³  ¿>÷@½>?¾¼ !½ø'?G(A?FAà>éH®>Ën=síA?t&¿  ¿A÷@½Ëº=?¾¼µR¶½    Èû~?Ë|>éH®>J4  ?"2  ¿½>Èo¼jQ?í?
4>FAà>!½>(Ï¿­_V?Âë½  ¿½2;£=Èo¼uKz?    øúV>ïþh?ÉW=      ?      ¿A÷@½Ëº=?¾¼µR¶½    Èû~?ò|r?÷è=      ?      ¿A÷@½2;£=?¾¼µR¶½    Èû~?ïþh?÷è=      ?      ¿½Ëº=Èo¼uKz?    øúV>ò|r?ÉW=      ?      ¿A÷@½2;£=?¾¼µR¶½    Èû~?b¾l?3l,?^ö5  ?Ê	_3  ¿a½Ëº=r¦¼{¿    n¼Z?d<v?!s%?C+4  ?ª´<4  ¿a½2;£=r¦¼{¿    n¼Z?b¾l?!s%?E[@5  ?=îé4  ¿A÷@½Ëº=?¾¼µR¶½    Èû~?d<v?3l,?      ?      ¿a½Ëº=r¦¼{¿    n¼Z?0ñ=m;%?      ?      ¿½>ó¼Ð¿(,?Þ
ë>Î5>ª?§	?Éw=?0Õ¾  ¿½Ëº=ó¼ÎH¿    É?0ñ=ª?      ?      ¿a½>r¦¼¹ZÆ¾W*?=#?Î5>m;%?ÛC±>Òá>?Á¿  ¿a½2;£=r¦¼{¿    n¼Z?ñc`?3Ro?_eØ4  ?74  ¿½Ëº=ó¼ÎH¿    É?ôái?YÁc?f14  ?/W`4  ¿½2;£=ó¼ÎH¿    É?ñc`?YÁc?      ?      ¿a½Ëº=r¦¼{¿    n¼Z?ôái?3Ro?E[@5  ?=îé4  ¿½2;£=ó¼ÎH¿    É?Z a?öR?Dk4  ?£4  ¿du½Ëº=¡+½ª,¿    ë=¿\k?[aF?G¢Ø4  ?{ºÅ´  ¿fu½2;£=¡+½ª,¿    ë=¿Z a?[aF?Û¥?5  ?Dì.µ  ¿½Ëº=ó¼ÎH¿    É?\k?öR?      ?      ¿'»%½¯5<%Ô¼øAÔ¼óýÑ>+bi?W#3?èÞÃ=>s¿¾G¾G!×=  ¿^n2½¹:<ÍG¼fÐ¾_Æ>´S?`7?3N£=ÅY¿ÅNþ¾oå<¾  ¿ëo¼Ý<.ý¯¼{ü>¡T>?2¿ç¾?3N£=W¿<Ã
?¿¼  ¿ëo¼)Ý¼.ý¯¼{ü>¡T>¿2¿ç¾ñK>?Çk?W¿<Ã
¿'¿¼  ¿^n2½ä:¼ÍG¼fÐ¾_Æ¾´S?úÐµ>?Çk?ÅY¿ÆNþ>nå<¾  ¿'»%½¿5¼*Ô¼øAÔ¼óýÑ¾+bi?yW­>(µg?>s¿¿G>H!×=  ¿,N½á<:¼°Î¬¾KD>¬ík?VE?T>ÄW¿¨ ¿P¾  ¿'»%½¯5<%Ô¼øAÔ¼óýÑ>+bi?Ef>?lC>O!i¿Å¾d?>  ¿t ½âÃ<
¼â2ë>¸&?å¡? 9?T>äO¿ÉÏ<ëq?  ¿w ½óÃ¼
¼â2ë>¸&¿å¡?5Ïé>qË?ÜO¿0ÇÏ¼öq?  ¿'»%½¿5¼*Ô¼øAÔ¼óýÑ¾+bi?~oó>eª?J!i¿*Å>w?>  ¿,N½á¼:¼°Î¬¾KD¾¬ík?¨ ?qË?¿W¿¨ ?P¾  ¿t ½âÃ<
¼â2ë>¸&?å¡?Ð7?¥?ç_¿KîR>Aâ>  ¿'»%½¯5<%Ô¼øAÔ¼óýÑ>+bi?a:?L ?»N~¿æ½Â¦·<  ¿ëo¼Ý<.ý¯¼{ü>¡T>?2¿ç¾þò%?L ?¿°Y¿ê?(»½  ?ëo¼)Ý¼.ý¯¼{ü>¡T>¿2¿ç¾_§>é`e?Á°Y¿æ¿w»½  ?'»%½¿5¼*Ô¼øAÔ¼óýÑ¾+bi?°<Ð>é`e?»N~¿æ=ü¦·<  ¿w ½óÃ¼
¼â2ë>¸&¿å¡?ÆË>á_?ç_¿GîR¾Aâ>  ¿<J½gáÛ<vy+½+¿êT?¨úZ¾SvR?¡+9?ÁêP???ð8>  ¿Ñ½^¯U<ü½ò=â«ô>ÿ_¿ÝïH?nü%?ÿ3? ?GÆ>  ¿^¨´½Ä:<Ò7½$+¿»Û
?±?N(@?¡+9?/?s±6?H|>  ¿<J½xáÛ¼vy+½+¿êT¿¨úZ¾i ;?F«>ïÀ ¿a?Ê=¿  ¿^¨´½Ù:¼Ò7½$+¿»Û
¿±?n¥K?þº>Ás;¿??í©¾  ¿Ñ½~¯U¼ü½ò=â«ô¾ÿ_¿n¥K?ÓO>	¸ì¾Û£B?¶é¾  ¿w ½óÃ¼
¼â2ë>¸&¿å¡?Çbë>×¥>æ¶a¿^Õ¾äb>  ¿<J½xáÛ¼vy+½+¿êT¿¨úZ¾ÅV?:>J> ¿Ø´=ß;\?  ¿Ñ½~¯U¼ü½ò=â«ô¾ÿ_¿Çbë>Vº>xí5¿^$¿C>  ¿Ñ½^¯U<ü½ò=â«ô>ÿ_¿Iê>Vº>|í5?^$¿~C¾  ¿<J½gáÛ<vy+½+¿êT?¨úZ¾dÉÌ>:>J> ?´=Ú;\¿  ¿t ½âÃ<
¼â2ë>¸&?å¡?Iê>×¥>å¶a?	^Õ¾Õb¾  ¿Ñ½~¯U¼ü½ò=â«ô¾ÿ_¿g>â<Ä>ú*l¿"Ã>þ¦z¾  ¿ëo¼)Ý¼.ý¯¼{ü>¡T>¿2¿ç¾u?§:â<Ä>@e9¿ïn{½yÕ/¿  ¿w ½óÃ¼
¼â2ë>¸&¿å¡?|C=TÄá>'Y/¿fS1¿%Tg¾  ¿t ½âÃ<
¼â2ë>¸&?å¡?ýØ>â<Ä>'Y/¿fS1?#Tg¾  ¿ëo¼Ý<.ý¯¼{ü>¡T>?2¿ç¾ j>TÄá>Be9¿o{=xÕ/¿  ¿Ñ½^¯U<ü½ò=â«ô>ÿ_¿þ*è>TÄá>û*l¿Ã¾ù¦z¾  ¿· ½º» y½ÈÑ'¿¼E#?2Ï¾Þr?øÆ$?
Fª>|9?«?  ¿Ñ½~¯U¼ü½ò=â«ô¾ÿ_¿õØj?ep ?£¾6U?·sõ¾  ¿Â½,BP¼¥}|½Û¾t"7¿6ì$¿ql?øÆ$?,3¿6Å$?2áé¾  ¿Ñ½6 ¼ü½i">    qÂ|¿÷o?/?¾ûrw?¼&½  ¿ëo¼)Ý¼.ý¯¼{ü>¡T>¿2¿ç¾©Ø¸>×©>Sý¾µ*¿Å?  ¿Ñ½^¯U<ü½ò=â«ô>ÿ_¿µü>vQ>ß[>Øw]¿,è¾  ¿ëo¼Ý<.ý¯¼{ü>¡T>?2¿ç¾µü>!x¬>?ð§*¿uºâ¾  ¿Ñ½û5 <ü½i">    qÂ|¿"Ç>®>:Gl>?éx¿Ò=  ¿Ñ½ò*;ü½i">    qÂ|¿=b¤>Ù>Ã½=×à~¿îþr<  ¿Ñ½ó*»ü½i">    qÂ|¿¶¹±>Vº>.3^½¿±Æ¼  ¿Ñ½6 ¼ü½i">    qÂ|¿3Ã¾>È
>.H¾îz¿Ð  ½  ¿Ñ½~¯U¼ü½ò=â«ô¾ÿ_¿åzË>à>íË·¾	U¿ìdØ>  ¿ëo¼Ý<.ý¯¼{ü>¡T>?2¿ç¾*h>%T?¿Ò3+?ÜÑ ?  ¿SÌ»o®¼âUT¼«ô>J¿k:Ã¾)´ì=]âH?³Z??'¶ü¾  ¿ëo¼)Ý¼.ý¯¼{ü>¡T>¿2¿ç¾, ð=%T??Ò3+?ÜÑ ¿  ¿SÌ»Y®<âUT¼«ô>J?k:Ã¾,j>]âH?³Z¿?'¶ü>  ¿SÌ»Y®<âUT¼«ô>J?k:Ã¾??U8?³Z¿?'¶ü>  ¿÷c<9¿U¼%ÆW;e :?<®-¿Þ¢Þ½°&?nü%?ÆÄ+?i<?Í½  ¿SÌ»o®¼âUT¼«ô>J¿k:Ã¾Év"?U8?³Z??'¶ü¾  ¿÷c<¿U<%ÆW;e :?<®-?Þ¢Þ½8Ü;?nü%?ÆÄ+¿i<?Í=  ¿îÀ<½7¼P(W<îó!?^ZÆ¾¬+?±M?:°ü>ï>.l?H>  ¿÷c<¿U<%ÆW;e :?<®-?Þ¢Þ½ªe_?P?ÆÄ+¿i<?Í=  ¿îÀ<7<P(W<îó!?^ZÆ>¬+?¼Y[?:°ü>ï¾.l?H¾  ¿÷c<9¿U¼%ÆW;e :?<®-¿Þ¢Þ½"¥I?P?ÆÄ+?i<?Í½  ¿SÌ»o®¼âUT¼«ô>J¿k:Ã¾8]?ªá<S¹`¿mä¾â2¾  ¿÷c<9¿U¼%ÆW;e :?<®-¿Þ¢Þ½ãR?-¯=Z/¿7E:¿½½  ¿»­!¼åO<7BN¾¿8N?8]?û ë= þy¿6>ø½  ¿÷c<9¿U¼%ÆW;e :?<®-¿Þ¢Þ½×Ý¼>)f?µÜ/¿ðÓ6¿f	¾  ¿îÀ<½7¼P(W<îó!?^ZÆ¾¬+?/º>vo?FÁC¿Ñ=æ¾ Uì>  ¿»­!¼åO<7BN¾¿8N?°<Ð>vo?C¶x¿<¨rr¾  ¿w ½óÃ¼
¼â2ë>¸&¿å¡?ZFº>®,?ª~0¿P°0¿éa¾  ?fu½é½¡+½#¿[2¸½C¿R| ?YQ?ÚñD¿wB=6³"?  ¿<J½xáÛ¼vy+½+¿êT¿¨úZ¾¨ ?®,?@å$¿ºr	?Éy¿  ?½Ô:½Ío¼Û`z?_PºpjU>ã¾>1$?áQ>ð5¾ýfv¿  ¿½Ô:½Ío¼Û`z?_PºpjU> j>Øö>ñiU>1QþºÇ`z¿  ¿gu½Ð:½¡+½ª,¿    ë=¿Û÷¸>Øö>í=¿Ï¬Ô5©,?  ¿fu½é½¡+½#¿[2¸½C¿Û÷¸>Óã>K®?¿>ß0?  ¿½0i½Ío¼uKz?    øúV> j>n?ôúV>J5uKz¿  ¿gu½0i½¡+½ª,¿    ë=¿	>Øö>í=¿Ï¬T5©,?  ¿½0i½Ío¼uKz?    øúV>u?§:Øö>ôúV>J5uKz¿  ¿½é½Ío¼uKz?    øúV>u?§:n?ôúV>J5uKz¿  ¿gu½Ð:½¡+½ª,¿    ë=¿	>Óã>í=¿Ï¬T5©,?  ¿½é½Ío¼uKz?    øúV>F³Ú>"=ôúV>    uKz¿  ¿gu½é½¡+½ª,¿    ë=¿YM?"=í=¿    ©,?  ¿gu½0i½¡+½ª,¿    ë=¿YM?u?§:í=¿    ©,?  ¿½6;£½Ío¼uKz?    øúV>F³Ú>$}=ôúV>    uKz¿  ¿½6;£½Ío¼uKz?    øúV>ZFº>Øö>ôúV>    uKz¿  ¿gu½6;£½¡+½ª,¿    ë=¿Ç-þ>Øö>í=¿    ©,?  ¿gu½é½¡+½ª,¿    ë=¿Ç-þ>Óã>í=¿    ©,?  ¿½Ïº½Ío¼uKz?    øúV>ZFº>n?ôúV>    uKz¿  ¿gu½Ïº½¡+½ª,¿    ë=¿ÁE>	>vva3  ?lÉM³  ¿½Ïº½Ío¼uKz?    øúV>ÁE>u?§:ÈP¹1  ?ÁÁ×²  ¿½¾Ío¼jQ?í¿
4>u?§:u?§:(Ï?­_V?½ë=  ¿gu½6;£½¡+½ª,¿    ë=¿¹k>	>      ?      ¿½¾Ío¼jQ?í¿
4>Vn>u?§:(Ï?­_V?Âë=  ¿gu½¾¡+½+4¿^
¿`¿Vn>	>Zº¾ibW?`dÌ¾  ¿gu½Ïº½¡+½ª,¿    ë=¿ÇdÙ>	>      ?      ¿a½¾ r¦¼¹ZÆ¾W*¿=#?X«&>d®T?¤W¿6Ò¼¬ò	¿  ?½¾Ío¼jQ?í¿
4>)´ì=Å[?@I¾àô+¿-¿  ?D÷@½¾D¾¼ !½ø'¿G(A?í>î^V?,j¿m¶¾Ð¾¾  ?gu½¾¡+½+4¿^
¿`¿í(~>Å[?Ók!¿7E??Á½  ?½¾ó¼Ð¿(,¿Þ
ë>xT>ÛOV?·97¿M>ªv.¿  ?<J½gáÛ<vy+½+¿êT?¨úZ¾éc>'?â'¿èü	¿E¿  ?½É:=Èo¼Ü`z?HH:qjU>u?§:®,?ªÐS>+á ¾àax¿  ¿t ½âÃ<
¼â2ë>¸&?å¡?u?§:D?¡S:¿jp*?k;(¾  ?fu½é=¡+½#¿[2¸=C¿1Ï
>þ?YS4¿Æï¾«?  ¿fu½é=¡+½#¿[2¸=C¿êìD?	>ös¿z-L¿»e¨>  ¿½ü/i=Èo¼uKz?    øúV>?ãÉ=ª,>ï¿I¿  ¿½É:=Èo¼Ü`z?HH:qjU>â«!?	>±?,>±â¿yI¿  ¿fu½É:=¡+½ª,¿    ë=¿«^B?ãÉ=þÐð¾äaE¿íÌÛ>  ¿½é=Èo¼uKz?    øúV> ¦=Ó??~ª,>ô¿I¿  ¿fu½É:=¡+½ª,¿    ë=¿,j>;H?üÐð¾åaE¿ëÌÛ>  ¿fu½ü/i=¡+½ª,¿    ë=¿íI`>Ó??ûÐð¾åaE¿êÌÛ>  ¿½ü/i=Èo¼uKz?    øúV>þº=;H?~ª,>ô¿I¿  ¿½2;£=Èo¼uKz?    øúV>Ù??P?->´¼~¿áÙÑ=  ¿fu½ü/i=¡+½ª,¿    ë=¿ãýH?ò}Á>ÿçB=Úw¿å1½  ¿fu½é=¡+½ª,¿    ë=¿Ù??Æ>÷çB=Úw¿å1½  ¿½é=Èo¼uKz?    øúV>ãýH?  ?5>´¼~¿êÙÑ=  ¿½Ëº=Èo¼uKz?    øúV>J&?ô??~ª,>õ¿I¿  ¿fu½é=¡+½ª,¿    ë=¿nL?ÒI? Ñð¾âaE¿ïÌÛ>  ¿fu½2;£=¡+½ª,¿    ë=¿I?ô??Ñð¾âaE¿ðÌÛ>  ¿½2;£=Èo¼uKz?    øúV>fØ(?ÒI?}ª,>ö¿I¿  ¿½>Èo¼jQ?í?
4>6®>ïp{>Áý¿Í=?É/¸>  ¿fu½2;£=¡+½ª,¿    ë=¿u?§:^Ùe>¤rî=¡Ì|?}£Ù½  ¿du½Ëº=¡+½ª,¿    ë=¿'=ïp{>Orî=£Ì|?0£Ù½  ¿½Ëº=Èo¼uKz?    øúV>Û=Vº>ÔX½eºw?Êr|>  ¿du½Ëº=¡+½ª,¿    ë=¿u?§:cîÂ>      ?      ¿du½>¡+½+4¿^
?`¿ÁE>cîÂ>Zº>ibW?`dÌ>  ¿½>Èo¼jQ?í?
4>ÁE>í~>(Ï¿­_V?Âë½  ¿½>Èo¼jQ?í?
4>)´ì=fc?AI¾áô+?-¿  ¿a½>r¦¼¹ZÆ¾W*?=#?X«&>5\?£W¿G6Ò<­ò	¿  ¿>÷@½>?¾¼ !½ø'?G(A?í>å]?Ej¿¶>¾¾  ¿du½>¡+½+4¿^
?`¿í(~>fc?Îk!¿
7E¿yÁ½  ¿½>ó¼Ð¿(,?Þ
ë>xT>|Ö]?±97¿dM¾²v.¿  ¿.u½¹:<A¹¼¿ú=R?²¼_?oW?wi=cp?,j_½  ¿b]S½ä:¼[¼uÓö¾|z1¾Û[?­ÀL?·}_?p¿­½* |?HÃ>  ¿b]S½¹:<V¼uÓö¾|z1>Û[?²¼_?·}_?¿­=* |??Ã¾  ¿.u½ä:¼A¹¼¿ú½R?­ÀL?oW?Qi½cp?Fj_=  ¿
÷ê¼o»aâ¼ÞrÉ½8æ¿Þ|I?ÚY$?ÎSi?´·u¿F¥>D>±=  ¿vu:o;äa%½GS?g ?3Ó=8
?ÆÂl?Rúï¾óX?æe,?  ¿
÷ê¼o;aâ¼ÞrÉ½8æ?Þ|I?LS$?ÆÂl?´·u¿F¥¾D>±=  ¿vu:o»äa%½GS?g ¿3Ó=>
?ÎSi?Rúï¾óX¿æe,?  ¿
÷ê¼o;aâ¼ÞrÉ½8æ?Þ|I?A"?jm?´·u¿F¥¾D>±=  ¿/»o;·\/½ÞrÉ=8æ?Þ|I¿s,?¡p?´·u¿F¥>D>±=  ¿ðy½o;*Wö¼GS¿g ?3Ó½ÚY$?¡p?Rúï¾óX¿æe,?  ¿vu:o;äa%½GS?g ?3Ó=Ûo	?jm?Rúï¾óX?æe,?  ¿ðy½o;*Wö¼GS¿g ?3Ó½uZ?÷ l?Rúï¾óX¿æe,?  ¿/»o»·\/½ÞrÉ=8æ¿Þ|I¿XqÒ>ïo?´·u¿F¥¾D>±=  ¿ðy½o»*Wö¼GS¿g ¿3Ó½çS?ïo?Rúï¾óX?æe,?  ¿/»o;·\/½ÞrÉ=8æ?Þ|I¿t~Ò>÷ l?´·u¿F¥>D>±=  ¿ðy½o»*Wö¼GS¿g ¿3Ó½C G?un?Rúï¾óX?æe,?  ¿vu:o»äa%½GS?g ¿3Ó=Ì`,?q?Rúï¾óX¿æe,?  ¿
÷ê¼o»aâ¼ÞrÉ½8æ¿Þ|I?2E?q?´·u¿F¥>D>±=  ¿/»o»·\/½ÞrÉ=8æ¿Þ|I¿Üò-?un?´·u¿F¥¾D>±=  ¿vu:o»äa%½GS?g ¿3Ó=ïþh?eÃ<¤?0ìT?Kú=  ¿/»o;·\/½ÞrÉ=8æ?Þ|I¿Tl?s¼=wª½!K?%²?  ¿vu:o;äa%½GS?g ?3Ó=Tl?eÃ<¤¿0ìT?Kú½  ¿/»o»·\/½ÞrÉ=8æ¿Þ|I¿ïþh?s¼=wª=!K?%²¿  ¿ðy½o»*Wö¼GS¿g ¿3Ó½.K?îg?Â½¾xV?ó¡D¿  ¿
÷ê¼o;aâ¼ÞrÉ½8æ?Þ|I?ÇG?,Dk?Ú´h¿¦>få£¾  ¿ðy½o;*Wö¼GS¿g ?3Ó½.K?,Dk?Â½¾xV¿ó¡D¿  ¿
÷ê¼o»aâ¼ÞrÉ½8æ¿Þ|I?ÇG?îg?Ú´h¿¦¾få£¾  ¿À½BP<¢}|½Û¾t"7?6ì$¿-zç=-Ðj?GæI>R92?c´0?  ¿Ñ½û5 <ü½i">    qÂ|¿Æ¾Ä=`sf?é¤T½X¥?Í¢¼  ¿· ½Åº; y½ÈÑ'¿¼E#¿2Ï¾¹=_íl?×¿²ÖD?Ì­¾  ¿Ñ½^¯U<ü½ò=â«ô>ÿ_¿-zç=Û0f?Ì	Ó½út`?#~ð>  ¿· ½Åº; y½ÈÑ'¿¼E#¿2Ï¾ß§>?^¢=#¿´7>Úí??  ¿Ñ½ò*;ü½i">    qÂ|¿ã39?èÞÃ=LÓp¿«w¾t¾¾  ¿Â½
&;¥}|½4o¿Wãx¾Ì¾©=?ÅTº= t¾©Fú½e¦v?  ¿Ñ½û5 <ü½i">    qÂ|¿W8?^¢=nÓp¿Óv¾¾¾  ¿Â½
&;¥}|½4o¿Wãx¾Ì¾Û÷¸>õ,?æ©¾Ì6£>«Ic?  ¿Ñ½ó*»ü½i">    qÂ|¿j½¯>Bx?rÂ|¿¢	¸i"¾  ¿Â½&»¥}|½4o¿Wãx>Ì¾Û÷¸>j?°ç©¾h>£¾Hc?  ¿Ñ½ò*;ü½i">    qÂ|¿j½¯>Þ?rÂ|¿½FF¸i"¾  ¿Â½&»¥}|½4o¿Wãx>Ì¾>óè>á¿¾xVu¿«¬=  ¿Ñ½6 ¼ü½i">    qÂ|¿Å>g,ª>ùr¾§x¿&½  ¿· ½º» y½ÈÑ'¿¼E#?2Ï¾Å>Wë>'¿9q?¿ø½  ¿Ñ½ó*»ü½i">    qÂ|¿ c~>NÓ§>Ör¾x¿´½  ¿	Æ½Ê<ëºa½Á-¿3
?Üþ¾Hm*?õºq?¯>Í/O?|÷?  ¿m¸½«;£èh½c=$/È¾±1k¿%?jm?
£¾mx]?óWÆ¾  ¿N!È½	Üß;½r\½Zzg¿Àý«>_	¾ªd(?s?m§>q? =  ¿d¼½ú?<f½dö¾yÆ3?Ø=¿°*?jm?Û=I$?FB?  ¿d¼½ú?<f½dö¾yÆ3?Ø=¿8Lx?[?m?vÛ=ò$?±B?  ¿.ë±½kâì;m½·â³½!"¿5eT¿ºNs?dj?Ü=Ù¾ì5F?¶jð¾  ¿m¸½«;£èh½c=$/È¾±1k¿Ür?[?m?×¾¦^?µèÆ¾  ¿.ë±½ggE<m½Û¾t"7?6ì$¿S w?µÆh?E[¾Fu!?BC?  ¿.ë±½ggE<m½Û¾t"7?6ì$¿%;?ÿ?Òj¾¦¤2¿¶-¿  ¿÷7§½§eó; u½-B¢¾OÐ+¿N+¿ú(???äì¨>=¿då?  ¿.ë±½kâì;m½·â³½!"¿5eT¿ú(??á?qÌ=§dU¿C?  ¿÷7§½»ÔJ< u½Û¾t"7?6ì$¿Ý;?¥?aÌj¾¤2¿(·-¿  ¿÷7§½»ÔJ< u½Û¾t"7?6ì$¿Ú?su?3?=Å$?Qáé>  ¿· ½Åº; y½ÈÑ'¿¼E#¿2Ï¾?à,q? Fª¾|9?°¿  ¿÷7§½§eó; u½-B¢¾OÐ+¿N+¿ú'?rRt?#©=>4/?t9¿  ¿À½BP<¢}|½Û¾t"7?6ì$¿x´?à,q?53?3Å$?"áé>  ¿N!È½	Üß;½r\½Zzg¿Àý«>_	¾·?&¦s?Þ®¾VSH¾ëek?  ¿d¼½¼;f½àÁ°<î½±2~¿*û>»v?Vö~¿Ù¬=¯½  ¿ñÈ½?=;ÜUZ½Òç}¿Øÿ<Ðý½·?|w?Gyí½×å=>NÍy?  ¿m¸½«;£èh½c=$/È¾±1k¿3ø>t?Øy¿¢LQ½¶½  ¿.ë±½kâì;m½·â³½!"¿5eT¿¯à>ÅâW?´ßq¿"¶>,þØ½  ¿ËÒ`½%*é;;7½ZQ¿á¿i
¾_§>njT?+`¿¾,S2?ÄÇ¿  ¿)½
íâ;º!½
>_Ú¿I¿á¸>¢`^?ØÔp¿§H3>±¾  ¿÷7§½§eó; u½-B¢¾OÐ+¿N+¿$Ú>njT?f¼Y¿?næ½  ¿ñÈ½?=;ÜUZ½Òç}¿Øÿ<Ðý½¤Q¡=Ý(2?7 ¾Ø)H½P­}?  ¿d¼½»f½àÁ°<î=±2~¿Èi=6?£¿÷Mm=¶t¼  ¿ñÈ½=»ÜUZ½Òç}¿Øÿ¼Ðý½¤Q¡=äô5?,7 ¾2ìG=­}?  ¿d¼½¼;f½àÁ°<î½±2~¿Èi=Å2?i¿m½ïs¼  ¿d¼½¼;f½àÁ°<î½±2~¿¦>¶fK?Ðþ~¿ß©=Új ½  ¿)½Jíâ»º!½
>_Ú?I¿ëo>É S?Gi¿ò2u¾­«¾  ¿d¼½»f½àÁ°<î=±2~¿¦>ýNO?åþ~¿*z©½i ½  ¿)½
íâ;º!½
>_Ú¿I¿ëo>ÙG?VGi¿Å4u>M«¾  ¿)½
íâ;º!½
>_Ú¿I¿F``?ÝÓ1?<»w¿
¾(Ð=  ¿ËÒ`½f*é»;7½ZQ¿á?i
¾S?n=?ê¿Í¿ò
 ?  ¿)½Jíâ»º!½
>_Ú?I¿F``?Ì_=?<»w¿	>Ð=  ¿ËÒ`½%*é;;7½ZQ¿á¿i
¾S?;«1?ê¿Í?ð
 ?  ¿ËÒ`½%*é;;7½ZQ¿á¿i
¾àX?PÈV?ù¿»jT?q4º½  ¿Â½&»¥}|½4o¿Wãx>Ì¾´P?ô??o¦o>¿Rx?Û[=  ¿ËÒ`½f*é»;7½ZQ¿á?i
¾­ÀL?PÈV?ù?»jT?q4º=  ¿Â½
&;¥}|½4o¿Wãx¾Ì¾ÙÍT?ô??o¦o¾¿Rx?Û[½  ¿ñÈ½=»ÜUZ½Òç}¿Øÿ¼Ðý½·Dî>î±h?bÈD½yV}?áÕ
>  ¿m¸½O«»£èh½c=$/È>±1k¿sæ>µûa?ÁlE¾$2h?a­¿>  ¿N!È½IÜß»½r\½Zzg¿Àý«¾_	¾sæ>íóh?§ó»¾Jm?2©=  ¿d¼½»f½àÁ°<î=±2~¿[ì>}Ac?!öQ¾üx?K~à=  ¿· ½º» y½ÈÑ'¿¼E#?2Ï¾¾K]?,Jq?Áè¿ÀÎD¿a¾  ¿÷7§½Óeó» u½-B¢¾OÐ+?N+¿_?un?h¼Y¿¿Yæ½  ¿ËÒ`½f*é»;7½ZQ¿á?i
¾ÇG?un?ñÀ¾z®2¿t)¿  ¿)½Jíâ»º!½
>_Ú?I¿à»?T?~p¿_¦5¾ù¾  ¿÷7§½Óeó» u½-B¢¾OÐ+?N+¿)"?Ø^?Ì.Z¿õ¿iÉß½  ¿.ë±½¬âì»m½·â³½!"?5eT¿×¢%?p
[?9r¿"j¾M«Ï½  ¿ËÒ`½f*é»;7½ZQ¿á?i
¾ßú?Ø^?ñÀ¾z®2¿t)¿  ¿· ½º» y½ÈÑ'¿¼E#?2Ï¾âµ>~nl?¢dþ¾ÞzD¿àcÏ¾  ¿ËÒ`½f*é»;7½ZQ¿á?i
¾ñK>~nl?wH¾y¿Üö;¿  ¿Â½&»¥}|½4o¿Wãx>Ì¾Ë/³>6to?²Vø=ò¾IO_¿  ¿N!È½IÜß»½r\½Zzg¿Àý«¾_	¾)u?!Ìm<¤ÊÙ¾u1'?3c ?  ¿d¼½+ú?¼f½dö¾yÆ3¿Ø=¿o?aÀ<@e_¿4<¨>¥û¸>  ¿	Æ½¡Ê¼ëºa½Á-¿3
¿Üþ¾Òs?ðû·<
;¿L?fN¿>  ¿m¸½O«»£èh½c=$/È>±1k¿o?u?§:ae¿¼×Ù>¶>  ¿m¸½O«»£èh½c=$/È>±1k¿	?5Ñg?Û=à0k?«QÉ>  ¿-ë±½}gE¼¡m½Û¾t"7¿6ì$¿´?Ë¢d?hïI¾w92?³0¿  ¿d¼½+ú?¼f½dö¾yÆ3¿Ø=¿´?Bi?Þ·Ô¾.°5?µ¥¿  ¿.ë±½¬âì»m½·â³½!"?5eT¿u?3àd?Ð>U?õ
?  ¿.ë±½¬âì»m½·â³½!"?5eT¿WìC?¡=yz¿¡Û=Ý3>  ¿÷7§½ÛÔJ¼ u½Û¾t"7¿6ì$¿O??èÞÃ=½èn¿þú<ëD·>  ¿-ë±½}gE¼¡m½Û¾t"7¿6ì$¿WìC?3©Á=èn¿Iïú<ØE·>  ¿÷7§½Óeó» u½-B¢¾OÐ+?N+¿O??<Ø¢=(l¿ïñV½kVÄ>  ¿÷7§½Óeó» u½-B¢¾OÐ+?N+¿)w?«Ñë=ê©½4/? t9?  ¿Â½,BP¼¥}|½Û¾t"7¿6ì$¿q?¥Ò=ï2¿LÅ$?áé¾  ¿÷7§½ÛÔJ¼ u½Û¾t"7¿6ì$¿+5s?´Yõ=Ã2¿]Å$?àáé¾  ¿· ½º» y½ÈÑ'¿¼E#?2Ï¾è»w?¥Ò=«Eª>|9?Ü?  ¿.ë±½¬âì»m½·â³½!"?5eT¿A×þ=|bq??i¿~ÁÁ¾L¾  ¿m¸½O«»£èh½c=$/È>±1k¿Ë>uvn?x¿N¾Ó¾  ¿)½Jíâ»º!½
>_Ú?I¿2=uvn?@Úi¿¶p¾çª¾  ¿m¸½O«»£èh½c=$/È>±1k¿Ï¯>.ãr?\U~¿n½-Ý·½  ¿d¼½»f½àÁ°<î=±2~¿2²>vp?V?~¿¯î=N¡¼  ¿)½Jíâ»º!½
>_Ú?I¿ñK>vp?Öòt¿!f¾6Æ¾  ¿)½
íâ;º!½
>_Ú¿I¿JÎÙ>çþr?Õòt¿1f><Æ¾  ¿d¼½¼;f½àÁ°<î½±2~¿uZ?çþr?V?~¿á®î½¡¼  ¿m¸½«;£èh½c=$/È¾±1k¿î?.7p?[U~¿=AÝ·½  ¿)½
íâ;º!½
>_Ú¿I¿-#%>Æßr?@Úi¿¶p>çª¾  ¿m¸½«;£èh½c=$/È¾±1k¿í(~>Æßr?x¿N>Ó¾  ¿.ë±½kâì;m½·â³½!"¿5eT¿Ãx>¿óo??i¿~ÁÁ>L¾  ¿ËÒ`½%*é;;7½ZQ¿á¿i
¾ EY?]U?ôÀ¾|®2?r)¿  ¿÷7§½§eó; u½-B¢¾OÐ+¿N+¿p?]U?f¼Y¿?næ½  ¿· ½Åº; y½ÈÑ'¿¼E#¿2Ï¾l|n?5³R?Áè¿ÀÎD?b¾  ¿Â½
&;¥}|½4o¿Wãx¾Ì¾Ôðm?u?§:°Vø=ò>IO_¿  ¿ËÒ`½%*é;;7½ZQ¿á¿i
¾çþV?ãUV<wH¾y?Üö;¿  ¿· ½Åº; y½ÈÑ'¿¼E#¿2Ï¾àÙn?ãUV<¢dþ¾ÞzD?àcÏ¾  ¿^¨´½Ù:¼Ò7½$+¿»Û
¿±?fLi?jø6>Ú~6¿¤>S$¿  ¿	Æ½¡Ê¼ëºa½Á-¿3
¿Üþ¾u:t?:z,>«}Á¾3OV?vÊ¾  ¿d¼½+ú?¼f½dö¾yÆ3¿Ø=¿Ødq?Qj>¿Ú¿2?$À¾  ¿N!È½IÜß»½r\½Zzg¿Àý«¾_	¾©Üt?jø6>('Ã½ ºB?vb$¿  ¿d¼½ú?<f½dö¾yÆ3?Ø=¿ÒÈC?*s3=QöR?§æ">P/¿  ¿N!È½	Üß;½r\½Zzg¿Àý«>_	¾Kå=?5ì÷<vºÓ>Æ?_¼<¿  ¿^¨´½Ä:<Ò7½$+¿»Û
?±?Kå=?$}=´o2>æJG?e]¿  ¿	Æ½Ê<ëºa½Á-¿3
?Üþ¾×@?T=-(?ñ??ÁÙ©½  ?d¼½ú?<f½dö¾yÆ3?Ø=¿ÇG?/^?^?6@ê>µC>¾  ¿^¨´½Ä:<Ò7½$+¿»Û
?±?öK?AGg? ±=?Væ>]@ÿ>  ¿.ë±½ggE<m½Û¾t"7?6ì$¿öK?µ7\?íòt?ê>ÐØÈ½  ¿^¨´½Ä:<Ò7½$+¿»Û
?±?c?ûc?V05?½æ>, (?  ¿÷7§½»ÔJ< u½Û¾t"7?6ì$¿c?èLV?©Æe?ÞÛ>Ì=  ¿.ë±½ggE<m½Û¾t"7?6ì$¿´?sY?©Æe?ÞÛ>Ì=  ¿À½BP<¢}|½Û¾t"7?6ì$¿p?Óã>_.P?L+?ô z>  ¿÷7§½»ÔJ< u½Û¾t"7?6ì$¿F|ÿ>ê>_.P?L+?ô z>  ¿^¨´½Ä:<Ò7½$+¿»Û
?±?p?È´?³,?t>øm9?  ¿^¨´½Ä:<Ò7½$+¿»Û
?±?6Xx=æÊ,?_¹"?vL=©áD?  ¿Ñ½^¯U<ü½ò=â«ô>ÿ_¿6Xx=Ñë?)÷h?(¦>>  ¿À½BP<¢}|½Û¾t"7?6ì$¿ßT=È?1£3?¯Í?åÀ>  ¿d¼½+ú?¼f½dö¾yÆ3¿Ø=¿-zç=aq\?^¿-@ê>ÑC>>  ¿-ë±½}gE¼¡m½Û¾t"7¿6ì$¿CÆ=zZ?íòt¿à>üØÈ=  ¿^¨´½Ù:¼Ò7½$+¿»Û
¿±?CÆ=e? ±=¿Væ>U@ÿ¾  ¿-ë±½}gE¼¡m½Û¾t"7¿6ì$¿Iê>Þr­>Æe¿4ÞÛ>øÌ½  ¿÷7§½ÛÔJ¼ u½Û¾t"7¿6ì$¿±Pã>%§>Æe¿4ÞÛ>øÌ½  ¿^¨´½Ù:¼Ò7½$+¿»Û
¿±?±Pã>ÇÂ>Y05¿×æ># (¿  ¿÷7§½ÛÔJ¼ u½Û¾t"7¿6ì$¿g>§ê>õ*P¿T.?%´z¾  ¿Â½,BP¼¥}|½Û¾t"7¿6ì$¿¼\>Óã>õ*P¿T.?%´z¾  ¿^¨´½Ù:¼Ò7½$+¿»Û
¿±?¼\>È´?m,¿x>Üo9¿  ¿Ñ½~¯U¼ü½ò=â«ô¾ÿ_¿YO?®,?jTk¿Õa>O~¾  ¿^¨´½Ù:¼Ò7½$+¿»Û
¿±?YO?³?5í$¿Ã°=ïB¿  ¿Â½,BP¼¥}|½Û¾t"7¿6ì$¿ä?­4	?Uñ:¿6­?L±¾  ¿<J½gáÛ<vy+½+¿êT?¨úZ¾ü5?æ®?%1?¢9>f&-¿  ¿ê½¹:<<î½fr'¿usñ=½F??J&?æ®?²¾Ôe?}1¹¾  ¿'½Äº<	õ¼¡C¿[#ù=2â"?-?.U%?!}_¾Àg`?ÙÛ¾  ¿<J½gáÛ<vy+½+¿êT?¨úZ¾¥Ùô>©¥U?å ¿Õ2¿g&¿  ¿^¨´½Ä:<Ò7½$+¿»Û
?±?#?ÙG?¢Ö)¿âé¾L<¿  ¿ê½¹:<<î½fr'¿usñ=½F??,é>ÙG?ºÌ@¿Bw¼Pf(¿  ¿'½Äº<	õ¼¡C¿[#ù=2â"?Å>Ø>¼â ?*°:?H@í>  ¿fu½é=¡+½#¿[2¸=C¿Å>í~>~^m¼ïÖ}?ì>  ¿<J½gáÛ<vy+½+¿êT?¨úZ¾Ë|>Ç>õÍ?\¨?d(?  ¿½é=ó¼bÝE¿dk=ÄÄ!?º>úg?*³Ú¾v0?GÌ¿  ¿fu½é=¡+½#¿[2¸=C¿Òá¡>4_?SR°>Åèk?°Â7¾  ¿'½Äº<	õ¼¡C¿[#ù=2â"?ñK>4_?É¾ôi1?Ù¿  ¿                                                                                                                                                                            Óû¼½    ¼1½ØÓ=>Æ¨=      Normal-Bumped   k Shader "Bumped Diffuse" {
Properties {
 _Color ("Main Color", Color) = (1,1,1,1)
 _MainTex ("Base (RGB)", 2D) = "white" {}
 _BumpMap ("Normalmap", 2D) = "bump" {}
}
SubShader { 
 LOD 300
 Tags { "RenderType"="Opaque" }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardBase" "SHADOWSUPPORT"="true" "RenderType"="Opaque" }
Program "vp" {
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 shlight_3;
  highp vec4 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_8 = tmpvar_1.xyz;
  tmpvar_9 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_10;
  tmpvar_10[0].x = tmpvar_8.x;
  tmpvar_10[0].y = tmpvar_9.x;
  tmpvar_10[0].z = tmpvar_2.x;
  tmpvar_10[1].x = tmpvar_8.y;
  tmpvar_10[1].y = tmpvar_9.y;
  tmpvar_10[1].z = tmpvar_2.y;
  tmpvar_10[2].x = tmpvar_8.z;
  tmpvar_10[2].y = tmpvar_9.z;
  tmpvar_10[2].z = tmpvar_2.z;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_5 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = (tmpvar_7 * (tmpvar_2 * unity_Scale.w));
  mediump vec3 tmpvar_13;
  mediump vec4 normal_14;
  normal_14 = tmpvar_12;
  highp float vC_15;
  mediump vec3 x3_16;
  mediump vec3 x2_17;
  mediump vec3 x1_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHAr, normal_14);
  x1_18.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHAg, normal_14);
  x1_18.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHAb, normal_14);
  x1_18.z = tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22 = (normal_14.xyzz * normal_14.yzzx);
  highp float tmpvar_23;
  tmpvar_23 = dot (unity_SHBr, tmpvar_22);
  x2_17.x = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = dot (unity_SHBg, tmpvar_22);
  x2_17.y = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = dot (unity_SHBb, tmpvar_22);
  x2_17.z = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = ((normal_14.x * normal_14.x) - (normal_14.y * normal_14.y));
  vC_15 = tmpvar_26;
  highp vec3 tmpvar_27;
  tmpvar_27 = (unity_SHC.xyz * vC_15);
  x3_16 = tmpvar_27;
  tmpvar_13 = ((x1_18 + x2_17) + x3_16);
  shlight_3 = tmpvar_13;
  tmpvar_6 = shlight_3;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture2D (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp vec4 c_3;
  c_3.xyz = ((tmpvar_2.xyz * _LightColor0.xyz) * (max (0.0, dot (((texture2D (_BumpMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0), xlv_TEXCOORD1)) * 2.0));
  c_3.w = tmpvar_2.w;
  c_1.w = c_3.w;
  c_1.xyz = (c_3.xyz + (tmpvar_2.xyz * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
out highp vec4 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 shlight_3;
  highp vec4 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_8 = tmpvar_1.xyz;
  tmpvar_9 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_10;
  tmpvar_10[0].x = tmpvar_8.x;
  tmpvar_10[0].y = tmpvar_9.x;
  tmpvar_10[0].z = tmpvar_2.x;
  tmpvar_10[1].x = tmpvar_8.y;
  tmpvar_10[1].y = tmpvar_9.y;
  tmpvar_10[1].z = tmpvar_2.y;
  tmpvar_10[2].x = tmpvar_8.z;
  tmpvar_10[2].y = tmpvar_9.z;
  tmpvar_10[2].z = tmpvar_2.z;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_5 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = (tmpvar_7 * (tmpvar_2 * unity_Scale.w));
  mediump vec3 tmpvar_13;
  mediump vec4 normal_14;
  normal_14 = tmpvar_12;
  highp float vC_15;
  mediump vec3 x3_16;
  mediump vec3 x2_17;
  mediump vec3 x1_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHAr, normal_14);
  x1_18.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHAg, normal_14);
  x1_18.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHAb, normal_14);
  x1_18.z = tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22 = (normal_14.xyzz * normal_14.yzzx);
  highp float tmpvar_23;
  tmpvar_23 = dot (unity_SHBr, tmpvar_22);
  x2_17.x = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = dot (unity_SHBg, tmpvar_22);
  x2_17.y = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = dot (unity_SHBb, tmpvar_22);
  x2_17.z = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = ((normal_14.x * normal_14.x) - (normal_14.y * normal_14.y));
  vC_15 = tmpvar_26;
  highp vec3 tmpvar_27;
  tmpvar_27 = (unity_SHC.xyz * vC_15);
  x3_16 = tmpvar_27;
  tmpvar_13 = ((x1_18 + x2_17) + x3_16);
  shlight_3 = tmpvar_13;
  tmpvar_6 = shlight_3;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp vec4 c_3;
  c_3.xyz = ((tmpvar_2.xyz * _LightColor0.xyz) * (max (0.0, dot (((texture (_BumpMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0), xlv_TEXCOORD1)) * 2.0));
  c_3.w = tmpvar_2.w;
  c_1.w = c_3.w;
  c_1.xyz = (c_3.xyz + (tmpvar_2.xyz * xlv_TEXCOORD2));
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D unity_Lightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture2D (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  c_1.xyz = (tmpvar_2.xyz * (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz));
  c_1.w = tmpvar_2.w;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
out highp vec4 xlv_TEXCOORD0;
out highp vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D unity_Lightmap;
in highp vec4 xlv_TEXCOORD0;
in highp vec2 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  c_1.xyz = (tmpvar_2.xyz * (2.0 * texture (unity_Lightmap, xlv_TEXCOORD1).xyz));
  c_1.w = tmpvar_2.w;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture2D (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp vec3 tmpvar_3;
  tmpvar_3 = ((texture2D (_BumpMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  mat3 tmpvar_4;
  tmpvar_4[0].x = 0.816497;
  tmpvar_4[0].y = -0.408248;
  tmpvar_4[0].z = -0.408248;
  tmpvar_4[1].x = 0.0;
  tmpvar_4[1].y = 0.707107;
  tmpvar_4[1].z = -0.707107;
  tmpvar_4[2].x = 0.57735;
  tmpvar_4[2].y = 0.57735;
  tmpvar_4[2].z = 0.57735;
  mediump vec3 normal_5;
  normal_5 = tmpvar_3;
  mediump vec3 scalePerBasisVector_6;
  mediump vec3 lm_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_7 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = (2.0 * texture2D (unity_LightmapInd, xlv_TEXCOORD1).xyz);
  scalePerBasisVector_6 = tmpvar_9;
  lm_7 = (lm_7 * dot (clamp ((tmpvar_4 * normal_5), 0.0, 1.0), scalePerBasisVector_6));
  mediump vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_2.xyz * lm_7);
  c_1.xyz = tmpvar_10;
  c_1.w = tmpvar_2.w;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
out highp vec4 xlv_TEXCOORD0;
out highp vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
in highp vec4 xlv_TEXCOORD0;
in highp vec2 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp vec3 tmpvar_3;
  tmpvar_3 = ((texture (_BumpMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  mat3 tmpvar_4;
  tmpvar_4[0].x = 0.816497;
  tmpvar_4[0].y = -0.408248;
  tmpvar_4[0].z = -0.408248;
  tmpvar_4[1].x = 0.0;
  tmpvar_4[1].y = 0.707107;
  tmpvar_4[1].z = -0.707107;
  tmpvar_4[2].x = 0.57735;
  tmpvar_4[2].y = 0.57735;
  tmpvar_4[2].z = 0.57735;
  mediump vec3 normal_5;
  normal_5 = tmpvar_3;
  mediump vec3 scalePerBasisVector_6;
  mediump vec3 lm_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_7 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = (2.0 * texture (unity_LightmapInd, xlv_TEXCOORD1).xyz);
  scalePerBasisVector_6 = tmpvar_9;
  lm_7 = (lm_7 * dot (clamp ((tmpvar_4 * normal_5), 0.0, 1.0), scalePerBasisVector_6));
  mediump vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_2.xyz * lm_7);
  c_1.xyz = tmpvar_10;
  c_1.w = tmpvar_2.w;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 shlight_3;
  highp vec4 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_8 = tmpvar_1.xyz;
  tmpvar_9 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_10;
  tmpvar_10[0].x = tmpvar_8.x;
  tmpvar_10[0].y = tmpvar_9.x;
  tmpvar_10[0].z = tmpvar_2.x;
  tmpvar_10[1].x = tmpvar_8.y;
  tmpvar_10[1].y = tmpvar_9.y;
  tmpvar_10[1].z = tmpvar_2.y;
  tmpvar_10[2].x = tmpvar_8.z;
  tmpvar_10[2].y = tmpvar_9.z;
  tmpvar_10[2].z = tmpvar_2.z;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_5 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = (tmpvar_7 * (tmpvar_2 * unity_Scale.w));
  mediump vec3 tmpvar_13;
  mediump vec4 normal_14;
  normal_14 = tmpvar_12;
  highp float vC_15;
  mediump vec3 x3_16;
  mediump vec3 x2_17;
  mediump vec3 x1_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHAr, normal_14);
  x1_18.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHAg, normal_14);
  x1_18.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHAb, normal_14);
  x1_18.z = tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22 = (normal_14.xyzz * normal_14.yzzx);
  highp float tmpvar_23;
  tmpvar_23 = dot (unity_SHBr, tmpvar_22);
  x2_17.x = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = dot (unity_SHBg, tmpvar_22);
  x2_17.y = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = dot (unity_SHBb, tmpvar_22);
  x2_17.z = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = ((normal_14.x * normal_14.x) - (normal_14.y * normal_14.y));
  vC_15 = tmpvar_26;
  highp vec3 tmpvar_27;
  tmpvar_27 = (unity_SHC.xyz * vC_15);
  x3_16 = tmpvar_27;
  tmpvar_13 = ((x1_18 + x2_17) + x3_16);
  shlight_3 = tmpvar_13;
  tmpvar_6 = shlight_3;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture2D (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp float tmpvar_3;
  mediump float lightShadowDataX_4;
  highp float dist_5;
  lowp float tmpvar_6;
  tmpvar_6 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_5 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = _LightShadowData.x;
  lightShadowDataX_4 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = max (float((dist_5 > (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))), lightShadowDataX_4);
  tmpvar_3 = tmpvar_8;
  lowp vec4 c_9;
  c_9.xyz = ((tmpvar_2.xyz * _LightColor0.xyz) * ((max (0.0, dot (((texture2D (_BumpMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0), xlv_TEXCOORD1)) * tmpvar_3) * 2.0));
  c_9.w = tmpvar_2.w;
  c_1.w = c_9.w;
  c_1.xyz = (c_9.xyz + (tmpvar_2.xyz * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
out highp vec4 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 shlight_3;
  highp vec4 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_8 = tmpvar_1.xyz;
  tmpvar_9 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_10;
  tmpvar_10[0].x = tmpvar_8.x;
  tmpvar_10[0].y = tmpvar_9.x;
  tmpvar_10[0].z = tmpvar_2.x;
  tmpvar_10[1].x = tmpvar_8.y;
  tmpvar_10[1].y = tmpvar_9.y;
  tmpvar_10[1].z = tmpvar_2.y;
  tmpvar_10[2].x = tmpvar_8.z;
  tmpvar_10[2].y = tmpvar_9.z;
  tmpvar_10[2].z = tmpvar_2.z;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_5 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = (tmpvar_7 * (tmpvar_2 * unity_Scale.w));
  mediump vec3 tmpvar_13;
  mediump vec4 normal_14;
  normal_14 = tmpvar_12;
  highp float vC_15;
  mediump vec3 x3_16;
  mediump vec3 x2_17;
  mediump vec3 x1_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHAr, normal_14);
  x1_18.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHAg, normal_14);
  x1_18.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHAb, normal_14);
  x1_18.z = tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22 = (normal_14.xyzz * normal_14.yzzx);
  highp float tmpvar_23;
  tmpvar_23 = dot (unity_SHBr, tmpvar_22);
  x2_17.x = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = dot (unity_SHBg, tmpvar_22);
  x2_17.y = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = dot (unity_SHBb, tmpvar_22);
  x2_17.z = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = ((normal_14.x * normal_14.x) - (normal_14.y * normal_14.y));
  vC_15 = tmpvar_26;
  highp vec3 tmpvar_27;
  tmpvar_27 = (unity_SHC.xyz * vC_15);
  x3_16 = tmpvar_27;
  tmpvar_13 = ((x1_18 + x2_17) + x3_16);
  shlight_3 = tmpvar_13;
  tmpvar_6 = shlight_3;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp float tmpvar_3;
  mediump float lightShadowDataX_4;
  highp float dist_5;
  lowp float tmpvar_6;
  tmpvar_6 = textureProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_5 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = _LightShadowData.x;
  lightShadowDataX_4 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = max (float((dist_5 > (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))), lightShadowDataX_4);
  tmpvar_3 = tmpvar_8;
  lowp vec4 c_9;
  c_9.xyz = ((tmpvar_2.xyz * _LightColor0.xyz) * ((max (0.0, dot (((texture (_BumpMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0), xlv_TEXCOORD1)) * tmpvar_3) * 2.0));
  c_9.w = tmpvar_2.w;
  c_1.w = c_9.w;
  c_1.xyz = (c_9.xyz + (tmpvar_2.xyz * xlv_TEXCOORD2));
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _LightShadowData;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D unity_Lightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture2D (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp float tmpvar_3;
  mediump float lightShadowDataX_4;
  highp float dist_5;
  lowp float tmpvar_6;
  tmpvar_6 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD2).x;
  dist_5 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = _LightShadowData.x;
  lightShadowDataX_4 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = max (float((dist_5 > (xlv_TEXCOORD2.z / xlv_TEXCOORD2.w))), lightShadowDataX_4);
  tmpvar_3 = tmpvar_8;
  c_1.xyz = (tmpvar_2.xyz * min ((2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz), vec3((tmpvar_3 * 2.0))));
  c_1.w = tmpvar_2.w;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
out highp vec4 xlv_TEXCOORD0;
out highp vec2 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform highp vec4 _LightShadowData;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D unity_Lightmap;
in highp vec4 xlv_TEXCOORD0;
in highp vec2 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp float tmpvar_3;
  mediump float lightShadowDataX_4;
  highp float dist_5;
  lowp float tmpvar_6;
  tmpvar_6 = textureProj (_ShadowMapTexture, xlv_TEXCOORD2).x;
  dist_5 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = _LightShadowData.x;
  lightShadowDataX_4 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = max (float((dist_5 > (xlv_TEXCOORD2.z / xlv_TEXCOORD2.w))), lightShadowDataX_4);
  tmpvar_3 = tmpvar_8;
  c_1.xyz = (tmpvar_2.xyz * min ((2.0 * texture (unity_Lightmap, xlv_TEXCOORD1).xyz), vec3((tmpvar_3 * 2.0))));
  c_1.w = tmpvar_2.w;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _LightShadowData;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture2D (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp vec3 tmpvar_3;
  tmpvar_3 = ((texture2D (_BumpMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  lowp float tmpvar_4;
  mediump float lightShadowDataX_5;
  highp float dist_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD2).x;
  dist_6 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = _LightShadowData.x;
  lightShadowDataX_5 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = max (float((dist_6 > (xlv_TEXCOORD2.z / xlv_TEXCOORD2.w))), lightShadowDataX_5);
  tmpvar_4 = tmpvar_9;
  mat3 tmpvar_10;
  tmpvar_10[0].x = 0.816497;
  tmpvar_10[0].y = -0.408248;
  tmpvar_10[0].z = -0.408248;
  tmpvar_10[1].x = 0.0;
  tmpvar_10[1].y = 0.707107;
  tmpvar_10[1].z = -0.707107;
  tmpvar_10[2].x = 0.57735;
  tmpvar_10[2].y = 0.57735;
  tmpvar_10[2].z = 0.57735;
  mediump vec3 normal_11;
  normal_11 = tmpvar_3;
  mediump vec3 scalePerBasisVector_12;
  mediump vec3 lm_13;
  lowp vec3 tmpvar_14;
  tmpvar_14 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_13 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = (2.0 * texture2D (unity_LightmapInd, xlv_TEXCOORD1).xyz);
  scalePerBasisVector_12 = tmpvar_15;
  lm_13 = (lm_13 * dot (clamp ((tmpvar_10 * normal_11), 0.0, 1.0), scalePerBasisVector_12));
  lowp vec3 tmpvar_16;
  tmpvar_16 = vec3((tmpvar_4 * 2.0));
  mediump vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_2.xyz * min (lm_13, tmpvar_16));
  c_1.xyz = tmpvar_17;
  c_1.w = tmpvar_2.w;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
out highp vec4 xlv_TEXCOORD0;
out highp vec2 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform highp vec4 _LightShadowData;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
in highp vec4 xlv_TEXCOORD0;
in highp vec2 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp vec3 tmpvar_3;
  tmpvar_3 = ((texture (_BumpMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  lowp float tmpvar_4;
  mediump float lightShadowDataX_5;
  highp float dist_6;
  lowp float tmpvar_7;
  tmpvar_7 = textureProj (_ShadowMapTexture, xlv_TEXCOORD2).x;
  dist_6 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = _LightShadowData.x;
  lightShadowDataX_5 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = max (float((dist_6 > (xlv_TEXCOORD2.z / xlv_TEXCOORD2.w))), lightShadowDataX_5);
  tmpvar_4 = tmpvar_9;
  mat3 tmpvar_10;
  tmpvar_10[0].x = 0.816497;
  tmpvar_10[0].y = -0.408248;
  tmpvar_10[0].z = -0.408248;
  tmpvar_10[1].x = 0.0;
  tmpvar_10[1].y = 0.707107;
  tmpvar_10[1].z = -0.707107;
  tmpvar_10[2].x = 0.57735;
  tmpvar_10[2].y = 0.57735;
  tmpvar_10[2].z = 0.57735;
  mediump vec3 normal_11;
  normal_11 = tmpvar_3;
  mediump vec3 scalePerBasisVector_12;
  mediump vec3 lm_13;
  lowp vec3 tmpvar_14;
  tmpvar_14 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_13 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = (2.0 * texture (unity_LightmapInd, xlv_TEXCOORD1).xyz);
  scalePerBasisVector_12 = tmpvar_15;
  lm_13 = (lm_13 * dot (clamp ((tmpvar_10 * normal_11), 0.0, 1.0), scalePerBasisVector_12));
  lowp vec3 tmpvar_16;
  tmpvar_16 = vec3((tmpvar_4 * 2.0));
  mediump vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_2.xyz * min (lm_13, tmpvar_16));
  c_1.xyz = tmpvar_17;
  c_1.w = tmpvar_2.w;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 shlight_3;
  highp vec4 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * (tmpvar_2 * unity_Scale.w));
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1.xyz;
  tmpvar_10 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_2.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_2.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_2.z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_5 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_8;
  mediump vec3 tmpvar_14;
  mediump vec4 normal_15;
  normal_15 = tmpvar_13;
  highp float vC_16;
  mediump vec3 x3_17;
  mediump vec3 x2_18;
  mediump vec3 x1_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHAr, normal_15);
  x1_19.x = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHAg, normal_15);
  x1_19.y = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (unity_SHAb, normal_15);
  x1_19.z = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normal_15.xyzz * normal_15.yzzx);
  highp float tmpvar_24;
  tmpvar_24 = dot (unity_SHBr, tmpvar_23);
  x2_18.x = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = dot (unity_SHBg, tmpvar_23);
  x2_18.y = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = dot (unity_SHBb, tmpvar_23);
  x2_18.z = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = ((normal_15.x * normal_15.x) - (normal_15.y * normal_15.y));
  vC_16 = tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_28 = (unity_SHC.xyz * vC_16);
  x3_17 = tmpvar_28;
  tmpvar_14 = ((x1_19 + x2_18) + x3_17);
  shlight_3 = tmpvar_14;
  tmpvar_6 = shlight_3;
  highp vec3 tmpvar_29;
  tmpvar_29 = (_Object2World * _glesVertex).xyz;
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosX0 - tmpvar_29.x);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosY0 - tmpvar_29.y);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosZ0 - tmpvar_29.z);
  highp vec4 tmpvar_33;
  tmpvar_33 = (((tmpvar_30 * tmpvar_30) + (tmpvar_31 * tmpvar_31)) + (tmpvar_32 * tmpvar_32));
  highp vec4 tmpvar_34;
  tmpvar_34 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_30 * tmpvar_8.x) + (tmpvar_31 * tmpvar_8.y)) + (tmpvar_32 * tmpvar_8.z)) * inversesqrt(tmpvar_33))) * (1.0/((1.0 + (tmpvar_33 * unity_4LightAtten0)))));
  highp vec3 tmpvar_35;
  tmpvar_35 = (tmpvar_6 + ((((unity_LightColor[0].xyz * tmpvar_34.x) + (unity_LightColor[1].xyz * tmpvar_34.y)) + (unity_LightColor[2].xyz * tmpvar_34.z)) + (unity_LightColor[3].xyz * tmpvar_34.w)));
  tmpvar_6 = tmpvar_35;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture2D (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp vec4 c_3;
  c_3.xyz = ((tmpvar_2.xyz * _LightColor0.xyz) * (max (0.0, dot (((texture2D (_BumpMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0), xlv_TEXCOORD1)) * 2.0));
  c_3.w = tmpvar_2.w;
  c_1.w = c_3.w;
  c_1.xyz = (c_3.xyz + (tmpvar_2.xyz * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
out highp vec4 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 shlight_3;
  highp vec4 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * (tmpvar_2 * unity_Scale.w));
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1.xyz;
  tmpvar_10 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_2.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_2.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_2.z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_5 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_8;
  mediump vec3 tmpvar_14;
  mediump vec4 normal_15;
  normal_15 = tmpvar_13;
  highp float vC_16;
  mediump vec3 x3_17;
  mediump vec3 x2_18;
  mediump vec3 x1_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHAr, normal_15);
  x1_19.x = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHAg, normal_15);
  x1_19.y = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (unity_SHAb, normal_15);
  x1_19.z = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normal_15.xyzz * normal_15.yzzx);
  highp float tmpvar_24;
  tmpvar_24 = dot (unity_SHBr, tmpvar_23);
  x2_18.x = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = dot (unity_SHBg, tmpvar_23);
  x2_18.y = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = dot (unity_SHBb, tmpvar_23);
  x2_18.z = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = ((normal_15.x * normal_15.x) - (normal_15.y * normal_15.y));
  vC_16 = tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_28 = (unity_SHC.xyz * vC_16);
  x3_17 = tmpvar_28;
  tmpvar_14 = ((x1_19 + x2_18) + x3_17);
  shlight_3 = tmpvar_14;
  tmpvar_6 = shlight_3;
  highp vec3 tmpvar_29;
  tmpvar_29 = (_Object2World * _glesVertex).xyz;
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosX0 - tmpvar_29.x);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosY0 - tmpvar_29.y);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosZ0 - tmpvar_29.z);
  highp vec4 tmpvar_33;
  tmpvar_33 = (((tmpvar_30 * tmpvar_30) + (tmpvar_31 * tmpvar_31)) + (tmpvar_32 * tmpvar_32));
  highp vec4 tmpvar_34;
  tmpvar_34 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_30 * tmpvar_8.x) + (tmpvar_31 * tmpvar_8.y)) + (tmpvar_32 * tmpvar_8.z)) * inversesqrt(tmpvar_33))) * (1.0/((1.0 + (tmpvar_33 * unity_4LightAtten0)))));
  highp vec3 tmpvar_35;
  tmpvar_35 = (tmpvar_6 + ((((unity_LightColor[0].xyz * tmpvar_34.x) + (unity_LightColor[1].xyz * tmpvar_34.y)) + (unity_LightColor[2].xyz * tmpvar_34.z)) + (unity_LightColor[3].xyz * tmpvar_34.w)));
  tmpvar_6 = tmpvar_35;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp vec4 c_3;
  c_3.xyz = ((tmpvar_2.xyz * _LightColor0.xyz) * (max (0.0, dot (((texture (_BumpMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0), xlv_TEXCOORD1)) * 2.0));
  c_3.w = tmpvar_2.w;
  c_1.w = c_3.w;
  c_1.xyz = (c_3.xyz + (tmpvar_2.xyz * xlv_TEXCOORD2));
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 shlight_3;
  highp vec4 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * (tmpvar_2 * unity_Scale.w));
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1.xyz;
  tmpvar_10 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_2.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_2.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_2.z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_5 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_8;
  mediump vec3 tmpvar_14;
  mediump vec4 normal_15;
  normal_15 = tmpvar_13;
  highp float vC_16;
  mediump vec3 x3_17;
  mediump vec3 x2_18;
  mediump vec3 x1_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHAr, normal_15);
  x1_19.x = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHAg, normal_15);
  x1_19.y = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (unity_SHAb, normal_15);
  x1_19.z = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normal_15.xyzz * normal_15.yzzx);
  highp float tmpvar_24;
  tmpvar_24 = dot (unity_SHBr, tmpvar_23);
  x2_18.x = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = dot (unity_SHBg, tmpvar_23);
  x2_18.y = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = dot (unity_SHBb, tmpvar_23);
  x2_18.z = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = ((normal_15.x * normal_15.x) - (normal_15.y * normal_15.y));
  vC_16 = tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_28 = (unity_SHC.xyz * vC_16);
  x3_17 = tmpvar_28;
  tmpvar_14 = ((x1_19 + x2_18) + x3_17);
  shlight_3 = tmpvar_14;
  tmpvar_6 = shlight_3;
  highp vec3 tmpvar_29;
  tmpvar_29 = (_Object2World * _glesVertex).xyz;
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosX0 - tmpvar_29.x);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosY0 - tmpvar_29.y);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosZ0 - tmpvar_29.z);
  highp vec4 tmpvar_33;
  tmpvar_33 = (((tmpvar_30 * tmpvar_30) + (tmpvar_31 * tmpvar_31)) + (tmpvar_32 * tmpvar_32));
  highp vec4 tmpvar_34;
  tmpvar_34 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_30 * tmpvar_8.x) + (tmpvar_31 * tmpvar_8.y)) + (tmpvar_32 * tmpvar_8.z)) * inversesqrt(tmpvar_33))) * (1.0/((1.0 + (tmpvar_33 * unity_4LightAtten0)))));
  highp vec3 tmpvar_35;
  tmpvar_35 = (tmpvar_6 + ((((unity_LightColor[0].xyz * tmpvar_34.x) + (unity_LightColor[1].xyz * tmpvar_34.y)) + (unity_LightColor[2].xyz * tmpvar_34.z)) + (unity_LightColor[3].xyz * tmpvar_34.w)));
  tmpvar_6 = tmpvar_35;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture2D (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp float tmpvar_3;
  mediump float lightShadowDataX_4;
  highp float dist_5;
  lowp float tmpvar_6;
  tmpvar_6 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_5 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = _LightShadowData.x;
  lightShadowDataX_4 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = max (float((dist_5 > (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))), lightShadowDataX_4);
  tmpvar_3 = tmpvar_8;
  lowp vec4 c_9;
  c_9.xyz = ((tmpvar_2.xyz * _LightColor0.xyz) * ((max (0.0, dot (((texture2D (_BumpMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0), xlv_TEXCOORD1)) * tmpvar_3) * 2.0));
  c_9.w = tmpvar_2.w;
  c_1.w = c_9.w;
  c_1.xyz = (c_9.xyz + (tmpvar_2.xyz * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
out highp vec4 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 shlight_3;
  highp vec4 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * (tmpvar_2 * unity_Scale.w));
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1.xyz;
  tmpvar_10 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_2.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_2.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_2.z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_5 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_8;
  mediump vec3 tmpvar_14;
  mediump vec4 normal_15;
  normal_15 = tmpvar_13;
  highp float vC_16;
  mediump vec3 x3_17;
  mediump vec3 x2_18;
  mediump vec3 x1_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHAr, normal_15);
  x1_19.x = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHAg, normal_15);
  x1_19.y = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (unity_SHAb, normal_15);
  x1_19.z = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normal_15.xyzz * normal_15.yzzx);
  highp float tmpvar_24;
  tmpvar_24 = dot (unity_SHBr, tmpvar_23);
  x2_18.x = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = dot (unity_SHBg, tmpvar_23);
  x2_18.y = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = dot (unity_SHBb, tmpvar_23);
  x2_18.z = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = ((normal_15.x * normal_15.x) - (normal_15.y * normal_15.y));
  vC_16 = tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_28 = (unity_SHC.xyz * vC_16);
  x3_17 = tmpvar_28;
  tmpvar_14 = ((x1_19 + x2_18) + x3_17);
  shlight_3 = tmpvar_14;
  tmpvar_6 = shlight_3;
  highp vec3 tmpvar_29;
  tmpvar_29 = (_Object2World * _glesVertex).xyz;
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosX0 - tmpvar_29.x);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosY0 - tmpvar_29.y);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosZ0 - tmpvar_29.z);
  highp vec4 tmpvar_33;
  tmpvar_33 = (((tmpvar_30 * tmpvar_30) + (tmpvar_31 * tmpvar_31)) + (tmpvar_32 * tmpvar_32));
  highp vec4 tmpvar_34;
  tmpvar_34 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_30 * tmpvar_8.x) + (tmpvar_31 * tmpvar_8.y)) + (tmpvar_32 * tmpvar_8.z)) * inversesqrt(tmpvar_33))) * (1.0/((1.0 + (tmpvar_33 * unity_4LightAtten0)))));
  highp vec3 tmpvar_35;
  tmpvar_35 = (tmpvar_6 + ((((unity_LightColor[0].xyz * tmpvar_34.x) + (unity_LightColor[1].xyz * tmpvar_34.y)) + (unity_LightColor[2].xyz * tmpvar_34.z)) + (unity_LightColor[3].xyz * tmpvar_34.w)));
  tmpvar_6 = tmpvar_35;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp float tmpvar_3;
  mediump float lightShadowDataX_4;
  highp float dist_5;
  lowp float tmpvar_6;
  tmpvar_6 = textureProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_5 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = _LightShadowData.x;
  lightShadowDataX_4 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = max (float((dist_5 > (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))), lightShadowDataX_4);
  tmpvar_3 = tmpvar_8;
  lowp vec4 c_9;
  c_9.xyz = ((tmpvar_2.xyz * _LightColor0.xyz) * ((max (0.0, dot (((texture (_BumpMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0), xlv_TEXCOORD1)) * tmpvar_3) * 2.0));
  c_9.w = tmpvar_2.w;
  c_1.w = c_9.w;
  c_1.xyz = (c_9.xyz + (tmpvar_2.xyz * xlv_TEXCOORD2));
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 shlight_3;
  highp vec4 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_8 = tmpvar_1.xyz;
  tmpvar_9 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_10;
  tmpvar_10[0].x = tmpvar_8.x;
  tmpvar_10[0].y = tmpvar_9.x;
  tmpvar_10[0].z = tmpvar_2.x;
  tmpvar_10[1].x = tmpvar_8.y;
  tmpvar_10[1].y = tmpvar_9.y;
  tmpvar_10[1].z = tmpvar_2.y;
  tmpvar_10[2].x = tmpvar_8.z;
  tmpvar_10[2].y = tmpvar_9.z;
  tmpvar_10[2].z = tmpvar_2.z;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_5 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = (tmpvar_7 * (tmpvar_2 * unity_Scale.w));
  mediump vec3 tmpvar_13;
  mediump vec4 normal_14;
  normal_14 = tmpvar_12;
  highp float vC_15;
  mediump vec3 x3_16;
  mediump vec3 x2_17;
  mediump vec3 x1_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHAr, normal_14);
  x1_18.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHAg, normal_14);
  x1_18.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHAb, normal_14);
  x1_18.z = tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22 = (normal_14.xyzz * normal_14.yzzx);
  highp float tmpvar_23;
  tmpvar_23 = dot (unity_SHBr, tmpvar_22);
  x2_17.x = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = dot (unity_SHBg, tmpvar_22);
  x2_17.y = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = dot (unity_SHBb, tmpvar_22);
  x2_17.z = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = ((normal_14.x * normal_14.x) - (normal_14.y * normal_14.y));
  vC_15 = tmpvar_26;
  highp vec3 tmpvar_27;
  tmpvar_27 = (unity_SHC.xyz * vC_15);
  x3_16 = tmpvar_27;
  tmpvar_13 = ((x1_18 + x2_17) + x3_16);
  shlight_3 = tmpvar_13;
  tmpvar_6 = shlight_3;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture2D (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp float shadow_3;
  lowp float tmpvar_4;
  tmpvar_4 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD3.xyz);
  highp float tmpvar_5;
  tmpvar_5 = (_LightShadowData.x + (tmpvar_4 * (1.0 - _LightShadowData.x)));
  shadow_3 = tmpvar_5;
  lowp vec4 c_6;
  c_6.xyz = ((tmpvar_2.xyz * _LightColor0.xyz) * ((max (0.0, dot (((texture2D (_BumpMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0), xlv_TEXCOORD1)) * shadow_3) * 2.0));
  c_6.w = tmpvar_2.w;
  c_1.w = c_6.w;
  c_1.xyz = (c_6.xyz + (tmpvar_2.xyz * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
out highp vec4 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 shlight_3;
  highp vec4 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_8 = tmpvar_1.xyz;
  tmpvar_9 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_10;
  tmpvar_10[0].x = tmpvar_8.x;
  tmpvar_10[0].y = tmpvar_9.x;
  tmpvar_10[0].z = tmpvar_2.x;
  tmpvar_10[1].x = tmpvar_8.y;
  tmpvar_10[1].y = tmpvar_9.y;
  tmpvar_10[1].z = tmpvar_2.y;
  tmpvar_10[2].x = tmpvar_8.z;
  tmpvar_10[2].y = tmpvar_9.z;
  tmpvar_10[2].z = tmpvar_2.z;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_5 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = (tmpvar_7 * (tmpvar_2 * unity_Scale.w));
  mediump vec3 tmpvar_13;
  mediump vec4 normal_14;
  normal_14 = tmpvar_12;
  highp float vC_15;
  mediump vec3 x3_16;
  mediump vec3 x2_17;
  mediump vec3 x1_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHAr, normal_14);
  x1_18.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHAg, normal_14);
  x1_18.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHAb, normal_14);
  x1_18.z = tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22 = (normal_14.xyzz * normal_14.yzzx);
  highp float tmpvar_23;
  tmpvar_23 = dot (unity_SHBr, tmpvar_22);
  x2_17.x = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = dot (unity_SHBg, tmpvar_22);
  x2_17.y = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = dot (unity_SHBb, tmpvar_22);
  x2_17.z = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = ((normal_14.x * normal_14.x) - (normal_14.y * normal_14.y));
  vC_15 = tmpvar_26;
  highp vec3 tmpvar_27;
  tmpvar_27 = (unity_SHC.xyz * vC_15);
  x3_16 = tmpvar_27;
  tmpvar_13 = ((x1_18 + x2_17) + x3_16);
  shlight_3 = tmpvar_13;
  tmpvar_6 = shlight_3;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp float shadow_3;
  mediump float tmpvar_4;
  tmpvar_4 = texture (_ShadowMapTexture, xlv_TEXCOORD3.xyz);
  shadow_3 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (_LightShadowData.x + (shadow_3 * (1.0 - _LightShadowData.x)));
  shadow_3 = tmpvar_5;
  lowp vec4 c_6;
  c_6.xyz = ((tmpvar_2.xyz * _LightColor0.xyz) * ((max (0.0, dot (((texture (_BumpMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0), xlv_TEXCOORD1)) * shadow_3) * 2.0));
  c_6.w = tmpvar_2.w;
  c_1.w = c_6.w;
  c_1.xyz = (c_6.xyz + (tmpvar_2.xyz * xlv_TEXCOORD2));
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D unity_Lightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture2D (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp float shadow_3;
  lowp float tmpvar_4;
  tmpvar_4 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD2.xyz);
  highp float tmpvar_5;
  tmpvar_5 = (_LightShadowData.x + (tmpvar_4 * (1.0 - _LightShadowData.x)));
  shadow_3 = tmpvar_5;
  c_1.xyz = (tmpvar_2.xyz * min ((2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz), vec3((shadow_3 * 2.0))));
  c_1.w = tmpvar_2.w;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
out highp vec4 xlv_TEXCOORD0;
out highp vec2 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D unity_Lightmap;
in highp vec4 xlv_TEXCOORD0;
in highp vec2 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp float shadow_3;
  mediump float tmpvar_4;
  tmpvar_4 = texture (_ShadowMapTexture, xlv_TEXCOORD2.xyz);
  shadow_3 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (_LightShadowData.x + (shadow_3 * (1.0 - _LightShadowData.x)));
  shadow_3 = tmpvar_5;
  c_1.xyz = (tmpvar_2.xyz * min ((2.0 * texture (unity_Lightmap, xlv_TEXCOORD1).xyz), vec3((shadow_3 * 2.0))));
  c_1.w = tmpvar_2.w;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture2D (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp vec3 tmpvar_3;
  tmpvar_3 = ((texture2D (_BumpMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  lowp float shadow_4;
  lowp float tmpvar_5;
  tmpvar_5 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD2.xyz);
  highp float tmpvar_6;
  tmpvar_6 = (_LightShadowData.x + (tmpvar_5 * (1.0 - _LightShadowData.x)));
  shadow_4 = tmpvar_6;
  mat3 tmpvar_7;
  tmpvar_7[0].x = 0.816497;
  tmpvar_7[0].y = -0.408248;
  tmpvar_7[0].z = -0.408248;
  tmpvar_7[1].x = 0.0;
  tmpvar_7[1].y = 0.707107;
  tmpvar_7[1].z = -0.707107;
  tmpvar_7[2].x = 0.57735;
  tmpvar_7[2].y = 0.57735;
  tmpvar_7[2].z = 0.57735;
  mediump vec3 normal_8;
  normal_8 = tmpvar_3;
  mediump vec3 scalePerBasisVector_9;
  mediump vec3 lm_10;
  lowp vec3 tmpvar_11;
  tmpvar_11 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_10 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = (2.0 * texture2D (unity_LightmapInd, xlv_TEXCOORD1).xyz);
  scalePerBasisVector_9 = tmpvar_12;
  lm_10 = (lm_10 * dot (clamp ((tmpvar_7 * normal_8), 0.0, 1.0), scalePerBasisVector_9));
  lowp vec3 tmpvar_13;
  tmpvar_13 = vec3((shadow_4 * 2.0));
  mediump vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_2.xyz * min (lm_10, tmpvar_13));
  c_1.xyz = tmpvar_14;
  c_1.w = tmpvar_2.w;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
out highp vec4 xlv_TEXCOORD0;
out highp vec2 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
in highp vec4 xlv_TEXCOORD0;
in highp vec2 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp vec3 tmpvar_3;
  tmpvar_3 = ((texture (_BumpMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  lowp float shadow_4;
  mediump float tmpvar_5;
  tmpvar_5 = texture (_ShadowMapTexture, xlv_TEXCOORD2.xyz);
  shadow_4 = tmpvar_5;
  highp float tmpvar_6;
  tmpvar_6 = (_LightShadowData.x + (shadow_4 * (1.0 - _LightShadowData.x)));
  shadow_4 = tmpvar_6;
  mat3 tmpvar_7;
  tmpvar_7[0].x = 0.816497;
  tmpvar_7[0].y = -0.408248;
  tmpvar_7[0].z = -0.408248;
  tmpvar_7[1].x = 0.0;
  tmpvar_7[1].y = 0.707107;
  tmpvar_7[1].z = -0.707107;
  tmpvar_7[2].x = 0.57735;
  tmpvar_7[2].y = 0.57735;
  tmpvar_7[2].z = 0.57735;
  mediump vec3 normal_8;
  normal_8 = tmpvar_3;
  mediump vec3 scalePerBasisVector_9;
  mediump vec3 lm_10;
  lowp vec3 tmpvar_11;
  tmpvar_11 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_10 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = (2.0 * texture (unity_LightmapInd, xlv_TEXCOORD1).xyz);
  scalePerBasisVector_9 = tmpvar_12;
  lm_10 = (lm_10 * dot (clamp ((tmpvar_7 * normal_8), 0.0, 1.0), scalePerBasisVector_9));
  lowp vec3 tmpvar_13;
  tmpvar_13 = vec3((shadow_4 * 2.0));
  mediump vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_2.xyz * min (lm_10, tmpvar_13));
  c_1.xyz = tmpvar_14;
  c_1.w = tmpvar_2.w;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 shlight_3;
  highp vec4 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * (tmpvar_2 * unity_Scale.w));
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1.xyz;
  tmpvar_10 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_2.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_2.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_2.z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_5 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_8;
  mediump vec3 tmpvar_14;
  mediump vec4 normal_15;
  normal_15 = tmpvar_13;
  highp float vC_16;
  mediump vec3 x3_17;
  mediump vec3 x2_18;
  mediump vec3 x1_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHAr, normal_15);
  x1_19.x = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHAg, normal_15);
  x1_19.y = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (unity_SHAb, normal_15);
  x1_19.z = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normal_15.xyzz * normal_15.yzzx);
  highp float tmpvar_24;
  tmpvar_24 = dot (unity_SHBr, tmpvar_23);
  x2_18.x = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = dot (unity_SHBg, tmpvar_23);
  x2_18.y = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = dot (unity_SHBb, tmpvar_23);
  x2_18.z = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = ((normal_15.x * normal_15.x) - (normal_15.y * normal_15.y));
  vC_16 = tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_28 = (unity_SHC.xyz * vC_16);
  x3_17 = tmpvar_28;
  tmpvar_14 = ((x1_19 + x2_18) + x3_17);
  shlight_3 = tmpvar_14;
  tmpvar_6 = shlight_3;
  highp vec3 tmpvar_29;
  tmpvar_29 = (_Object2World * _glesVertex).xyz;
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosX0 - tmpvar_29.x);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosY0 - tmpvar_29.y);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosZ0 - tmpvar_29.z);
  highp vec4 tmpvar_33;
  tmpvar_33 = (((tmpvar_30 * tmpvar_30) + (tmpvar_31 * tmpvar_31)) + (tmpvar_32 * tmpvar_32));
  highp vec4 tmpvar_34;
  tmpvar_34 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_30 * tmpvar_8.x) + (tmpvar_31 * tmpvar_8.y)) + (tmpvar_32 * tmpvar_8.z)) * inversesqrt(tmpvar_33))) * (1.0/((1.0 + (tmpvar_33 * unity_4LightAtten0)))));
  highp vec3 tmpvar_35;
  tmpvar_35 = (tmpvar_6 + ((((unity_LightColor[0].xyz * tmpvar_34.x) + (unity_LightColor[1].xyz * tmpvar_34.y)) + (unity_LightColor[2].xyz * tmpvar_34.z)) + (unity_LightColor[3].xyz * tmpvar_34.w)));
  tmpvar_6 = tmpvar_35;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture2D (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp float shadow_3;
  lowp float tmpvar_4;
  tmpvar_4 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD3.xyz);
  highp float tmpvar_5;
  tmpvar_5 = (_LightShadowData.x + (tmpvar_4 * (1.0 - _LightShadowData.x)));
  shadow_3 = tmpvar_5;
  lowp vec4 c_6;
  c_6.xyz = ((tmpvar_2.xyz * _LightColor0.xyz) * ((max (0.0, dot (((texture2D (_BumpMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0), xlv_TEXCOORD1)) * shadow_3) * 2.0));
  c_6.w = tmpvar_2.w;
  c_1.w = c_6.w;
  c_1.xyz = (c_6.xyz + (tmpvar_2.xyz * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
out highp vec4 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 shlight_3;
  highp vec4 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * (tmpvar_2 * unity_Scale.w));
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1.xyz;
  tmpvar_10 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_2.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_2.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_2.z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_5 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_8;
  mediump vec3 tmpvar_14;
  mediump vec4 normal_15;
  normal_15 = tmpvar_13;
  highp float vC_16;
  mediump vec3 x3_17;
  mediump vec3 x2_18;
  mediump vec3 x1_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHAr, normal_15);
  x1_19.x = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHAg, normal_15);
  x1_19.y = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (unity_SHAb, normal_15);
  x1_19.z = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normal_15.xyzz * normal_15.yzzx);
  highp float tmpvar_24;
  tmpvar_24 = dot (unity_SHBr, tmpvar_23);
  x2_18.x = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = dot (unity_SHBg, tmpvar_23);
  x2_18.y = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = dot (unity_SHBb, tmpvar_23);
  x2_18.z = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = ((normal_15.x * normal_15.x) - (normal_15.y * normal_15.y));
  vC_16 = tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_28 = (unity_SHC.xyz * vC_16);
  x3_17 = tmpvar_28;
  tmpvar_14 = ((x1_19 + x2_18) + x3_17);
  shlight_3 = tmpvar_14;
  tmpvar_6 = shlight_3;
  highp vec3 tmpvar_29;
  tmpvar_29 = (_Object2World * _glesVertex).xyz;
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosX0 - tmpvar_29.x);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosY0 - tmpvar_29.y);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosZ0 - tmpvar_29.z);
  highp vec4 tmpvar_33;
  tmpvar_33 = (((tmpvar_30 * tmpvar_30) + (tmpvar_31 * tmpvar_31)) + (tmpvar_32 * tmpvar_32));
  highp vec4 tmpvar_34;
  tmpvar_34 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_30 * tmpvar_8.x) + (tmpvar_31 * tmpvar_8.y)) + (tmpvar_32 * tmpvar_8.z)) * inversesqrt(tmpvar_33))) * (1.0/((1.0 + (tmpvar_33 * unity_4LightAtten0)))));
  highp vec3 tmpvar_35;
  tmpvar_35 = (tmpvar_6 + ((((unity_LightColor[0].xyz * tmpvar_34.x) + (unity_LightColor[1].xyz * tmpvar_34.y)) + (unity_LightColor[2].xyz * tmpvar_34.z)) + (unity_LightColor[3].xyz * tmpvar_34.w)));
  tmpvar_6 = tmpvar_35;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp float shadow_3;
  mediump float tmpvar_4;
  tmpvar_4 = texture (_ShadowMapTexture, xlv_TEXCOORD3.xyz);
  shadow_3 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (_LightShadowData.x + (shadow_3 * (1.0 - _LightShadowData.x)));
  shadow_3 = tmpvar_5;
  lowp vec4 c_6;
  c_6.xyz = ((tmpvar_2.xyz * _LightColor0.xyz) * ((max (0.0, dot (((texture (_BumpMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0), xlv_TEXCOORD1)) * shadow_3) * 2.0));
  c_6.w = tmpvar_2.w;
  c_1.w = c_6.w;
  c_1.xyz = (c_6.xyz + (tmpvar_2.xyz * xlv_TEXCOORD2));
  _glesFragData[0] = c_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES3"
}
}
 }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardAdd" "RenderType"="Opaque" }
  ZWrite Off
  Fog {
   Color (0,0,0,0)
  }
  Blend One One
Program "vp" {
SubProgram "gles " {
Keywords { "POINT" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  highp vec3 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_5 = tmpvar_1.xyz;
  tmpvar_6 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_7;
  tmpvar_7[0].x = tmpvar_5.x;
  tmpvar_7[0].y = tmpvar_6.x;
  tmpvar_7[0].z = tmpvar_2.x;
  tmpvar_7[1].x = tmpvar_5.y;
  tmpvar_7[1].y = tmpvar_6.y;
  tmpvar_7[1].z = tmpvar_2.y;
  tmpvar_7[2].x = tmpvar_5.z;
  tmpvar_7[2].y = tmpvar_6.z;
  tmpvar_7[2].z = tmpvar_2.z;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_4 = tmpvar_8;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture2D (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  mediump vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD1);
  lightDir_2 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 c_6;
  c_6.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * ((max (0.0, dot (((texture2D (_BumpMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0), lightDir_2)) * texture2D (_LightTexture0, vec2(tmpvar_5)).w) * 2.0));
  c_6.w = tmpvar_3.w;
  c_1.xyz = c_6.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
out highp vec4 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  highp vec3 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_5 = tmpvar_1.xyz;
  tmpvar_6 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_7;
  tmpvar_7[0].x = tmpvar_5.x;
  tmpvar_7[0].y = tmpvar_6.x;
  tmpvar_7[0].z = tmpvar_2.x;
  tmpvar_7[1].x = tmpvar_5.y;
  tmpvar_7[1].y = tmpvar_6.y;
  tmpvar_7[1].z = tmpvar_2.y;
  tmpvar_7[2].x = tmpvar_5.z;
  tmpvar_7[2].y = tmpvar_6.z;
  tmpvar_7[2].z = tmpvar_2.z;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_4 = tmpvar_8;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  mediump vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD1);
  lightDir_2 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 c_6;
  c_6.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * ((max (0.0, dot (((texture (_BumpMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0), lightDir_2)) * texture (_LightTexture0, vec2(tmpvar_5)).w) * 2.0));
  c_6.w = tmpvar_3.w;
  c_1.xyz = c_6.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  highp vec3 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_5 = tmpvar_1.xyz;
  tmpvar_6 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_7;
  tmpvar_7[0].x = tmpvar_5.x;
  tmpvar_7[0].y = tmpvar_6.x;
  tmpvar_7[0].z = tmpvar_2.x;
  tmpvar_7[1].x = tmpvar_5.y;
  tmpvar_7[1].y = tmpvar_6.y;
  tmpvar_7[1].z = tmpvar_2.y;
  tmpvar_7[2].x = tmpvar_5.z;
  tmpvar_7[2].y = tmpvar_6.z;
  tmpvar_7[2].z = tmpvar_2.z;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_4 = tmpvar_8;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture2D (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lightDir_2 = xlv_TEXCOORD1;
  lowp vec4 c_4;
  c_4.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * (max (0.0, dot (((texture2D (_BumpMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0), lightDir_2)) * 2.0));
  c_4.w = tmpvar_3.w;
  c_1.xyz = c_4.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
out highp vec4 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  highp vec3 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_5 = tmpvar_1.xyz;
  tmpvar_6 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_7;
  tmpvar_7[0].x = tmpvar_5.x;
  tmpvar_7[0].y = tmpvar_6.x;
  tmpvar_7[0].z = tmpvar_2.x;
  tmpvar_7[1].x = tmpvar_5.y;
  tmpvar_7[1].y = tmpvar_6.y;
  tmpvar_7[1].z = tmpvar_2.y;
  tmpvar_7[2].x = tmpvar_5.z;
  tmpvar_7[2].y = tmpvar_6.z;
  tmpvar_7[2].z = tmpvar_2.z;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_4 = tmpvar_8;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lightDir_2 = xlv_TEXCOORD1;
  lowp vec4 c_4;
  c_4.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * (max (0.0, dot (((texture (_BumpMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0), lightDir_2)) * 2.0));
  c_4.w = tmpvar_3.w;
  c_1.xyz = c_4.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  highp vec3 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_5 = tmpvar_1.xyz;
  tmpvar_6 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_7;
  tmpvar_7[0].x = tmpvar_5.x;
  tmpvar_7[0].y = tmpvar_6.x;
  tmpvar_7[0].z = tmpvar_2.x;
  tmpvar_7[1].x = tmpvar_5.y;
  tmpvar_7[1].y = tmpvar_6.y;
  tmpvar_7[1].z = tmpvar_2.y;
  tmpvar_7[2].x = tmpvar_5.z;
  tmpvar_7[2].y = tmpvar_6.z;
  tmpvar_7[2].z = tmpvar_2.z;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_4 = tmpvar_8;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture2D (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  mediump vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD1);
  lightDir_2 = tmpvar_4;
  highp vec2 P_5;
  P_5 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  highp float tmpvar_6;
  tmpvar_6 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp float atten_7;
  atten_7 = ((float((xlv_TEXCOORD2.z > 0.0)) * texture2D (_LightTexture0, P_5).w) * texture2D (_LightTextureB0, vec2(tmpvar_6)).w);
  lowp vec4 c_8;
  c_8.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * ((max (0.0, dot (((texture2D (_BumpMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0), lightDir_2)) * atten_7) * 2.0));
  c_8.w = tmpvar_3.w;
  c_1.xyz = c_8.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
out highp vec4 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  highp vec3 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_5 = tmpvar_1.xyz;
  tmpvar_6 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_7;
  tmpvar_7[0].x = tmpvar_5.x;
  tmpvar_7[0].y = tmpvar_6.x;
  tmpvar_7[0].z = tmpvar_2.x;
  tmpvar_7[1].x = tmpvar_5.y;
  tmpvar_7[1].y = tmpvar_6.y;
  tmpvar_7[1].z = tmpvar_2.y;
  tmpvar_7[2].x = tmpvar_5.z;
  tmpvar_7[2].y = tmpvar_6.z;
  tmpvar_7[2].z = tmpvar_2.z;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_4 = tmpvar_8;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  mediump vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD1);
  lightDir_2 = tmpvar_4;
  highp vec2 P_5;
  P_5 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  highp float tmpvar_6;
  tmpvar_6 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp float atten_7;
  atten_7 = ((float((xlv_TEXCOORD2.z > 0.0)) * texture (_LightTexture0, P_5).w) * texture (_LightTextureB0, vec2(tmpvar_6)).w);
  lowp vec4 c_8;
  c_8.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * ((max (0.0, dot (((texture (_BumpMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0), lightDir_2)) * atten_7) * 2.0));
  c_8.w = tmpvar_3.w;
  c_1.xyz = c_8.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  highp vec3 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_5 = tmpvar_1.xyz;
  tmpvar_6 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_7;
  tmpvar_7[0].x = tmpvar_5.x;
  tmpvar_7[0].y = tmpvar_6.x;
  tmpvar_7[0].z = tmpvar_2.x;
  tmpvar_7[1].x = tmpvar_5.y;
  tmpvar_7[1].y = tmpvar_6.y;
  tmpvar_7[1].z = tmpvar_2.y;
  tmpvar_7[2].x = tmpvar_5.z;
  tmpvar_7[2].y = tmpvar_6.z;
  tmpvar_7[2].z = tmpvar_2.z;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_4 = tmpvar_8;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture2D (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  mediump vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD1);
  lightDir_2 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 c_6;
  c_6.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * ((max (0.0, dot (((texture2D (_BumpMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0), lightDir_2)) * (texture2D (_LightTextureB0, vec2(tmpvar_5)).w * textureCube (_LightTexture0, xlv_TEXCOORD2).w)) * 2.0));
  c_6.w = tmpvar_3.w;
  c_1.xyz = c_6.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
out highp vec4 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  highp vec3 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_5 = tmpvar_1.xyz;
  tmpvar_6 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_7;
  tmpvar_7[0].x = tmpvar_5.x;
  tmpvar_7[0].y = tmpvar_6.x;
  tmpvar_7[0].z = tmpvar_2.x;
  tmpvar_7[1].x = tmpvar_5.y;
  tmpvar_7[1].y = tmpvar_6.y;
  tmpvar_7[1].z = tmpvar_2.y;
  tmpvar_7[2].x = tmpvar_5.z;
  tmpvar_7[2].y = tmpvar_6.z;
  tmpvar_7[2].z = tmpvar_2.z;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_4 = tmpvar_8;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  mediump vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD1);
  lightDir_2 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 c_6;
  c_6.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * ((max (0.0, dot (((texture (_BumpMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0), lightDir_2)) * (texture (_LightTextureB0, vec2(tmpvar_5)).w * texture (_LightTexture0, xlv_TEXCOORD2).w)) * 2.0));
  c_6.w = tmpvar_3.w;
  c_1.xyz = c_6.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  highp vec3 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_5 = tmpvar_1.xyz;
  tmpvar_6 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_7;
  tmpvar_7[0].x = tmpvar_5.x;
  tmpvar_7[0].y = tmpvar_6.x;
  tmpvar_7[0].z = tmpvar_2.x;
  tmpvar_7[1].x = tmpvar_5.y;
  tmpvar_7[1].y = tmpvar_6.y;
  tmpvar_7[1].z = tmpvar_2.y;
  tmpvar_7[2].x = tmpvar_5.z;
  tmpvar_7[2].y = tmpvar_6.z;
  tmpvar_7[2].z = tmpvar_2.z;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_4 = tmpvar_8;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture2D (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lightDir_2 = xlv_TEXCOORD1;
  lowp vec4 c_4;
  c_4.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * ((max (0.0, dot (((texture2D (_BumpMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0), lightDir_2)) * texture2D (_LightTexture0, xlv_TEXCOORD2).w) * 2.0));
  c_4.w = tmpvar_3.w;
  c_1.xyz = c_4.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
out highp vec4 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  highp vec3 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_5 = tmpvar_1.xyz;
  tmpvar_6 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_7;
  tmpvar_7[0].x = tmpvar_5.x;
  tmpvar_7[0].y = tmpvar_6.x;
  tmpvar_7[0].z = tmpvar_2.x;
  tmpvar_7[1].x = tmpvar_5.y;
  tmpvar_7[1].y = tmpvar_6.y;
  tmpvar_7[1].z = tmpvar_2.y;
  tmpvar_7[2].x = tmpvar_5.z;
  tmpvar_7[2].y = tmpvar_6.z;
  tmpvar_7[2].z = tmpvar_2.z;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_4 = tmpvar_8;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lightDir_2 = xlv_TEXCOORD1;
  lowp vec4 c_4;
  c_4.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * ((max (0.0, dot (((texture (_BumpMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0), lightDir_2)) * texture (_LightTexture0, xlv_TEXCOORD2).w) * 2.0));
  c_4.w = tmpvar_3.w;
  c_1.xyz = c_4.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "POINT" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3"
}
}
 }
 Pass {
  Name "PREPASS"
  Tags { "LIGHTMODE"="PrePassBase" "RenderType"="Opaque" }
  Fog { Mode Off }
Program "vp" {
SubProgram "gles " {
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _BumpMap_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  tmpvar_3 = tmpvar_1.xyz;
  tmpvar_4 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = tmpvar_2.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = tmpvar_2.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = tmpvar_2.z;
  vec3 v_6;
  v_6.x = _Object2World[0].x;
  v_6.y = _Object2World[1].x;
  v_6.z = _Object2World[2].x;
  vec3 v_7;
  v_7.x = _Object2World[0].y;
  v_7.y = _Object2World[1].y;
  v_7.z = _Object2World[2].y;
  vec3 v_8;
  v_8.x = _Object2World[0].z;
  v_8.y = _Object2World[1].z;
  v_8.z = _Object2World[2].z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  xlv_TEXCOORD1 = ((tmpvar_5 * v_6) * unity_Scale.w);
  xlv_TEXCOORD2 = ((tmpvar_5 * v_7) * unity_Scale.w);
  xlv_TEXCOORD3 = ((tmpvar_5 * v_8) * unity_Scale.w);
}



#endif
#ifdef FRAGMENT

uniform sampler2D _BumpMap;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 worldN_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = ((texture2D (_BumpMap, xlv_TEXCOORD0).xyz * 2.0) - 1.0);
  highp float tmpvar_4;
  tmpvar_4 = dot (xlv_TEXCOORD1, tmpvar_3);
  worldN_2.x = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = dot (xlv_TEXCOORD2, tmpvar_3);
  worldN_2.y = tmpvar_5;
  highp float tmpvar_6;
  tmpvar_6 = dot (xlv_TEXCOORD3, tmpvar_3);
  worldN_2.z = tmpvar_6;
  res_1.xyz = ((worldN_2 * 0.5) + 0.5);
  res_1.w = 0.0;
  gl_FragData[0] = res_1;
}



#endif"
}
SubProgram "gles3 " {
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _BumpMap_ST;
out highp vec2 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  tmpvar_3 = tmpvar_1.xyz;
  tmpvar_4 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = tmpvar_2.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = tmpvar_2.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = tmpvar_2.z;
  vec3 v_6;
  v_6.x = _Object2World[0].x;
  v_6.y = _Object2World[1].x;
  v_6.z = _Object2World[2].x;
  vec3 v_7;
  v_7.x = _Object2World[0].y;
  v_7.y = _Object2World[1].y;
  v_7.z = _Object2World[2].y;
  vec3 v_8;
  v_8.x = _Object2World[0].z;
  v_8.y = _Object2World[1].z;
  v_8.z = _Object2World[2].z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  xlv_TEXCOORD1 = ((tmpvar_5 * v_6) * unity_Scale.w);
  xlv_TEXCOORD2 = ((tmpvar_5 * v_7) * unity_Scale.w);
  xlv_TEXCOORD3 = ((tmpvar_5 * v_8) * unity_Scale.w);
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform sampler2D _BumpMap;
in highp vec2 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 worldN_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = ((texture (_BumpMap, xlv_TEXCOORD0).xyz * 2.0) - 1.0);
  highp float tmpvar_4;
  tmpvar_4 = dot (xlv_TEXCOORD1, tmpvar_3);
  worldN_2.x = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = dot (xlv_TEXCOORD2, tmpvar_3);
  worldN_2.y = tmpvar_5;
  highp float tmpvar_6;
  tmpvar_6 = dot (xlv_TEXCOORD3, tmpvar_3);
  worldN_2.z = tmpvar_6;
  res_1.xyz = ((worldN_2 * 0.5) + 0.5);
  res_1.w = 0.0;
  _glesFragData[0] = res_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
"!!GLES"
}
SubProgram "gles3 " {
"!!GLES3"
}
}
 }
 Pass {
  Name "PREPASS"
  Tags { "LIGHTMODE"="PrePassFinal" "RenderType"="Opaque" }
  ZWrite Off
Program "vp" {
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_3.zw;
  mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = (tmpvar_7 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_9;
  mediump vec4 normal_10;
  normal_10 = tmpvar_8;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  tmpvar_9 = ((x1_14 + x2_13) + x3_12);
  tmpvar_2 = tmpvar_9;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = o_4;
  xlv_TEXCOORD2 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = (texture2D (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  tmpvar_6 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_6.w;
  highp vec3 tmpvar_7;
  tmpvar_7 = (tmpvar_6.xyz + xlv_TEXCOORD2);
  light_3.xyz = tmpvar_7;
  lowp vec4 c_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_4.xyz * light_3.xyz);
  c_8.xyz = tmpvar_9;
  c_8.w = tmpvar_4.w;
  c_2 = c_8;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_3.zw;
  mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = (tmpvar_7 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_9;
  mediump vec4 normal_10;
  normal_10 = tmpvar_8;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  tmpvar_9 = ((x1_14 + x2_13) + x3_12);
  tmpvar_2 = tmpvar_9;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = o_4;
  xlv_TEXCOORD2 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = (texture (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp vec4 tmpvar_5;
  tmpvar_5 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  tmpvar_6 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_6.w;
  highp vec3 tmpvar_7;
  tmpvar_7 = (tmpvar_6.xyz + xlv_TEXCOORD2);
  light_3.xyz = tmpvar_7;
  lowp vec4 c_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_4.xyz * light_3.xyz);
  c_8.xyz = tmpvar_9;
  c_8.w = tmpvar_4.w;
  c_2 = c_8;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_3.zw;
  tmpvar_2.xyz = (((_Object2World * _glesVertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_2.w = (-((glstate_matrix_modelview0 * _glesVertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = o_4;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec3 lmIndirect_3;
  mediump vec3 lmFull_4;
  mediump float lmFade_5;
  mediump vec4 light_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = (texture2D (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_6 = tmpvar_8;
  mediump vec4 tmpvar_9;
  tmpvar_9 = -(log2(max (light_6, vec4(0.001, 0.001, 0.001, 0.001))));
  light_6.w = tmpvar_9.w;
  highp float tmpvar_10;
  tmpvar_10 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * unity_LightmapFade.z) + unity_LightmapFade.w);
  lmFade_5 = tmpvar_10;
  lowp vec3 tmpvar_11;
  tmpvar_11 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lmFull_4 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = (2.0 * texture2D (unity_LightmapInd, xlv_TEXCOORD2).xyz);
  lmIndirect_3 = tmpvar_12;
  light_6.xyz = (tmpvar_9.xyz + mix (lmIndirect_3, lmFull_4, vec3(clamp (lmFade_5, 0.0, 1.0))));
  lowp vec4 c_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_7.xyz * light_6.xyz);
  c_13.xyz = tmpvar_14;
  c_13.w = tmpvar_7.w;
  c_2 = c_13;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_3.zw;
  tmpvar_2.xyz = (((_Object2World * _glesVertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_2.w = (-((glstate_matrix_modelview0 * _glesVertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = o_4;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec3 lmIndirect_3;
  mediump vec3 lmFull_4;
  mediump float lmFade_5;
  mediump vec4 light_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = (texture (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp vec4 tmpvar_8;
  tmpvar_8 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_6 = tmpvar_8;
  mediump vec4 tmpvar_9;
  tmpvar_9 = -(log2(max (light_6, vec4(0.001, 0.001, 0.001, 0.001))));
  light_6.w = tmpvar_9.w;
  highp float tmpvar_10;
  tmpvar_10 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * unity_LightmapFade.z) + unity_LightmapFade.w);
  lmFade_5 = tmpvar_10;
  lowp vec3 tmpvar_11;
  tmpvar_11 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lmFull_4 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = (2.0 * texture (unity_LightmapInd, xlv_TEXCOORD2).xyz);
  lmIndirect_3 = tmpvar_12;
  light_6.xyz = (tmpvar_9.xyz + mix (lmIndirect_3, lmFull_4, vec3(clamp (lmFade_5, 0.0, 1.0))));
  lowp vec4 c_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_7.xyz * light_6.xyz);
  c_13.xyz = tmpvar_14;
  c_13.w = tmpvar_7.w;
  c_2 = c_13;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = (texture2D (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp vec3 tmpvar_5;
  tmpvar_5 = ((texture2D (_BumpMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_6;
  mat3 tmpvar_7;
  tmpvar_7[0].x = 0.816497;
  tmpvar_7[0].y = -0.408248;
  tmpvar_7[0].z = -0.408248;
  tmpvar_7[1].x = 0.0;
  tmpvar_7[1].y = 0.707107;
  tmpvar_7[1].z = -0.707107;
  tmpvar_7[2].x = 0.57735;
  tmpvar_7[2].y = 0.57735;
  tmpvar_7[2].z = 0.57735;
  mediump vec3 normal_8;
  normal_8 = tmpvar_5;
  mediump vec3 scalePerBasisVector_9;
  mediump vec3 lm_10;
  lowp vec3 tmpvar_11;
  tmpvar_11 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lm_10 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = (2.0 * texture2D (unity_LightmapInd, xlv_TEXCOORD2).xyz);
  scalePerBasisVector_9 = tmpvar_12;
  lm_10 = (lm_10 * dot (clamp ((tmpvar_7 * normal_8), 0.0, 1.0), scalePerBasisVector_9));
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 0.0;
  tmpvar_13.xyz = lm_10;
  mediump vec4 tmpvar_14;
  tmpvar_14 = (-(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001)))) + tmpvar_13);
  light_3 = tmpvar_14;
  lowp vec4 c_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_4.xyz * tmpvar_14.xyz);
  c_15.xyz = tmpvar_16;
  c_15.w = tmpvar_4.w;
  c_2 = c_15;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = (texture (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp vec3 tmpvar_5;
  tmpvar_5 = ((texture (_BumpMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_6;
  mat3 tmpvar_7;
  tmpvar_7[0].x = 0.816497;
  tmpvar_7[0].y = -0.408248;
  tmpvar_7[0].z = -0.408248;
  tmpvar_7[1].x = 0.0;
  tmpvar_7[1].y = 0.707107;
  tmpvar_7[1].z = -0.707107;
  tmpvar_7[2].x = 0.57735;
  tmpvar_7[2].y = 0.57735;
  tmpvar_7[2].z = 0.57735;
  mediump vec3 normal_8;
  normal_8 = tmpvar_5;
  mediump vec3 scalePerBasisVector_9;
  mediump vec3 lm_10;
  lowp vec3 tmpvar_11;
  tmpvar_11 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lm_10 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = (2.0 * texture (unity_LightmapInd, xlv_TEXCOORD2).xyz);
  scalePerBasisVector_9 = tmpvar_12;
  lm_10 = (lm_10 * dot (clamp ((tmpvar_7 * normal_8), 0.0, 1.0), scalePerBasisVector_9));
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 0.0;
  tmpvar_13.xyz = lm_10;
  mediump vec4 tmpvar_14;
  tmpvar_14 = (-(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001)))) + tmpvar_13);
  light_3 = tmpvar_14;
  lowp vec4 c_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_4.xyz * tmpvar_14.xyz);
  c_15.xyz = tmpvar_16;
  c_15.w = tmpvar_4.w;
  c_2 = c_15;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_3.zw;
  mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = (tmpvar_7 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_9;
  mediump vec4 normal_10;
  normal_10 = tmpvar_8;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  tmpvar_9 = ((x1_14 + x2_13) + x3_12);
  tmpvar_2 = tmpvar_9;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = o_4;
  xlv_TEXCOORD2 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = (texture2D (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  tmpvar_6 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_6.w;
  highp vec3 tmpvar_7;
  tmpvar_7 = (tmpvar_6.xyz + xlv_TEXCOORD2);
  light_3.xyz = tmpvar_7;
  lowp vec4 c_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_4.xyz * light_3.xyz);
  c_8.xyz = tmpvar_9;
  c_8.w = tmpvar_4.w;
  c_2 = c_8;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_3.zw;
  mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = (tmpvar_7 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_9;
  mediump vec4 normal_10;
  normal_10 = tmpvar_8;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  tmpvar_9 = ((x1_14 + x2_13) + x3_12);
  tmpvar_2 = tmpvar_9;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = o_4;
  xlv_TEXCOORD2 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = (texture (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp vec4 tmpvar_5;
  tmpvar_5 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  tmpvar_6 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_6.w;
  highp vec3 tmpvar_7;
  tmpvar_7 = (tmpvar_6.xyz + xlv_TEXCOORD2);
  light_3.xyz = tmpvar_7;
  lowp vec4 c_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_4.xyz * light_3.xyz);
  c_8.xyz = tmpvar_9;
  c_8.w = tmpvar_4.w;
  c_2 = c_8;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_3.zw;
  tmpvar_2.xyz = (((_Object2World * _glesVertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_2.w = (-((glstate_matrix_modelview0 * _glesVertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = o_4;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec3 lmIndirect_3;
  mediump vec3 lmFull_4;
  mediump float lmFade_5;
  mediump vec4 light_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = (texture2D (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_6 = tmpvar_8;
  mediump vec4 tmpvar_9;
  tmpvar_9 = max (light_6, vec4(0.001, 0.001, 0.001, 0.001));
  light_6.w = tmpvar_9.w;
  highp float tmpvar_10;
  tmpvar_10 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * unity_LightmapFade.z) + unity_LightmapFade.w);
  lmFade_5 = tmpvar_10;
  lowp vec3 tmpvar_11;
  tmpvar_11 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lmFull_4 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = (2.0 * texture2D (unity_LightmapInd, xlv_TEXCOORD2).xyz);
  lmIndirect_3 = tmpvar_12;
  light_6.xyz = (tmpvar_9.xyz + mix (lmIndirect_3, lmFull_4, vec3(clamp (lmFade_5, 0.0, 1.0))));
  lowp vec4 c_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_7.xyz * light_6.xyz);
  c_13.xyz = tmpvar_14;
  c_13.w = tmpvar_7.w;
  c_2 = c_13;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_3.zw;
  tmpvar_2.xyz = (((_Object2World * _glesVertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_2.w = (-((glstate_matrix_modelview0 * _glesVertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = o_4;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec3 lmIndirect_3;
  mediump vec3 lmFull_4;
  mediump float lmFade_5;
  mediump vec4 light_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = (texture (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp vec4 tmpvar_8;
  tmpvar_8 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_6 = tmpvar_8;
  mediump vec4 tmpvar_9;
  tmpvar_9 = max (light_6, vec4(0.001, 0.001, 0.001, 0.001));
  light_6.w = tmpvar_9.w;
  highp float tmpvar_10;
  tmpvar_10 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * unity_LightmapFade.z) + unity_LightmapFade.w);
  lmFade_5 = tmpvar_10;
  lowp vec3 tmpvar_11;
  tmpvar_11 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lmFull_4 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = (2.0 * texture (unity_LightmapInd, xlv_TEXCOORD2).xyz);
  lmIndirect_3 = tmpvar_12;
  light_6.xyz = (tmpvar_9.xyz + mix (lmIndirect_3, lmFull_4, vec3(clamp (lmFade_5, 0.0, 1.0))));
  lowp vec4 c_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_7.xyz * light_6.xyz);
  c_13.xyz = tmpvar_14;
  c_13.w = tmpvar_7.w;
  c_2 = c_13;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = (texture2D (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp vec3 tmpvar_5;
  tmpvar_5 = ((texture2D (_BumpMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_6;
  mat3 tmpvar_7;
  tmpvar_7[0].x = 0.816497;
  tmpvar_7[0].y = -0.408248;
  tmpvar_7[0].z = -0.408248;
  tmpvar_7[1].x = 0.0;
  tmpvar_7[1].y = 0.707107;
  tmpvar_7[1].z = -0.707107;
  tmpvar_7[2].x = 0.57735;
  tmpvar_7[2].y = 0.57735;
  tmpvar_7[2].z = 0.57735;
  mediump vec3 normal_8;
  normal_8 = tmpvar_5;
  mediump vec3 scalePerBasisVector_9;
  mediump vec3 lm_10;
  lowp vec3 tmpvar_11;
  tmpvar_11 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lm_10 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = (2.0 * texture2D (unity_LightmapInd, xlv_TEXCOORD2).xyz);
  scalePerBasisVector_9 = tmpvar_12;
  lm_10 = (lm_10 * dot (clamp ((tmpvar_7 * normal_8), 0.0, 1.0), scalePerBasisVector_9));
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 0.0;
  tmpvar_13.xyz = lm_10;
  mediump vec4 tmpvar_14;
  tmpvar_14 = (max (light_3, vec4(0.001, 0.001, 0.001, 0.001)) + tmpvar_13);
  light_3 = tmpvar_14;
  lowp vec4 c_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_4.xyz * tmpvar_14.xyz);
  c_15.xyz = tmpvar_16;
  c_15.w = tmpvar_4.w;
  c_2 = c_15;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = (texture (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp vec3 tmpvar_5;
  tmpvar_5 = ((texture (_BumpMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_6;
  mat3 tmpvar_7;
  tmpvar_7[0].x = 0.816497;
  tmpvar_7[0].y = -0.408248;
  tmpvar_7[0].z = -0.408248;
  tmpvar_7[1].x = 0.0;
  tmpvar_7[1].y = 0.707107;
  tmpvar_7[1].z = -0.707107;
  tmpvar_7[2].x = 0.57735;
  tmpvar_7[2].y = 0.57735;
  tmpvar_7[2].z = 0.57735;
  mediump vec3 normal_8;
  normal_8 = tmpvar_5;
  mediump vec3 scalePerBasisVector_9;
  mediump vec3 lm_10;
  lowp vec3 tmpvar_11;
  tmpvar_11 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lm_10 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = (2.0 * texture (unity_LightmapInd, xlv_TEXCOORD2).xyz);
  scalePerBasisVector_9 = tmpvar_12;
  lm_10 = (lm_10 * dot (clamp ((tmpvar_7 * normal_8), 0.0, 1.0), scalePerBasisVector_9));
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 0.0;
  tmpvar_13.xyz = lm_10;
  mediump vec4 tmpvar_14;
  tmpvar_14 = (max (light_3, vec4(0.001, 0.001, 0.001, 0.001)) + tmpvar_13);
  light_3 = tmpvar_14;
  lowp vec4 c_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_4.xyz * tmpvar_14.xyz);
  c_15.xyz = tmpvar_16;
  c_15.w = tmpvar_4.w;
  c_2 = c_15;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3"
}
}
 }
}
Fallback "Diffuse"
}                           Normal-Glossy   ¯¥ Shader "Specular" {
Properties {
 _Color ("Main Color", Color) = (1,1,1,1)
 _SpecColor ("Specular Color", Color) = (0.5,0.5,0.5,1)
 _Shininess ("Shininess", Range(0.01,1)) = 0.078125
 _MainTex ("Base (RGB) Gloss (A)", 2D) = "white" {}
}
SubShader { 
 LOD 300
 Tags { "RenderType"="Opaque" }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardBase" "SHADOWSUPPORT"="true" "RenderType"="Opaque" }
Program "vp" {
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2.xyz * _Color.xyz);
  lowp float tmpvar_4;
  tmpvar_4 = (tmpvar_2.w * _Color.w);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD3);
  mediump vec3 viewDir_6;
  viewDir_6 = tmpvar_5;
  lowp vec4 c_7;
  highp float nh_8;
  lowp float tmpvar_9;
  tmpvar_9 = max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz));
  mediump float tmpvar_10;
  tmpvar_10 = max (0.0, dot (xlv_TEXCOORD1, normalize((_WorldSpaceLightPos0.xyz + viewDir_6))));
  nh_8 = tmpvar_10;
  mediump float arg1_11;
  arg1_11 = (_Shininess * 128.0);
  highp float tmpvar_12;
  tmpvar_12 = (pow (nh_8, arg1_11) * tmpvar_2.w);
  highp vec3 tmpvar_13;
  tmpvar_13 = ((((tmpvar_3 * _LightColor0.xyz) * tmpvar_9) + ((_LightColor0.xyz * _SpecColor.xyz) * tmpvar_12)) * 2.0);
  c_7.xyz = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (tmpvar_4 + ((_LightColor0.w * _SpecColor.w) * tmpvar_12));
  c_7.w = tmpvar_14;
  c_1.w = c_7.w;
  c_1.xyz = (c_7.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
in highp vec2 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2.xyz * _Color.xyz);
  lowp float tmpvar_4;
  tmpvar_4 = (tmpvar_2.w * _Color.w);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD3);
  mediump vec3 viewDir_6;
  viewDir_6 = tmpvar_5;
  lowp vec4 c_7;
  highp float nh_8;
  lowp float tmpvar_9;
  tmpvar_9 = max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz));
  mediump float tmpvar_10;
  tmpvar_10 = max (0.0, dot (xlv_TEXCOORD1, normalize((_WorldSpaceLightPos0.xyz + viewDir_6))));
  nh_8 = tmpvar_10;
  mediump float arg1_11;
  arg1_11 = (_Shininess * 128.0);
  highp float tmpvar_12;
  tmpvar_12 = (pow (nh_8, arg1_11) * tmpvar_2.w);
  highp vec3 tmpvar_13;
  tmpvar_13 = ((((tmpvar_3 * _LightColor0.xyz) * tmpvar_9) + ((_LightColor0.xyz * _SpecColor.xyz) * tmpvar_12)) * 2.0);
  c_7.xyz = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (tmpvar_4 + ((_LightColor0.w * _SpecColor.w) * tmpvar_12));
  c_7.w = tmpvar_14;
  c_1.w = c_7.w;
  c_1.xyz = (c_7.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D unity_Lightmap;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0);
  c_1.xyz = ((tmpvar_2.xyz * _Color.xyz) * (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz));
  c_1.w = (tmpvar_2.w * _Color.w);
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out highp vec2 xlv_TEXCOORD1;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D unity_Lightmap;
in highp vec2 xlv_TEXCOORD0;
in highp vec2 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture (_MainTex, xlv_TEXCOORD0);
  c_1.xyz = ((tmpvar_2.xyz * _Color.xyz) * (2.0 * texture (unity_Lightmap, xlv_TEXCOORD1).xyz));
  c_1.w = (tmpvar_2.w * _Color.w);
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  tmpvar_3 = tmpvar_1.xyz;
  tmpvar_4 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = tmpvar_2.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = tmpvar_2.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = tmpvar_2.z;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (tmpvar_5 * (((_World2Object * tmpvar_6).xyz * unity_Scale.w) - _glesVertex.xyz));
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _SpecColor;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2.xyz * _Color.xyz);
  c_1.w = 0.0;
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2);
  mediump vec4 tmpvar_5;
  mediump vec3 viewDir_6;
  viewDir_6 = tmpvar_4;
  mediump vec3 specColor_7;
  highp float nh_8;
  mediump vec3 scalePerBasisVector_9;
  mediump vec3 lm_10;
  lowp vec3 tmpvar_11;
  tmpvar_11 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_10 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = (2.0 * texture2D (unity_LightmapInd, xlv_TEXCOORD1).xyz);
  scalePerBasisVector_9 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = max (0.0, normalize((normalize((((scalePerBasisVector_9.x * vec3(0.816497, 0.0, 0.57735)) + (scalePerBasisVector_9.y * vec3(-0.408248, 0.707107, 0.57735))) + (scalePerBasisVector_9.z * vec3(-0.408248, -0.707107, 0.57735)))) + viewDir_6)).z);
  nh_8 = tmpvar_13;
  highp float tmpvar_14;
  mediump float arg1_15;
  arg1_15 = (_Shininess * 128.0);
  tmpvar_14 = pow (nh_8, arg1_15);
  highp vec3 tmpvar_16;
  tmpvar_16 = (((lm_10 * _SpecColor.xyz) * tmpvar_2.w) * tmpvar_14);
  specColor_7 = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.xyz = lm_10;
  tmpvar_17.w = tmpvar_14;
  tmpvar_5 = tmpvar_17;
  c_1.xyz = specColor_7;
  mediump vec3 tmpvar_18;
  tmpvar_18 = (c_1.xyz + (tmpvar_3 * tmpvar_5.xyz));
  c_1.xyz = tmpvar_18;
  c_1.w = (tmpvar_2.w * _Color.w);
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out highp vec2 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  tmpvar_3 = tmpvar_1.xyz;
  tmpvar_4 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = tmpvar_2.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = tmpvar_2.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = tmpvar_2.z;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (tmpvar_5 * (((_World2Object * tmpvar_6).xyz * unity_Scale.w) - _glesVertex.xyz));
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _SpecColor;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
in highp vec2 xlv_TEXCOORD0;
in highp vec2 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2.xyz * _Color.xyz);
  c_1.w = 0.0;
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2);
  mediump vec4 tmpvar_5;
  mediump vec3 viewDir_6;
  viewDir_6 = tmpvar_4;
  mediump vec3 specColor_7;
  highp float nh_8;
  mediump vec3 scalePerBasisVector_9;
  mediump vec3 lm_10;
  lowp vec3 tmpvar_11;
  tmpvar_11 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_10 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = (2.0 * texture (unity_LightmapInd, xlv_TEXCOORD1).xyz);
  scalePerBasisVector_9 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = max (0.0, normalize((normalize((((scalePerBasisVector_9.x * vec3(0.816497, 0.0, 0.57735)) + (scalePerBasisVector_9.y * vec3(-0.408248, 0.707107, 0.57735))) + (scalePerBasisVector_9.z * vec3(-0.408248, -0.707107, 0.57735)))) + viewDir_6)).z);
  nh_8 = tmpvar_13;
  highp float tmpvar_14;
  mediump float arg1_15;
  arg1_15 = (_Shininess * 128.0);
  tmpvar_14 = pow (nh_8, arg1_15);
  highp vec3 tmpvar_16;
  tmpvar_16 = (((lm_10 * _SpecColor.xyz) * tmpvar_2.w) * tmpvar_14);
  specColor_7 = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.xyz = lm_10;
  tmpvar_17.w = tmpvar_14;
  tmpvar_5 = tmpvar_17;
  c_1.xyz = specColor_7;
  mediump vec3 tmpvar_18;
  tmpvar_18 = (c_1.xyz + (tmpvar_3 * tmpvar_5.xyz));
  c_1.xyz = tmpvar_18;
  c_1.w = (tmpvar_2.w * _Color.w);
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2.xyz * _Color.xyz);
  lowp float tmpvar_4;
  tmpvar_4 = (tmpvar_2.w * _Color.w);
  lowp float tmpvar_5;
  mediump float lightShadowDataX_6;
  highp float dist_7;
  lowp float tmpvar_8;
  tmpvar_8 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x;
  dist_7 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = _LightShadowData.x;
  lightShadowDataX_6 = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = max (float((dist_7 > (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))), lightShadowDataX_6);
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD3);
  mediump vec3 viewDir_12;
  viewDir_12 = tmpvar_11;
  lowp vec4 c_13;
  highp float nh_14;
  lowp float tmpvar_15;
  tmpvar_15 = max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz));
  mediump float tmpvar_16;
  tmpvar_16 = max (0.0, dot (xlv_TEXCOORD1, normalize((_WorldSpaceLightPos0.xyz + viewDir_12))));
  nh_14 = tmpvar_16;
  mediump float arg1_17;
  arg1_17 = (_Shininess * 128.0);
  highp float tmpvar_18;
  tmpvar_18 = (pow (nh_14, arg1_17) * tmpvar_2.w);
  highp vec3 tmpvar_19;
  tmpvar_19 = ((((tmpvar_3 * _LightColor0.xyz) * tmpvar_15) + ((_LightColor0.xyz * _SpecColor.xyz) * tmpvar_18)) * (tmpvar_5 * 2.0));
  c_13.xyz = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_4 + (((_LightColor0.w * _SpecColor.w) * tmpvar_18) * tmpvar_5));
  c_13.w = tmpvar_20;
  c_1.w = c_13.w;
  c_1.xyz = (c_13.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
in highp vec2 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2.xyz * _Color.xyz);
  lowp float tmpvar_4;
  tmpvar_4 = (tmpvar_2.w * _Color.w);
  lowp float tmpvar_5;
  mediump float lightShadowDataX_6;
  highp float dist_7;
  lowp float tmpvar_8;
  tmpvar_8 = textureProj (_ShadowMapTexture, xlv_TEXCOORD4).x;
  dist_7 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = _LightShadowData.x;
  lightShadowDataX_6 = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = max (float((dist_7 > (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))), lightShadowDataX_6);
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD3);
  mediump vec3 viewDir_12;
  viewDir_12 = tmpvar_11;
  lowp vec4 c_13;
  highp float nh_14;
  lowp float tmpvar_15;
  tmpvar_15 = max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz));
  mediump float tmpvar_16;
  tmpvar_16 = max (0.0, dot (xlv_TEXCOORD1, normalize((_WorldSpaceLightPos0.xyz + viewDir_12))));
  nh_14 = tmpvar_16;
  mediump float arg1_17;
  arg1_17 = (_Shininess * 128.0);
  highp float tmpvar_18;
  tmpvar_18 = (pow (nh_14, arg1_17) * tmpvar_2.w);
  highp vec3 tmpvar_19;
  tmpvar_19 = ((((tmpvar_3 * _LightColor0.xyz) * tmpvar_15) + ((_LightColor0.xyz * _SpecColor.xyz) * tmpvar_18)) * (tmpvar_5 * 2.0));
  c_13.xyz = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_4 + (((_LightColor0.w * _SpecColor.w) * tmpvar_18) * tmpvar_5));
  c_13.w = tmpvar_20;
  c_1.w = c_13.w;
  c_1.xyz = (c_13.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _LightShadowData;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D unity_Lightmap;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp float tmpvar_3;
  mediump float lightShadowDataX_4;
  highp float dist_5;
  lowp float tmpvar_6;
  tmpvar_6 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD2).x;
  dist_5 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = _LightShadowData.x;
  lightShadowDataX_4 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = max (float((dist_5 > (xlv_TEXCOORD2.z / xlv_TEXCOORD2.w))), lightShadowDataX_4);
  tmpvar_3 = tmpvar_8;
  c_1.xyz = ((tmpvar_2.xyz * _Color.xyz) * min ((2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz), vec3((tmpvar_3 * 2.0))));
  c_1.w = (tmpvar_2.w * _Color.w);
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out highp vec2 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform highp vec4 _LightShadowData;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D unity_Lightmap;
in highp vec2 xlv_TEXCOORD0;
in highp vec2 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture (_MainTex, xlv_TEXCOORD0);
  lowp float tmpvar_3;
  mediump float lightShadowDataX_4;
  highp float dist_5;
  lowp float tmpvar_6;
  tmpvar_6 = textureProj (_ShadowMapTexture, xlv_TEXCOORD2).x;
  dist_5 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = _LightShadowData.x;
  lightShadowDataX_4 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = max (float((dist_5 > (xlv_TEXCOORD2.z / xlv_TEXCOORD2.w))), lightShadowDataX_4);
  tmpvar_3 = tmpvar_8;
  c_1.xyz = ((tmpvar_2.xyz * _Color.xyz) * min ((2.0 * texture (unity_Lightmap, xlv_TEXCOORD1).xyz), vec3((tmpvar_3 * 2.0))));
  c_1.w = (tmpvar_2.w * _Color.w);
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  tmpvar_3 = tmpvar_1.xyz;
  tmpvar_4 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = tmpvar_2.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = tmpvar_2.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = tmpvar_2.z;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (tmpvar_5 * (((_World2Object * tmpvar_6).xyz * unity_Scale.w) - _glesVertex.xyz));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _LightShadowData;
uniform lowp vec4 _SpecColor;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2.xyz * _Color.xyz);
  lowp float tmpvar_4;
  mediump float lightShadowDataX_5;
  highp float dist_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_6 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = _LightShadowData.x;
  lightShadowDataX_5 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = max (float((dist_6 > (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))), lightShadowDataX_5);
  tmpvar_4 = tmpvar_9;
  c_1.w = 0.0;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2);
  mediump vec4 tmpvar_11;
  mediump vec3 viewDir_12;
  viewDir_12 = tmpvar_10;
  mediump vec3 specColor_13;
  highp float nh_14;
  mediump vec3 scalePerBasisVector_15;
  mediump vec3 lm_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_16 = tmpvar_17;
  lowp vec3 tmpvar_18;
  tmpvar_18 = (2.0 * texture2D (unity_LightmapInd, xlv_TEXCOORD1).xyz);
  scalePerBasisVector_15 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, normalize((normalize((((scalePerBasisVector_15.x * vec3(0.816497, 0.0, 0.57735)) + (scalePerBasisVector_15.y * vec3(-0.408248, 0.707107, 0.57735))) + (scalePerBasisVector_15.z * vec3(-0.408248, -0.707107, 0.57735)))) + viewDir_12)).z);
  nh_14 = tmpvar_19;
  highp float tmpvar_20;
  mediump float arg1_21;
  arg1_21 = (_Shininess * 128.0);
  tmpvar_20 = pow (nh_14, arg1_21);
  highp vec3 tmpvar_22;
  tmpvar_22 = (((lm_16 * _SpecColor.xyz) * tmpvar_2.w) * tmpvar_20);
  specColor_13 = tmpvar_22;
  highp vec4 tmpvar_23;
  tmpvar_23.xyz = lm_16;
  tmpvar_23.w = tmpvar_20;
  tmpvar_11 = tmpvar_23;
  c_1.xyz = specColor_13;
  lowp vec3 tmpvar_24;
  tmpvar_24 = vec3((tmpvar_4 * 2.0));
  mediump vec3 tmpvar_25;
  tmpvar_25 = (c_1.xyz + (tmpvar_3 * min (tmpvar_11.xyz, tmpvar_24)));
  c_1.xyz = tmpvar_25;
  c_1.w = (tmpvar_2.w * _Color.w);
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out highp vec2 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  tmpvar_3 = tmpvar_1.xyz;
  tmpvar_4 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = tmpvar_2.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = tmpvar_2.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = tmpvar_2.z;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (tmpvar_5 * (((_World2Object * tmpvar_6).xyz * unity_Scale.w) - _glesVertex.xyz));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _SpecColor;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
in highp vec2 xlv_TEXCOORD0;
in highp vec2 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2.xyz * _Color.xyz);
  lowp float tmpvar_4;
  mediump float lightShadowDataX_5;
  highp float dist_6;
  lowp float tmpvar_7;
  tmpvar_7 = textureProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_6 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = _LightShadowData.x;
  lightShadowDataX_5 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = max (float((dist_6 > (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))), lightShadowDataX_5);
  tmpvar_4 = tmpvar_9;
  c_1.w = 0.0;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2);
  mediump vec4 tmpvar_11;
  mediump vec3 viewDir_12;
  viewDir_12 = tmpvar_10;
  mediump vec3 specColor_13;
  highp float nh_14;
  mediump vec3 scalePerBasisVector_15;
  mediump vec3 lm_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_16 = tmpvar_17;
  lowp vec3 tmpvar_18;
  tmpvar_18 = (2.0 * texture (unity_LightmapInd, xlv_TEXCOORD1).xyz);
  scalePerBasisVector_15 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, normalize((normalize((((scalePerBasisVector_15.x * vec3(0.816497, 0.0, 0.57735)) + (scalePerBasisVector_15.y * vec3(-0.408248, 0.707107, 0.57735))) + (scalePerBasisVector_15.z * vec3(-0.408248, -0.707107, 0.57735)))) + viewDir_12)).z);
  nh_14 = tmpvar_19;
  highp float tmpvar_20;
  mediump float arg1_21;
  arg1_21 = (_Shininess * 128.0);
  tmpvar_20 = pow (nh_14, arg1_21);
  highp vec3 tmpvar_22;
  tmpvar_22 = (((lm_16 * _SpecColor.xyz) * tmpvar_2.w) * tmpvar_20);
  specColor_13 = tmpvar_22;
  highp vec4 tmpvar_23;
  tmpvar_23.xyz = lm_16;
  tmpvar_23.w = tmpvar_20;
  tmpvar_11 = tmpvar_23;
  c_1.xyz = specColor_13;
  lowp vec3 tmpvar_24;
  tmpvar_24 = vec3((tmpvar_4 * 2.0));
  mediump vec3 tmpvar_25;
  tmpvar_25 = (c_1.xyz + (tmpvar_3 * min (tmpvar_11.xyz, tmpvar_24)));
  c_1.xyz = tmpvar_25;
  c_1.w = (tmpvar_2.w * _Color.w);
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  highp vec3 tmpvar_22;
  tmpvar_22 = (_Object2World * _glesVertex).xyz;
  highp vec4 tmpvar_23;
  tmpvar_23 = (unity_4LightPosX0 - tmpvar_22.x);
  highp vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosY0 - tmpvar_22.y);
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosZ0 - tmpvar_22.z);
  highp vec4 tmpvar_26;
  tmpvar_26 = (((tmpvar_23 * tmpvar_23) + (tmpvar_24 * tmpvar_24)) + (tmpvar_25 * tmpvar_25));
  highp vec4 tmpvar_27;
  tmpvar_27 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_23 * tmpvar_5.x) + (tmpvar_24 * tmpvar_5.y)) + (tmpvar_25 * tmpvar_5.z)) * inversesqrt(tmpvar_26))) * (1.0/((1.0 + (tmpvar_26 * unity_4LightAtten0)))));
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_3 + ((((unity_LightColor[0].xyz * tmpvar_27.x) + (unity_LightColor[1].xyz * tmpvar_27.y)) + (unity_LightColor[2].xyz * tmpvar_27.z)) + (unity_LightColor[3].xyz * tmpvar_27.w)));
  tmpvar_3 = tmpvar_28;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2.xyz * _Color.xyz);
  lowp float tmpvar_4;
  tmpvar_4 = (tmpvar_2.w * _Color.w);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD3);
  mediump vec3 viewDir_6;
  viewDir_6 = tmpvar_5;
  lowp vec4 c_7;
  highp float nh_8;
  lowp float tmpvar_9;
  tmpvar_9 = max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz));
  mediump float tmpvar_10;
  tmpvar_10 = max (0.0, dot (xlv_TEXCOORD1, normalize((_WorldSpaceLightPos0.xyz + viewDir_6))));
  nh_8 = tmpvar_10;
  mediump float arg1_11;
  arg1_11 = (_Shininess * 128.0);
  highp float tmpvar_12;
  tmpvar_12 = (pow (nh_8, arg1_11) * tmpvar_2.w);
  highp vec3 tmpvar_13;
  tmpvar_13 = ((((tmpvar_3 * _LightColor0.xyz) * tmpvar_9) + ((_LightColor0.xyz * _SpecColor.xyz) * tmpvar_12)) * 2.0);
  c_7.xyz = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (tmpvar_4 + ((_LightColor0.w * _SpecColor.w) * tmpvar_12));
  c_7.w = tmpvar_14;
  c_1.w = c_7.w;
  c_1.xyz = (c_7.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  highp vec3 tmpvar_22;
  tmpvar_22 = (_Object2World * _glesVertex).xyz;
  highp vec4 tmpvar_23;
  tmpvar_23 = (unity_4LightPosX0 - tmpvar_22.x);
  highp vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosY0 - tmpvar_22.y);
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosZ0 - tmpvar_22.z);
  highp vec4 tmpvar_26;
  tmpvar_26 = (((tmpvar_23 * tmpvar_23) + (tmpvar_24 * tmpvar_24)) + (tmpvar_25 * tmpvar_25));
  highp vec4 tmpvar_27;
  tmpvar_27 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_23 * tmpvar_5.x) + (tmpvar_24 * tmpvar_5.y)) + (tmpvar_25 * tmpvar_5.z)) * inversesqrt(tmpvar_26))) * (1.0/((1.0 + (tmpvar_26 * unity_4LightAtten0)))));
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_3 + ((((unity_LightColor[0].xyz * tmpvar_27.x) + (unity_LightColor[1].xyz * tmpvar_27.y)) + (unity_LightColor[2].xyz * tmpvar_27.z)) + (unity_LightColor[3].xyz * tmpvar_27.w)));
  tmpvar_3 = tmpvar_28;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
in highp vec2 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2.xyz * _Color.xyz);
  lowp float tmpvar_4;
  tmpvar_4 = (tmpvar_2.w * _Color.w);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD3);
  mediump vec3 viewDir_6;
  viewDir_6 = tmpvar_5;
  lowp vec4 c_7;
  highp float nh_8;
  lowp float tmpvar_9;
  tmpvar_9 = max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz));
  mediump float tmpvar_10;
  tmpvar_10 = max (0.0, dot (xlv_TEXCOORD1, normalize((_WorldSpaceLightPos0.xyz + viewDir_6))));
  nh_8 = tmpvar_10;
  mediump float arg1_11;
  arg1_11 = (_Shininess * 128.0);
  highp float tmpvar_12;
  tmpvar_12 = (pow (nh_8, arg1_11) * tmpvar_2.w);
  highp vec3 tmpvar_13;
  tmpvar_13 = ((((tmpvar_3 * _LightColor0.xyz) * tmpvar_9) + ((_LightColor0.xyz * _SpecColor.xyz) * tmpvar_12)) * 2.0);
  c_7.xyz = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (tmpvar_4 + ((_LightColor0.w * _SpecColor.w) * tmpvar_12));
  c_7.w = tmpvar_14;
  c_1.w = c_7.w;
  c_1.xyz = (c_7.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  highp vec3 tmpvar_22;
  tmpvar_22 = (_Object2World * _glesVertex).xyz;
  highp vec4 tmpvar_23;
  tmpvar_23 = (unity_4LightPosX0 - tmpvar_22.x);
  highp vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosY0 - tmpvar_22.y);
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosZ0 - tmpvar_22.z);
  highp vec4 tmpvar_26;
  tmpvar_26 = (((tmpvar_23 * tmpvar_23) + (tmpvar_24 * tmpvar_24)) + (tmpvar_25 * tmpvar_25));
  highp vec4 tmpvar_27;
  tmpvar_27 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_23 * tmpvar_5.x) + (tmpvar_24 * tmpvar_5.y)) + (tmpvar_25 * tmpvar_5.z)) * inversesqrt(tmpvar_26))) * (1.0/((1.0 + (tmpvar_26 * unity_4LightAtten0)))));
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_3 + ((((unity_LightColor[0].xyz * tmpvar_27.x) + (unity_LightColor[1].xyz * tmpvar_27.y)) + (unity_LightColor[2].xyz * tmpvar_27.z)) + (unity_LightColor[3].xyz * tmpvar_27.w)));
  tmpvar_3 = tmpvar_28;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2.xyz * _Color.xyz);
  lowp float tmpvar_4;
  tmpvar_4 = (tmpvar_2.w * _Color.w);
  lowp float tmpvar_5;
  mediump float lightShadowDataX_6;
  highp float dist_7;
  lowp float tmpvar_8;
  tmpvar_8 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x;
  dist_7 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = _LightShadowData.x;
  lightShadowDataX_6 = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = max (float((dist_7 > (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))), lightShadowDataX_6);
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD3);
  mediump vec3 viewDir_12;
  viewDir_12 = tmpvar_11;
  lowp vec4 c_13;
  highp float nh_14;
  lowp float tmpvar_15;
  tmpvar_15 = max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz));
  mediump float tmpvar_16;
  tmpvar_16 = max (0.0, dot (xlv_TEXCOORD1, normalize((_WorldSpaceLightPos0.xyz + viewDir_12))));
  nh_14 = tmpvar_16;
  mediump float arg1_17;
  arg1_17 = (_Shininess * 128.0);
  highp float tmpvar_18;
  tmpvar_18 = (pow (nh_14, arg1_17) * tmpvar_2.w);
  highp vec3 tmpvar_19;
  tmpvar_19 = ((((tmpvar_3 * _LightColor0.xyz) * tmpvar_15) + ((_LightColor0.xyz * _SpecColor.xyz) * tmpvar_18)) * (tmpvar_5 * 2.0));
  c_13.xyz = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_4 + (((_LightColor0.w * _SpecColor.w) * tmpvar_18) * tmpvar_5));
  c_13.w = tmpvar_20;
  c_1.w = c_13.w;
  c_1.xyz = (c_13.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  highp vec3 tmpvar_22;
  tmpvar_22 = (_Object2World * _glesVertex).xyz;
  highp vec4 tmpvar_23;
  tmpvar_23 = (unity_4LightPosX0 - tmpvar_22.x);
  highp vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosY0 - tmpvar_22.y);
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosZ0 - tmpvar_22.z);
  highp vec4 tmpvar_26;
  tmpvar_26 = (((tmpvar_23 * tmpvar_23) + (tmpvar_24 * tmpvar_24)) + (tmpvar_25 * tmpvar_25));
  highp vec4 tmpvar_27;
  tmpvar_27 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_23 * tmpvar_5.x) + (tmpvar_24 * tmpvar_5.y)) + (tmpvar_25 * tmpvar_5.z)) * inversesqrt(tmpvar_26))) * (1.0/((1.0 + (tmpvar_26 * unity_4LightAtten0)))));
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_3 + ((((unity_LightColor[0].xyz * tmpvar_27.x) + (unity_LightColor[1].xyz * tmpvar_27.y)) + (unity_LightColor[2].xyz * tmpvar_27.z)) + (unity_LightColor[3].xyz * tmpvar_27.w)));
  tmpvar_3 = tmpvar_28;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
in highp vec2 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2.xyz * _Color.xyz);
  lowp float tmpvar_4;
  tmpvar_4 = (tmpvar_2.w * _Color.w);
  lowp float tmpvar_5;
  mediump float lightShadowDataX_6;
  highp float dist_7;
  lowp float tmpvar_8;
  tmpvar_8 = textureProj (_ShadowMapTexture, xlv_TEXCOORD4).x;
  dist_7 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = _LightShadowData.x;
  lightShadowDataX_6 = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = max (float((dist_7 > (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))), lightShadowDataX_6);
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD3);
  mediump vec3 viewDir_12;
  viewDir_12 = tmpvar_11;
  lowp vec4 c_13;
  highp float nh_14;
  lowp float tmpvar_15;
  tmpvar_15 = max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz));
  mediump float tmpvar_16;
  tmpvar_16 = max (0.0, dot (xlv_TEXCOORD1, normalize((_WorldSpaceLightPos0.xyz + viewDir_12))));
  nh_14 = tmpvar_16;
  mediump float arg1_17;
  arg1_17 = (_Shininess * 128.0);
  highp float tmpvar_18;
  tmpvar_18 = (pow (nh_14, arg1_17) * tmpvar_2.w);
  highp vec3 tmpvar_19;
  tmpvar_19 = ((((tmpvar_3 * _LightColor0.xyz) * tmpvar_15) + ((_LightColor0.xyz * _SpecColor.xyz) * tmpvar_18)) * (tmpvar_5 * 2.0));
  c_13.xyz = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_4 + (((_LightColor0.w * _SpecColor.w) * tmpvar_18) * tmpvar_5));
  c_13.w = tmpvar_20;
  c_1.w = c_13.w;
  c_1.xyz = (c_13.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2.xyz * _Color.xyz);
  lowp float tmpvar_4;
  tmpvar_4 = (tmpvar_2.w * _Color.w);
  lowp float shadow_5;
  lowp float tmpvar_6;
  tmpvar_6 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD4.xyz);
  highp float tmpvar_7;
  tmpvar_7 = (_LightShadowData.x + (tmpvar_6 * (1.0 - _LightShadowData.x)));
  shadow_5 = tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3);
  mediump vec3 viewDir_9;
  viewDir_9 = tmpvar_8;
  lowp vec4 c_10;
  highp float nh_11;
  lowp float tmpvar_12;
  tmpvar_12 = max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz));
  mediump float tmpvar_13;
  tmpvar_13 = max (0.0, dot (xlv_TEXCOORD1, normalize((_WorldSpaceLightPos0.xyz + viewDir_9))));
  nh_11 = tmpvar_13;
  mediump float arg1_14;
  arg1_14 = (_Shininess * 128.0);
  highp float tmpvar_15;
  tmpvar_15 = (pow (nh_11, arg1_14) * tmpvar_2.w);
  highp vec3 tmpvar_16;
  tmpvar_16 = ((((tmpvar_3 * _LightColor0.xyz) * tmpvar_12) + ((_LightColor0.xyz * _SpecColor.xyz) * tmpvar_15)) * (shadow_5 * 2.0));
  c_10.xyz = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = (tmpvar_4 + (((_LightColor0.w * _SpecColor.w) * tmpvar_15) * shadow_5));
  c_10.w = tmpvar_17;
  c_1.w = c_10.w;
  c_1.xyz = (c_10.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
in highp vec2 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2.xyz * _Color.xyz);
  lowp float tmpvar_4;
  tmpvar_4 = (tmpvar_2.w * _Color.w);
  lowp float shadow_5;
  mediump float tmpvar_6;
  tmpvar_6 = texture (_ShadowMapTexture, xlv_TEXCOORD4.xyz);
  shadow_5 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = (_LightShadowData.x + (shadow_5 * (1.0 - _LightShadowData.x)));
  shadow_5 = tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3);
  mediump vec3 viewDir_9;
  viewDir_9 = tmpvar_8;
  lowp vec4 c_10;
  highp float nh_11;
  lowp float tmpvar_12;
  tmpvar_12 = max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz));
  mediump float tmpvar_13;
  tmpvar_13 = max (0.0, dot (xlv_TEXCOORD1, normalize((_WorldSpaceLightPos0.xyz + viewDir_9))));
  nh_11 = tmpvar_13;
  mediump float arg1_14;
  arg1_14 = (_Shininess * 128.0);
  highp float tmpvar_15;
  tmpvar_15 = (pow (nh_11, arg1_14) * tmpvar_2.w);
  highp vec3 tmpvar_16;
  tmpvar_16 = ((((tmpvar_3 * _LightColor0.xyz) * tmpvar_12) + ((_LightColor0.xyz * _SpecColor.xyz) * tmpvar_15)) * (shadow_5 * 2.0));
  c_10.xyz = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = (tmpvar_4 + (((_LightColor0.w * _SpecColor.w) * tmpvar_15) * shadow_5));
  c_10.w = tmpvar_17;
  c_1.w = c_10.w;
  c_1.xyz = (c_10.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D unity_Lightmap;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp float shadow_3;
  lowp float tmpvar_4;
  tmpvar_4 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD2.xyz);
  highp float tmpvar_5;
  tmpvar_5 = (_LightShadowData.x + (tmpvar_4 * (1.0 - _LightShadowData.x)));
  shadow_3 = tmpvar_5;
  c_1.xyz = ((tmpvar_2.xyz * _Color.xyz) * min ((2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz), vec3((shadow_3 * 2.0))));
  c_1.w = (tmpvar_2.w * _Color.w);
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out highp vec2 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D unity_Lightmap;
in highp vec2 xlv_TEXCOORD0;
in highp vec2 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture (_MainTex, xlv_TEXCOORD0);
  lowp float shadow_3;
  mediump float tmpvar_4;
  tmpvar_4 = texture (_ShadowMapTexture, xlv_TEXCOORD2.xyz);
  shadow_3 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (_LightShadowData.x + (shadow_3 * (1.0 - _LightShadowData.x)));
  shadow_3 = tmpvar_5;
  c_1.xyz = ((tmpvar_2.xyz * _Color.xyz) * min ((2.0 * texture (unity_Lightmap, xlv_TEXCOORD1).xyz), vec3((shadow_3 * 2.0))));
  c_1.w = (tmpvar_2.w * _Color.w);
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  tmpvar_3 = tmpvar_1.xyz;
  tmpvar_4 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = tmpvar_2.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = tmpvar_2.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = tmpvar_2.z;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (tmpvar_5 * (((_World2Object * tmpvar_6).xyz * unity_Scale.w) - _glesVertex.xyz));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _SpecColor;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2.xyz * _Color.xyz);
  lowp float shadow_4;
  lowp float tmpvar_5;
  tmpvar_5 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD3.xyz);
  highp float tmpvar_6;
  tmpvar_6 = (_LightShadowData.x + (tmpvar_5 * (1.0 - _LightShadowData.x)));
  shadow_4 = tmpvar_6;
  c_1.w = 0.0;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  mediump vec4 tmpvar_8;
  mediump vec3 viewDir_9;
  viewDir_9 = tmpvar_7;
  mediump vec3 specColor_10;
  highp float nh_11;
  mediump vec3 scalePerBasisVector_12;
  mediump vec3 lm_13;
  lowp vec3 tmpvar_14;
  tmpvar_14 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_13 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = (2.0 * texture2D (unity_LightmapInd, xlv_TEXCOORD1).xyz);
  scalePerBasisVector_12 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = max (0.0, normalize((normalize((((scalePerBasisVector_12.x * vec3(0.816497, 0.0, 0.57735)) + (scalePerBasisVector_12.y * vec3(-0.408248, 0.707107, 0.57735))) + (scalePerBasisVector_12.z * vec3(-0.408248, -0.707107, 0.57735)))) + viewDir_9)).z);
  nh_11 = tmpvar_16;
  highp float tmpvar_17;
  mediump float arg1_18;
  arg1_18 = (_Shininess * 128.0);
  tmpvar_17 = pow (nh_11, arg1_18);
  highp vec3 tmpvar_19;
  tmpvar_19 = (((lm_13 * _SpecColor.xyz) * tmpvar_2.w) * tmpvar_17);
  specColor_10 = tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20.xyz = lm_13;
  tmpvar_20.w = tmpvar_17;
  tmpvar_8 = tmpvar_20;
  c_1.xyz = specColor_10;
  lowp vec3 tmpvar_21;
  tmpvar_21 = vec3((shadow_4 * 2.0));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (c_1.xyz + (tmpvar_3 * min (tmpvar_8.xyz, tmpvar_21)));
  c_1.xyz = tmpvar_22;
  c_1.w = (tmpvar_2.w * _Color.w);
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out highp vec2 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  tmpvar_3 = tmpvar_1.xyz;
  tmpvar_4 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = tmpvar_2.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = tmpvar_2.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = tmpvar_2.z;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (tmpvar_5 * (((_World2Object * tmpvar_6).xyz * unity_Scale.w) - _glesVertex.xyz));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _SpecColor;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
in highp vec2 xlv_TEXCOORD0;
in highp vec2 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2.xyz * _Color.xyz);
  lowp float shadow_4;
  mediump float tmpvar_5;
  tmpvar_5 = texture (_ShadowMapTexture, xlv_TEXCOORD3.xyz);
  shadow_4 = tmpvar_5;
  highp float tmpvar_6;
  tmpvar_6 = (_LightShadowData.x + (shadow_4 * (1.0 - _LightShadowData.x)));
  shadow_4 = tmpvar_6;
  c_1.w = 0.0;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2);
  mediump vec4 tmpvar_8;
  mediump vec3 viewDir_9;
  viewDir_9 = tmpvar_7;
  mediump vec3 specColor_10;
  highp float nh_11;
  mediump vec3 scalePerBasisVector_12;
  mediump vec3 lm_13;
  lowp vec3 tmpvar_14;
  tmpvar_14 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_13 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = (2.0 * texture (unity_LightmapInd, xlv_TEXCOORD1).xyz);
  scalePerBasisVector_12 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = max (0.0, normalize((normalize((((scalePerBasisVector_12.x * vec3(0.816497, 0.0, 0.57735)) + (scalePerBasisVector_12.y * vec3(-0.408248, 0.707107, 0.57735))) + (scalePerBasisVector_12.z * vec3(-0.408248, -0.707107, 0.57735)))) + viewDir_9)).z);
  nh_11 = tmpvar_16;
  highp float tmpvar_17;
  mediump float arg1_18;
  arg1_18 = (_Shininess * 128.0);
  tmpvar_17 = pow (nh_11, arg1_18);
  highp vec3 tmpvar_19;
  tmpvar_19 = (((lm_13 * _SpecColor.xyz) * tmpvar_2.w) * tmpvar_17);
  specColor_10 = tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20.xyz = lm_13;
  tmpvar_20.w = tmpvar_17;
  tmpvar_8 = tmpvar_20;
  c_1.xyz = specColor_10;
  lowp vec3 tmpvar_21;
  tmpvar_21 = vec3((shadow_4 * 2.0));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (c_1.xyz + (tmpvar_3 * min (tmpvar_8.xyz, tmpvar_21)));
  c_1.xyz = tmpvar_22;
  c_1.w = (tmpvar_2.w * _Color.w);
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  highp vec3 tmpvar_22;
  tmpvar_22 = (_Object2World * _glesVertex).xyz;
  highp vec4 tmpvar_23;
  tmpvar_23 = (unity_4LightPosX0 - tmpvar_22.x);
  highp vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosY0 - tmpvar_22.y);
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosZ0 - tmpvar_22.z);
  highp vec4 tmpvar_26;
  tmpvar_26 = (((tmpvar_23 * tmpvar_23) + (tmpvar_24 * tmpvar_24)) + (tmpvar_25 * tmpvar_25));
  highp vec4 tmpvar_27;
  tmpvar_27 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_23 * tmpvar_5.x) + (tmpvar_24 * tmpvar_5.y)) + (tmpvar_25 * tmpvar_5.z)) * inversesqrt(tmpvar_26))) * (1.0/((1.0 + (tmpvar_26 * unity_4LightAtten0)))));
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_3 + ((((unity_LightColor[0].xyz * tmpvar_27.x) + (unity_LightColor[1].xyz * tmpvar_27.y)) + (unity_LightColor[2].xyz * tmpvar_27.z)) + (unity_LightColor[3].xyz * tmpvar_27.w)));
  tmpvar_3 = tmpvar_28;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2.xyz * _Color.xyz);
  lowp float tmpvar_4;
  tmpvar_4 = (tmpvar_2.w * _Color.w);
  lowp float shadow_5;
  lowp float tmpvar_6;
  tmpvar_6 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD4.xyz);
  highp float tmpvar_7;
  tmpvar_7 = (_LightShadowData.x + (tmpvar_6 * (1.0 - _LightShadowData.x)));
  shadow_5 = tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3);
  mediump vec3 viewDir_9;
  viewDir_9 = tmpvar_8;
  lowp vec4 c_10;
  highp float nh_11;
  lowp float tmpvar_12;
  tmpvar_12 = max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz));
  mediump float tmpvar_13;
  tmpvar_13 = max (0.0, dot (xlv_TEXCOORD1, normalize((_WorldSpaceLightPos0.xyz + viewDir_9))));
  nh_11 = tmpvar_13;
  mediump float arg1_14;
  arg1_14 = (_Shininess * 128.0);
  highp float tmpvar_15;
  tmpvar_15 = (pow (nh_11, arg1_14) * tmpvar_2.w);
  highp vec3 tmpvar_16;
  tmpvar_16 = ((((tmpvar_3 * _LightColor0.xyz) * tmpvar_12) + ((_LightColor0.xyz * _SpecColor.xyz) * tmpvar_15)) * (shadow_5 * 2.0));
  c_10.xyz = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = (tmpvar_4 + (((_LightColor0.w * _SpecColor.w) * tmpvar_15) * shadow_5));
  c_10.w = tmpvar_17;
  c_1.w = c_10.w;
  c_1.xyz = (c_10.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  highp vec3 tmpvar_22;
  tmpvar_22 = (_Object2World * _glesVertex).xyz;
  highp vec4 tmpvar_23;
  tmpvar_23 = (unity_4LightPosX0 - tmpvar_22.x);
  highp vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosY0 - tmpvar_22.y);
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosZ0 - tmpvar_22.z);
  highp vec4 tmpvar_26;
  tmpvar_26 = (((tmpvar_23 * tmpvar_23) + (tmpvar_24 * tmpvar_24)) + (tmpvar_25 * tmpvar_25));
  highp vec4 tmpvar_27;
  tmpvar_27 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_23 * tmpvar_5.x) + (tmpvar_24 * tmpvar_5.y)) + (tmpvar_25 * tmpvar_5.z)) * inversesqrt(tmpvar_26))) * (1.0/((1.0 + (tmpvar_26 * unity_4LightAtten0)))));
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_3 + ((((unity_LightColor[0].xyz * tmpvar_27.x) + (unity_LightColor[1].xyz * tmpvar_27.y)) + (unity_LightColor[2].xyz * tmpvar_27.z)) + (unity_LightColor[3].xyz * tmpvar_27.w)));
  tmpvar_3 = tmpvar_28;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
in highp vec2 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2.xyz * _Color.xyz);
  lowp float tmpvar_4;
  tmpvar_4 = (tmpvar_2.w * _Color.w);
  lowp float shadow_5;
  mediump float tmpvar_6;
  tmpvar_6 = texture (_ShadowMapTexture, xlv_TEXCOORD4.xyz);
  shadow_5 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = (_LightShadowData.x + (shadow_5 * (1.0 - _LightShadowData.x)));
  shadow_5 = tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3);
  mediump vec3 viewDir_9;
  viewDir_9 = tmpvar_8;
  lowp vec4 c_10;
  highp float nh_11;
  lowp float tmpvar_12;
  tmpvar_12 = max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz));
  mediump float tmpvar_13;
  tmpvar_13 = max (0.0, dot (xlv_TEXCOORD1, normalize((_WorldSpaceLightPos0.xyz + viewDir_9))));
  nh_11 = tmpvar_13;
  mediump float arg1_14;
  arg1_14 = (_Shininess * 128.0);
  highp float tmpvar_15;
  tmpvar_15 = (pow (nh_11, arg1_14) * tmpvar_2.w);
  highp vec3 tmpvar_16;
  tmpvar_16 = ((((tmpvar_3 * _LightColor0.xyz) * tmpvar_12) + ((_LightColor0.xyz * _SpecColor.xyz) * tmpvar_15)) * (shadow_5 * 2.0));
  c_10.xyz = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = (tmpvar_4 + (((_LightColor0.w * _SpecColor.w) * tmpvar_15) * shadow_5));
  c_10.w = tmpvar_17;
  c_1.w = c_10.w;
  c_1.xyz = (c_10.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  _glesFragData[0] = c_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES3"
}
}
 }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardAdd" "RenderType"="Opaque" }
  ZWrite Off
  Fog {
   Color (0,0,0,0)
  }
  Blend One One
Program "vp" {
SubProgram "gles " {
Keywords { "POINT" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = (_WorldSpaceLightPos0.xyz - (_Object2World * _glesVertex).xyz);
  tmpvar_2 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  tmpvar_3 = tmpvar_7;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
uniform sampler2D _LightTexture0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3.xyz * _Color.xyz);
  lowp float tmpvar_5;
  tmpvar_5 = (tmpvar_3.w * _Color.w);
  mediump vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = dot (xlv_TEXCOORD4, xlv_TEXCOORD4);
  lowp float atten_8;
  atten_8 = texture2D (_LightTexture0, vec2(tmpvar_7)).w;
  lowp vec4 c_9;
  highp float nh_10;
  lowp float tmpvar_11;
  tmpvar_11 = max (0.0, dot (xlv_TEXCOORD1, lightDir_2));
  mediump float tmpvar_12;
  tmpvar_12 = max (0.0, dot (xlv_TEXCOORD1, normalize((lightDir_2 + normalize(xlv_TEXCOORD3)))));
  nh_10 = tmpvar_12;
  mediump float arg1_13;
  arg1_13 = (_Shininess * 128.0);
  highp float tmpvar_14;
  tmpvar_14 = (pow (nh_10, arg1_13) * tmpvar_3.w);
  highp vec3 tmpvar_15;
  tmpvar_15 = ((((tmpvar_4 * _LightColor0.xyz) * tmpvar_11) + ((_LightColor0.xyz * _SpecColor.xyz) * tmpvar_14)) * (atten_8 * 2.0));
  c_9.xyz = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (tmpvar_5 + (((_LightColor0.w * _SpecColor.w) * tmpvar_14) * atten_8));
  c_9.w = tmpvar_16;
  c_1.xyz = c_9.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = (_WorldSpaceLightPos0.xyz - (_Object2World * _glesVertex).xyz);
  tmpvar_2 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  tmpvar_3 = tmpvar_7;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
uniform sampler2D _LightTexture0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
in highp vec2 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3.xyz * _Color.xyz);
  lowp float tmpvar_5;
  tmpvar_5 = (tmpvar_3.w * _Color.w);
  mediump vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = dot (xlv_TEXCOORD4, xlv_TEXCOORD4);
  lowp float atten_8;
  atten_8 = texture (_LightTexture0, vec2(tmpvar_7)).w;
  lowp vec4 c_9;
  highp float nh_10;
  lowp float tmpvar_11;
  tmpvar_11 = max (0.0, dot (xlv_TEXCOORD1, lightDir_2));
  mediump float tmpvar_12;
  tmpvar_12 = max (0.0, dot (xlv_TEXCOORD1, normalize((lightDir_2 + normalize(xlv_TEXCOORD3)))));
  nh_10 = tmpvar_12;
  mediump float arg1_13;
  arg1_13 = (_Shininess * 128.0);
  highp float tmpvar_14;
  tmpvar_14 = (pow (nh_10, arg1_13) * tmpvar_3.w);
  highp vec3 tmpvar_15;
  tmpvar_15 = ((((tmpvar_4 * _LightColor0.xyz) * tmpvar_11) + ((_LightColor0.xyz * _SpecColor.xyz) * tmpvar_14)) * (atten_8 * 2.0));
  c_9.xyz = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (tmpvar_5 + (((_LightColor0.w * _SpecColor.w) * tmpvar_14) * atten_8));
  c_9.w = tmpvar_16;
  c_1.xyz = c_9.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = _WorldSpaceLightPos0.xyz;
  tmpvar_2 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  tmpvar_3 = tmpvar_7;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3.xyz * _Color.xyz);
  lowp float tmpvar_5;
  tmpvar_5 = (tmpvar_3.w * _Color.w);
  lightDir_2 = xlv_TEXCOORD2;
  lowp vec4 c_6;
  highp float nh_7;
  lowp float tmpvar_8;
  tmpvar_8 = max (0.0, dot (xlv_TEXCOORD1, lightDir_2));
  mediump float tmpvar_9;
  tmpvar_9 = max (0.0, dot (xlv_TEXCOORD1, normalize((lightDir_2 + normalize(xlv_TEXCOORD3)))));
  nh_7 = tmpvar_9;
  mediump float arg1_10;
  arg1_10 = (_Shininess * 128.0);
  highp float tmpvar_11;
  tmpvar_11 = (pow (nh_7, arg1_10) * tmpvar_3.w);
  highp vec3 tmpvar_12;
  tmpvar_12 = ((((tmpvar_4 * _LightColor0.xyz) * tmpvar_8) + ((_LightColor0.xyz * _SpecColor.xyz) * tmpvar_11)) * 2.0);
  c_6.xyz = tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = (tmpvar_5 + ((_LightColor0.w * _SpecColor.w) * tmpvar_11));
  c_6.w = tmpvar_13;
  c_1.xyz = c_6.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = _WorldSpaceLightPos0.xyz;
  tmpvar_2 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  tmpvar_3 = tmpvar_7;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
in highp vec2 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3.xyz * _Color.xyz);
  lowp float tmpvar_5;
  tmpvar_5 = (tmpvar_3.w * _Color.w);
  lightDir_2 = xlv_TEXCOORD2;
  lowp vec4 c_6;
  highp float nh_7;
  lowp float tmpvar_8;
  tmpvar_8 = max (0.0, dot (xlv_TEXCOORD1, lightDir_2));
  mediump float tmpvar_9;
  tmpvar_9 = max (0.0, dot (xlv_TEXCOORD1, normalize((lightDir_2 + normalize(xlv_TEXCOORD3)))));
  nh_7 = tmpvar_9;
  mediump float arg1_10;
  arg1_10 = (_Shininess * 128.0);
  highp float tmpvar_11;
  tmpvar_11 = (pow (nh_7, arg1_10) * tmpvar_3.w);
  highp vec3 tmpvar_12;
  tmpvar_12 = ((((tmpvar_4 * _LightColor0.xyz) * tmpvar_8) + ((_LightColor0.xyz * _SpecColor.xyz) * tmpvar_11)) * 2.0);
  c_6.xyz = tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = (tmpvar_5 + ((_LightColor0.w * _SpecColor.w) * tmpvar_11));
  c_6.w = tmpvar_13;
  c_1.xyz = c_6.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = (_WorldSpaceLightPos0.xyz - (_Object2World * _glesVertex).xyz);
  tmpvar_2 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  tmpvar_3 = tmpvar_7;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = (_LightMatrix0 * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3.xyz * _Color.xyz);
  lowp float tmpvar_5;
  tmpvar_5 = (tmpvar_3.w * _Color.w);
  mediump vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_6;
  highp vec2 P_7;
  P_7 = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) + 0.5);
  highp float tmpvar_8;
  tmpvar_8 = dot (xlv_TEXCOORD4.xyz, xlv_TEXCOORD4.xyz);
  lowp float atten_9;
  atten_9 = ((float((xlv_TEXCOORD4.z > 0.0)) * texture2D (_LightTexture0, P_7).w) * texture2D (_LightTextureB0, vec2(tmpvar_8)).w);
  lowp vec4 c_10;
  highp float nh_11;
  lowp float tmpvar_12;
  tmpvar_12 = max (0.0, dot (xlv_TEXCOORD1, lightDir_2));
  mediump float tmpvar_13;
  tmpvar_13 = max (0.0, dot (xlv_TEXCOORD1, normalize((lightDir_2 + normalize(xlv_TEXCOORD3)))));
  nh_11 = tmpvar_13;
  mediump float arg1_14;
  arg1_14 = (_Shininess * 128.0);
  highp float tmpvar_15;
  tmpvar_15 = (pow (nh_11, arg1_14) * tmpvar_3.w);
  highp vec3 tmpvar_16;
  tmpvar_16 = ((((tmpvar_4 * _LightColor0.xyz) * tmpvar_12) + ((_LightColor0.xyz * _SpecColor.xyz) * tmpvar_15)) * (atten_9 * 2.0));
  c_10.xyz = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = (tmpvar_5 + (((_LightColor0.w * _SpecColor.w) * tmpvar_15) * atten_9));
  c_10.w = tmpvar_17;
  c_1.xyz = c_10.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = (_WorldSpaceLightPos0.xyz - (_Object2World * _glesVertex).xyz);
  tmpvar_2 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  tmpvar_3 = tmpvar_7;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = (_LightMatrix0 * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
in highp vec2 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3.xyz * _Color.xyz);
  lowp float tmpvar_5;
  tmpvar_5 = (tmpvar_3.w * _Color.w);
  mediump vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_6;
  highp vec2 P_7;
  P_7 = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) + 0.5);
  highp float tmpvar_8;
  tmpvar_8 = dot (xlv_TEXCOORD4.xyz, xlv_TEXCOORD4.xyz);
  lowp float atten_9;
  atten_9 = ((float((xlv_TEXCOORD4.z > 0.0)) * texture (_LightTexture0, P_7).w) * texture (_LightTextureB0, vec2(tmpvar_8)).w);
  lowp vec4 c_10;
  highp float nh_11;
  lowp float tmpvar_12;
  tmpvar_12 = max (0.0, dot (xlv_TEXCOORD1, lightDir_2));
  mediump float tmpvar_13;
  tmpvar_13 = max (0.0, dot (xlv_TEXCOORD1, normalize((lightDir_2 + normalize(xlv_TEXCOORD3)))));
  nh_11 = tmpvar_13;
  mediump float arg1_14;
  arg1_14 = (_Shininess * 128.0);
  highp float tmpvar_15;
  tmpvar_15 = (pow (nh_11, arg1_14) * tmpvar_3.w);
  highp vec3 tmpvar_16;
  tmpvar_16 = ((((tmpvar_4 * _LightColor0.xyz) * tmpvar_12) + ((_LightColor0.xyz * _SpecColor.xyz) * tmpvar_15)) * (atten_9 * 2.0));
  c_10.xyz = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = (tmpvar_5 + (((_LightColor0.w * _SpecColor.w) * tmpvar_15) * atten_9));
  c_10.w = tmpvar_17;
  c_1.xyz = c_10.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = (_WorldSpaceLightPos0.xyz - (_Object2World * _glesVertex).xyz);
  tmpvar_2 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  tmpvar_3 = tmpvar_7;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3.xyz * _Color.xyz);
  lowp float tmpvar_5;
  tmpvar_5 = (tmpvar_3.w * _Color.w);
  mediump vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = dot (xlv_TEXCOORD4, xlv_TEXCOORD4);
  lowp float atten_8;
  atten_8 = (texture2D (_LightTextureB0, vec2(tmpvar_7)).w * textureCube (_LightTexture0, xlv_TEXCOORD4).w);
  lowp vec4 c_9;
  highp float nh_10;
  lowp float tmpvar_11;
  tmpvar_11 = max (0.0, dot (xlv_TEXCOORD1, lightDir_2));
  mediump float tmpvar_12;
  tmpvar_12 = max (0.0, dot (xlv_TEXCOORD1, normalize((lightDir_2 + normalize(xlv_TEXCOORD3)))));
  nh_10 = tmpvar_12;
  mediump float arg1_13;
  arg1_13 = (_Shininess * 128.0);
  highp float tmpvar_14;
  tmpvar_14 = (pow (nh_10, arg1_13) * tmpvar_3.w);
  highp vec3 tmpvar_15;
  tmpvar_15 = ((((tmpvar_4 * _LightColor0.xyz) * tmpvar_11) + ((_LightColor0.xyz * _SpecColor.xyz) * tmpvar_14)) * (atten_8 * 2.0));
  c_9.xyz = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (tmpvar_5 + (((_LightColor0.w * _SpecColor.w) * tmpvar_14) * atten_8));
  c_9.w = tmpvar_16;
  c_1.xyz = c_9.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = (_WorldSpaceLightPos0.xyz - (_Object2World * _glesVertex).xyz);
  tmpvar_2 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  tmpvar_3 = tmpvar_7;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
in highp vec2 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3.xyz * _Color.xyz);
  lowp float tmpvar_5;
  tmpvar_5 = (tmpvar_3.w * _Color.w);
  mediump vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = dot (xlv_TEXCOORD4, xlv_TEXCOORD4);
  lowp float atten_8;
  atten_8 = (texture (_LightTextureB0, vec2(tmpvar_7)).w * texture (_LightTexture0, xlv_TEXCOORD4).w);
  lowp vec4 c_9;
  highp float nh_10;
  lowp float tmpvar_11;
  tmpvar_11 = max (0.0, dot (xlv_TEXCOORD1, lightDir_2));
  mediump float tmpvar_12;
  tmpvar_12 = max (0.0, dot (xlv_TEXCOORD1, normalize((lightDir_2 + normalize(xlv_TEXCOORD3)))));
  nh_10 = tmpvar_12;
  mediump float arg1_13;
  arg1_13 = (_Shininess * 128.0);
  highp float tmpvar_14;
  tmpvar_14 = (pow (nh_10, arg1_13) * tmpvar_3.w);
  highp vec3 tmpvar_15;
  tmpvar_15 = ((((tmpvar_4 * _LightColor0.xyz) * tmpvar_11) + ((_LightColor0.xyz * _SpecColor.xyz) * tmpvar_14)) * (atten_8 * 2.0));
  c_9.xyz = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (tmpvar_5 + (((_LightColor0.w * _SpecColor.w) * tmpvar_14) * atten_8));
  c_9.w = tmpvar_16;
  c_1.xyz = c_9.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = _WorldSpaceLightPos0.xyz;
  tmpvar_2 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  tmpvar_3 = tmpvar_7;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
uniform sampler2D _LightTexture0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3.xyz * _Color.xyz);
  lowp float tmpvar_5;
  tmpvar_5 = (tmpvar_3.w * _Color.w);
  lightDir_2 = xlv_TEXCOORD2;
  lowp float atten_6;
  atten_6 = texture2D (_LightTexture0, xlv_TEXCOORD4).w;
  lowp vec4 c_7;
  highp float nh_8;
  lowp float tmpvar_9;
  tmpvar_9 = max (0.0, dot (xlv_TEXCOORD1, lightDir_2));
  mediump float tmpvar_10;
  tmpvar_10 = max (0.0, dot (xlv_TEXCOORD1, normalize((lightDir_2 + normalize(xlv_TEXCOORD3)))));
  nh_8 = tmpvar_10;
  mediump float arg1_11;
  arg1_11 = (_Shininess * 128.0);
  highp float tmpvar_12;
  tmpvar_12 = (pow (nh_8, arg1_11) * tmpvar_3.w);
  highp vec3 tmpvar_13;
  tmpvar_13 = ((((tmpvar_4 * _LightColor0.xyz) * tmpvar_9) + ((_LightColor0.xyz * _SpecColor.xyz) * tmpvar_12)) * (atten_6 * 2.0));
  c_7.xyz = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (tmpvar_5 + (((_LightColor0.w * _SpecColor.w) * tmpvar_12) * atten_6));
  c_7.w = tmpvar_14;
  c_1.xyz = c_7.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec2 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = _WorldSpaceLightPos0.xyz;
  tmpvar_2 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  tmpvar_3 = tmpvar_7;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
uniform sampler2D _LightTexture0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
in highp vec2 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in highp vec2 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3.xyz * _Color.xyz);
  lowp float tmpvar_5;
  tmpvar_5 = (tmpvar_3.w * _Color.w);
  lightDir_2 = xlv_TEXCOORD2;
  lowp float atten_6;
  atten_6 = texture (_LightTexture0, xlv_TEXCOORD4).w;
  lowp vec4 c_7;
  highp float nh_8;
  lowp float tmpvar_9;
  tmpvar_9 = max (0.0, dot (xlv_TEXCOORD1, lightDir_2));
  mediump float tmpvar_10;
  tmpvar_10 = max (0.0, dot (xlv_TEXCOORD1, normalize((lightDir_2 + normalize(xlv_TEXCOORD3)))));
  nh_8 = tmpvar_10;
  mediump float arg1_11;
  arg1_11 = (_Shininess * 128.0);
  highp float tmpvar_12;
  tmpvar_12 = (pow (nh_8, arg1_11) * tmpvar_3.w);
  highp vec3 tmpvar_13;
  tmpvar_13 = ((((tmpvar_4 * _LightColor0.xyz) * tmpvar_9) + ((_LightColor0.xyz * _SpecColor.xyz) * tmpvar_12)) * (atten_6 * 2.0));
  c_7.xyz = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (tmpvar_5 + (((_LightColor0.w * _SpecColor.w) * tmpvar_12) * atten_6));
  c_7.w = tmpvar_14;
  c_1.xyz = c_7.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "POINT" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3"
}
}
 }
 Pass {
  Name "PREPASS"
  Tags { "LIGHTMODE"="PrePassBase" "RenderType"="Opaque" }
  Fog { Mode Off }
Program "vp" {
SubProgram "gles " {
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
varying lowp vec3 xlv_TEXCOORD0;
void main ()
{
  lowp vec3 tmpvar_1;
  mat3 tmpvar_2;
  tmpvar_2[0] = _Object2World[0].xyz;
  tmpvar_2[1] = _Object2World[1].xyz;
  tmpvar_2[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_3;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

uniform mediump float _Shininess;
varying lowp vec3 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 res_1;
  res_1.xyz = ((xlv_TEXCOORD0 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}



#endif"
}
SubProgram "gles3 " {
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec3 _glesNormal;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
out lowp vec3 xlv_TEXCOORD0;
void main ()
{
  lowp vec3 tmpvar_1;
  mat3 tmpvar_2;
  tmpvar_2[0] = _Object2World[0].xyz;
  tmpvar_2[1] = _Object2World[1].xyz;
  tmpvar_2[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_3;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform mediump float _Shininess;
in lowp vec3 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 res_1;
  res_1.xyz = ((xlv_TEXCOORD0 * 0.5) + 0.5);
  res_1.w = _Shininess;
  _glesFragData[0] = res_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
"!!GLES"
}
SubProgram "gles3 " {
"!!GLES3"
}
}
 }
 Pass {
  Name "PREPASS"
  Tags { "LIGHTMODE"="PrePassFinal" "RenderType"="Opaque" }
  ZWrite Off
Program "vp" {
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  mat3 tmpvar_6;
  tmpvar_6[0] = _Object2World[0].xyz;
  tmpvar_6[1] = _Object2World[1].xyz;
  tmpvar_6[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = (tmpvar_6 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_8;
  mediump vec4 normal_9;
  normal_9 = tmpvar_7;
  highp float vC_10;
  mediump vec3 x3_11;
  mediump vec3 x2_12;
  mediump vec3 x1_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAr, normal_9);
  x1_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAg, normal_9);
  x1_13.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAb, normal_9);
  x1_13.z = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_9.xyzz * normal_9.yzzx);
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBr, tmpvar_17);
  x2_12.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBg, tmpvar_17);
  x2_12.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBb, tmpvar_17);
  x2_12.z = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = ((normal_9.x * normal_9.x) - (normal_9.y * normal_9.y));
  vC_10 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (unity_SHC.xyz * vC_10);
  x3_11 = tmpvar_22;
  tmpvar_8 = ((x1_13 + x2_12) + x3_11);
  tmpvar_1 = tmpvar_8;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _SpecColor;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4.xyz * _Color.xyz);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_6;
  mediump vec4 tmpvar_7;
  tmpvar_7 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_7.w;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7.xyz + xlv_TEXCOORD2);
  light_3.xyz = tmpvar_8;
  lowp vec4 c_9;
  lowp float spec_10;
  mediump float tmpvar_11;
  tmpvar_11 = (tmpvar_7.w * tmpvar_4.w);
  spec_10 = tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = ((tmpvar_5 * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_10));
  c_9.xyz = tmpvar_12;
  c_9.w = ((tmpvar_4.w * _Color.w) + (spec_10 * _SpecColor.w));
  c_2 = c_9;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  mat3 tmpvar_6;
  tmpvar_6[0] = _Object2World[0].xyz;
  tmpvar_6[1] = _Object2World[1].xyz;
  tmpvar_6[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = (tmpvar_6 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_8;
  mediump vec4 normal_9;
  normal_9 = tmpvar_7;
  highp float vC_10;
  mediump vec3 x3_11;
  mediump vec3 x2_12;
  mediump vec3 x1_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAr, normal_9);
  x1_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAg, normal_9);
  x1_13.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAb, normal_9);
  x1_13.z = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_9.xyzz * normal_9.yzzx);
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBr, tmpvar_17);
  x2_12.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBg, tmpvar_17);
  x2_12.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBb, tmpvar_17);
  x2_12.z = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = ((normal_9.x * normal_9.x) - (normal_9.y * normal_9.y));
  vC_10 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (unity_SHC.xyz * vC_10);
  x3_11 = tmpvar_22;
  tmpvar_8 = ((x1_13 + x2_12) + x3_11);
  tmpvar_1 = tmpvar_8;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _SpecColor;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
in highp vec2 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4.xyz * _Color.xyz);
  lowp vec4 tmpvar_6;
  tmpvar_6 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_6;
  mediump vec4 tmpvar_7;
  tmpvar_7 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_7.w;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7.xyz + xlv_TEXCOORD2);
  light_3.xyz = tmpvar_8;
  lowp vec4 c_9;
  lowp float spec_10;
  mediump float tmpvar_11;
  tmpvar_11 = (tmpvar_7.w * tmpvar_4.w);
  spec_10 = tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = ((tmpvar_5 * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_10));
  c_9.xyz = tmpvar_12;
  c_9.w = ((tmpvar_4.w * _Color.w) + (spec_10 * _SpecColor.w));
  c_2 = c_9;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  tmpvar_1.xyz = (((_Object2World * _glesVertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_1.w = (-((glstate_matrix_modelview0 * _glesVertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _SpecColor;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec3 lmIndirect_3;
  mediump vec3 lmFull_4;
  mediump float lmFade_5;
  mediump vec4 light_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7.xyz * _Color.xyz);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_6 = tmpvar_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = -(log2(max (light_6, vec4(0.001, 0.001, 0.001, 0.001))));
  light_6.w = tmpvar_10.w;
  highp float tmpvar_11;
  tmpvar_11 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * unity_LightmapFade.z) + unity_LightmapFade.w);
  lmFade_5 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lmFull_4 = tmpvar_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = (2.0 * texture2D (unity_LightmapInd, xlv_TEXCOORD2).xyz);
  lmIndirect_3 = tmpvar_13;
  light_6.xyz = (tmpvar_10.xyz + mix (lmIndirect_3, lmFull_4, vec3(clamp (lmFade_5, 0.0, 1.0))));
  lowp vec4 c_14;
  lowp float spec_15;
  mediump float tmpvar_16;
  tmpvar_16 = (tmpvar_10.w * tmpvar_7.w);
  spec_15 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((tmpvar_8 * light_6.xyz) + ((light_6.xyz * _SpecColor.xyz) * spec_15));
  c_14.xyz = tmpvar_17;
  c_14.w = ((tmpvar_7.w * _Color.w) + (spec_15 * _SpecColor.w));
  c_2 = c_14;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  tmpvar_1.xyz = (((_Object2World * _glesVertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_1.w = (-((glstate_matrix_modelview0 * _glesVertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _SpecColor;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
in highp vec2 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec3 lmIndirect_3;
  mediump vec3 lmFull_4;
  mediump float lmFade_5;
  mediump vec4 light_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7.xyz * _Color.xyz);
  lowp vec4 tmpvar_9;
  tmpvar_9 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_6 = tmpvar_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = -(log2(max (light_6, vec4(0.001, 0.001, 0.001, 0.001))));
  light_6.w = tmpvar_10.w;
  highp float tmpvar_11;
  tmpvar_11 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * unity_LightmapFade.z) + unity_LightmapFade.w);
  lmFade_5 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lmFull_4 = tmpvar_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = (2.0 * texture (unity_LightmapInd, xlv_TEXCOORD2).xyz);
  lmIndirect_3 = tmpvar_13;
  light_6.xyz = (tmpvar_10.xyz + mix (lmIndirect_3, lmFull_4, vec3(clamp (lmFade_5, 0.0, 1.0))));
  lowp vec4 c_14;
  lowp float spec_15;
  mediump float tmpvar_16;
  tmpvar_16 = (tmpvar_10.w * tmpvar_7.w);
  spec_15 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((tmpvar_8 * light_6.xyz) + ((light_6.xyz * _SpecColor.xyz) * spec_15));
  c_14.xyz = tmpvar_17;
  c_14.w = ((tmpvar_7.w * _Color.w) + (spec_15 * _SpecColor.w));
  c_2 = c_14;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_3.zw;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_1.xyz;
  tmpvar_8 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_2.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_2.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_2.z;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = o_4;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = (tmpvar_9 * (((_World2Object * tmpvar_10).xyz * unity_Scale.w) - _glesVertex.xyz));
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _SpecColor;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4.xyz * _Color.xyz);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD3);
  mediump vec4 tmpvar_8;
  mediump vec3 viewDir_9;
  viewDir_9 = tmpvar_7;
  highp float nh_10;
  mediump vec3 scalePerBasisVector_11;
  mediump vec3 lm_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lm_12 = tmpvar_13;
  lowp vec3 tmpvar_14;
  tmpvar_14 = (2.0 * texture2D (unity_LightmapInd, xlv_TEXCOORD2).xyz);
  scalePerBasisVector_11 = tmpvar_14;
  mediump float tmpvar_15;
  tmpvar_15 = max (0.0, normalize((normalize((((scalePerBasisVector_11.x * vec3(0.816497, 0.0, 0.57735)) + (scalePerBasisVector_11.y * vec3(-0.408248, 0.707107, 0.57735))) + (scalePerBasisVector_11.z * vec3(-0.408248, -0.707107, 0.57735)))) + viewDir_9)).z);
  nh_10 = tmpvar_15;
  mediump float arg1_16;
  arg1_16 = (_Shininess * 128.0);
  highp vec4 tmpvar_17;
  tmpvar_17.xyz = lm_12;
  tmpvar_17.w = pow (nh_10, arg1_16);
  tmpvar_8 = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (-(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001)))) + tmpvar_8);
  light_3 = tmpvar_18;
  lowp vec4 c_19;
  lowp float spec_20;
  mediump float tmpvar_21;
  tmpvar_21 = (tmpvar_18.w * tmpvar_4.w);
  spec_20 = tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((tmpvar_5 * tmpvar_18.xyz) + ((tmpvar_18.xyz * _SpecColor.xyz) * spec_20));
  c_19.xyz = tmpvar_22;
  c_19.w = ((tmpvar_4.w * _Color.w) + (spec_20 * _SpecColor.w));
  c_2 = c_19;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_3.zw;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_1.xyz;
  tmpvar_8 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_2.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_2.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_2.z;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = o_4;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = (tmpvar_9 * (((_World2Object * tmpvar_10).xyz * unity_Scale.w) - _glesVertex.xyz));
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _SpecColor;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
in highp vec2 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4.xyz * _Color.xyz);
  lowp vec4 tmpvar_6;
  tmpvar_6 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD3);
  mediump vec4 tmpvar_8;
  mediump vec3 viewDir_9;
  viewDir_9 = tmpvar_7;
  highp float nh_10;
  mediump vec3 scalePerBasisVector_11;
  mediump vec3 lm_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lm_12 = tmpvar_13;
  lowp vec3 tmpvar_14;
  tmpvar_14 = (2.0 * texture (unity_LightmapInd, xlv_TEXCOORD2).xyz);
  scalePerBasisVector_11 = tmpvar_14;
  mediump float tmpvar_15;
  tmpvar_15 = max (0.0, normalize((normalize((((scalePerBasisVector_11.x * vec3(0.816497, 0.0, 0.57735)) + (scalePerBasisVector_11.y * vec3(-0.408248, 0.707107, 0.57735))) + (scalePerBasisVector_11.z * vec3(-0.408248, -0.707107, 0.57735)))) + viewDir_9)).z);
  nh_10 = tmpvar_15;
  mediump float arg1_16;
  arg1_16 = (_Shininess * 128.0);
  highp vec4 tmpvar_17;
  tmpvar_17.xyz = lm_12;
  tmpvar_17.w = pow (nh_10, arg1_16);
  tmpvar_8 = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (-(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001)))) + tmpvar_8);
  light_3 = tmpvar_18;
  lowp vec4 c_19;
  lowp float spec_20;
  mediump float tmpvar_21;
  tmpvar_21 = (tmpvar_18.w * tmpvar_4.w);
  spec_20 = tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((tmpvar_5 * tmpvar_18.xyz) + ((tmpvar_18.xyz * _SpecColor.xyz) * spec_20));
  c_19.xyz = tmpvar_22;
  c_19.w = ((tmpvar_4.w * _Color.w) + (spec_20 * _SpecColor.w));
  c_2 = c_19;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  mat3 tmpvar_6;
  tmpvar_6[0] = _Object2World[0].xyz;
  tmpvar_6[1] = _Object2World[1].xyz;
  tmpvar_6[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = (tmpvar_6 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_8;
  mediump vec4 normal_9;
  normal_9 = tmpvar_7;
  highp float vC_10;
  mediump vec3 x3_11;
  mediump vec3 x2_12;
  mediump vec3 x1_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAr, normal_9);
  x1_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAg, normal_9);
  x1_13.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAb, normal_9);
  x1_13.z = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_9.xyzz * normal_9.yzzx);
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBr, tmpvar_17);
  x2_12.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBg, tmpvar_17);
  x2_12.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBb, tmpvar_17);
  x2_12.z = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = ((normal_9.x * normal_9.x) - (normal_9.y * normal_9.y));
  vC_10 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (unity_SHC.xyz * vC_10);
  x3_11 = tmpvar_22;
  tmpvar_8 = ((x1_13 + x2_12) + x3_11);
  tmpvar_1 = tmpvar_8;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _SpecColor;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4.xyz * _Color.xyz);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_6;
  mediump vec4 tmpvar_7;
  tmpvar_7 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_7.w;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7.xyz + xlv_TEXCOORD2);
  light_3.xyz = tmpvar_8;
  lowp vec4 c_9;
  lowp float spec_10;
  mediump float tmpvar_11;
  tmpvar_11 = (tmpvar_7.w * tmpvar_4.w);
  spec_10 = tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = ((tmpvar_5 * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_10));
  c_9.xyz = tmpvar_12;
  c_9.w = ((tmpvar_4.w * _Color.w) + (spec_10 * _SpecColor.w));
  c_2 = c_9;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  mat3 tmpvar_6;
  tmpvar_6[0] = _Object2World[0].xyz;
  tmpvar_6[1] = _Object2World[1].xyz;
  tmpvar_6[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = (tmpvar_6 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_8;
  mediump vec4 normal_9;
  normal_9 = tmpvar_7;
  highp float vC_10;
  mediump vec3 x3_11;
  mediump vec3 x2_12;
  mediump vec3 x1_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAr, normal_9);
  x1_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAg, normal_9);
  x1_13.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAb, normal_9);
  x1_13.z = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_9.xyzz * normal_9.yzzx);
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBr, tmpvar_17);
  x2_12.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBg, tmpvar_17);
  x2_12.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBb, tmpvar_17);
  x2_12.z = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = ((normal_9.x * normal_9.x) - (normal_9.y * normal_9.y));
  vC_10 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (unity_SHC.xyz * vC_10);
  x3_11 = tmpvar_22;
  tmpvar_8 = ((x1_13 + x2_12) + x3_11);
  tmpvar_1 = tmpvar_8;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _SpecColor;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
in highp vec2 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4.xyz * _Color.xyz);
  lowp vec4 tmpvar_6;
  tmpvar_6 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_6;
  mediump vec4 tmpvar_7;
  tmpvar_7 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_7.w;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7.xyz + xlv_TEXCOORD2);
  light_3.xyz = tmpvar_8;
  lowp vec4 c_9;
  lowp float spec_10;
  mediump float tmpvar_11;
  tmpvar_11 = (tmpvar_7.w * tmpvar_4.w);
  spec_10 = tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = ((tmpvar_5 * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_10));
  c_9.xyz = tmpvar_12;
  c_9.w = ((tmpvar_4.w * _Color.w) + (spec_10 * _SpecColor.w));
  c_2 = c_9;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  tmpvar_1.xyz = (((_Object2World * _glesVertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_1.w = (-((glstate_matrix_modelview0 * _glesVertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _SpecColor;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec3 lmIndirect_3;
  mediump vec3 lmFull_4;
  mediump float lmFade_5;
  mediump vec4 light_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7.xyz * _Color.xyz);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_6 = tmpvar_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = max (light_6, vec4(0.001, 0.001, 0.001, 0.001));
  light_6.w = tmpvar_10.w;
  highp float tmpvar_11;
  tmpvar_11 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * unity_LightmapFade.z) + unity_LightmapFade.w);
  lmFade_5 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lmFull_4 = tmpvar_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = (2.0 * texture2D (unity_LightmapInd, xlv_TEXCOORD2).xyz);
  lmIndirect_3 = tmpvar_13;
  light_6.xyz = (tmpvar_10.xyz + mix (lmIndirect_3, lmFull_4, vec3(clamp (lmFade_5, 0.0, 1.0))));
  lowp vec4 c_14;
  lowp float spec_15;
  mediump float tmpvar_16;
  tmpvar_16 = (tmpvar_10.w * tmpvar_7.w);
  spec_15 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((tmpvar_8 * light_6.xyz) + ((light_6.xyz * _SpecColor.xyz) * spec_15));
  c_14.xyz = tmpvar_17;
  c_14.w = ((tmpvar_7.w * _Color.w) + (spec_15 * _SpecColor.w));
  c_2 = c_14;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  tmpvar_1.xyz = (((_Object2World * _glesVertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_1.w = (-((glstate_matrix_modelview0 * _glesVertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _SpecColor;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
in highp vec2 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec3 lmIndirect_3;
  mediump vec3 lmFull_4;
  mediump float lmFade_5;
  mediump vec4 light_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7.xyz * _Color.xyz);
  lowp vec4 tmpvar_9;
  tmpvar_9 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_6 = tmpvar_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = max (light_6, vec4(0.001, 0.001, 0.001, 0.001));
  light_6.w = tmpvar_10.w;
  highp float tmpvar_11;
  tmpvar_11 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * unity_LightmapFade.z) + unity_LightmapFade.w);
  lmFade_5 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lmFull_4 = tmpvar_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = (2.0 * texture (unity_LightmapInd, xlv_TEXCOORD2).xyz);
  lmIndirect_3 = tmpvar_13;
  light_6.xyz = (tmpvar_10.xyz + mix (lmIndirect_3, lmFull_4, vec3(clamp (lmFade_5, 0.0, 1.0))));
  lowp vec4 c_14;
  lowp float spec_15;
  mediump float tmpvar_16;
  tmpvar_16 = (tmpvar_10.w * tmpvar_7.w);
  spec_15 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((tmpvar_8 * light_6.xyz) + ((light_6.xyz * _SpecColor.xyz) * spec_15));
  c_14.xyz = tmpvar_17;
  c_14.w = ((tmpvar_7.w * _Color.w) + (spec_15 * _SpecColor.w));
  c_2 = c_14;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_3.zw;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_1.xyz;
  tmpvar_8 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_2.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_2.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_2.z;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = o_4;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = (tmpvar_9 * (((_World2Object * tmpvar_10).xyz * unity_Scale.w) - _glesVertex.xyz));
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _SpecColor;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4.xyz * _Color.xyz);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD3);
  mediump vec4 tmpvar_8;
  mediump vec3 viewDir_9;
  viewDir_9 = tmpvar_7;
  highp float nh_10;
  mediump vec3 scalePerBasisVector_11;
  mediump vec3 lm_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lm_12 = tmpvar_13;
  lowp vec3 tmpvar_14;
  tmpvar_14 = (2.0 * texture2D (unity_LightmapInd, xlv_TEXCOORD2).xyz);
  scalePerBasisVector_11 = tmpvar_14;
  mediump float tmpvar_15;
  tmpvar_15 = max (0.0, normalize((normalize((((scalePerBasisVector_11.x * vec3(0.816497, 0.0, 0.57735)) + (scalePerBasisVector_11.y * vec3(-0.408248, 0.707107, 0.57735))) + (scalePerBasisVector_11.z * vec3(-0.408248, -0.707107, 0.57735)))) + viewDir_9)).z);
  nh_10 = tmpvar_15;
  mediump float arg1_16;
  arg1_16 = (_Shininess * 128.0);
  highp vec4 tmpvar_17;
  tmpvar_17.xyz = lm_12;
  tmpvar_17.w = pow (nh_10, arg1_16);
  tmpvar_8 = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (max (light_3, vec4(0.001, 0.001, 0.001, 0.001)) + tmpvar_8);
  light_3 = tmpvar_18;
  lowp vec4 c_19;
  lowp float spec_20;
  mediump float tmpvar_21;
  tmpvar_21 = (tmpvar_18.w * tmpvar_4.w);
  spec_20 = tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((tmpvar_5 * tmpvar_18.xyz) + ((tmpvar_18.xyz * _SpecColor.xyz) * spec_20));
  c_19.xyz = tmpvar_22;
  c_19.w = ((tmpvar_4.w * _Color.w) + (spec_20 * _SpecColor.w));
  c_2 = c_19;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_3.zw;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_1.xyz;
  tmpvar_8 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_2.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_2.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_2.z;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _WorldSpaceCameraPos;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = o_4;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = (tmpvar_9 * (((_World2Object * tmpvar_10).xyz * unity_Scale.w) - _glesVertex.xyz));
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _SpecColor;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
in highp vec2 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4.xyz * _Color.xyz);
  lowp vec4 tmpvar_6;
  tmpvar_6 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD3);
  mediump vec4 tmpvar_8;
  mediump vec3 viewDir_9;
  viewDir_9 = tmpvar_7;
  highp float nh_10;
  mediump vec3 scalePerBasisVector_11;
  mediump vec3 lm_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lm_12 = tmpvar_13;
  lowp vec3 tmpvar_14;
  tmpvar_14 = (2.0 * texture (unity_LightmapInd, xlv_TEXCOORD2).xyz);
  scalePerBasisVector_11 = tmpvar_14;
  mediump float tmpvar_15;
  tmpvar_15 = max (0.0, normalize((normalize((((scalePerBasisVector_11.x * vec3(0.816497, 0.0, 0.57735)) + (scalePerBasisVector_11.y * vec3(-0.408248, 0.707107, 0.57735))) + (scalePerBasisVector_11.z * vec3(-0.408248, -0.707107, 0.57735)))) + viewDir_9)).z);
  nh_10 = tmpvar_15;
  mediump float arg1_16;
  arg1_16 = (_Shininess * 128.0);
  highp vec4 tmpvar_17;
  tmpvar_17.xyz = lm_12;
  tmpvar_17.w = pow (nh_10, arg1_16);
  tmpvar_8 = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (max (light_3, vec4(0.001, 0.001, 0.001, 0.001)) + tmpvar_8);
  light_3 = tmpvar_18;
  lowp vec4 c_19;
  lowp float spec_20;
  mediump float tmpvar_21;
  tmpvar_21 = (tmpvar_18.w * tmpvar_4.w);
  spec_20 = tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((tmpvar_5 * tmpvar_18.xyz) + ((tmpvar_18.xyz * _SpecColor.xyz) * spec_20));
  c_19.xyz = tmpvar_22;
  c_19.w = ((tmpvar_4.w * _Color.w) + (spec_20 * _SpecColor.w));
  c_2 = c_19;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3"
}
}
 }
}
Fallback "VertexLit"
}                        Alpha-Diffuse      Shader "Transparent/Diffuse" {
Properties {
 _Color ("Main Color", Color) = (1,1,1,1)
 _MainTex ("Base (RGB) Trans (A)", 2D) = "white" {}
}
SubShader { 
 LOD 200
 Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardBase" "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
  ZWrite Off
  Blend SrcAlpha OneMinusSrcAlpha
  AlphaTest Greater 0
  ColorMask RGB
Program "vp" {
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture2D (_MainTex, xlv_TEXCOORD0) * _Color);
  lowp float tmpvar_3;
  tmpvar_3 = tmpvar_2.w;
  lowp vec4 c_4;
  c_4.xyz = ((tmpvar_2.xyz * _LightColor0.xyz) * (max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz)) * 2.0));
  c_4.w = tmpvar_3;
  c_1.xyz = (c_4.xyz + (tmpvar_2.xyz * xlv_TEXCOORD2));
  c_1.w = tmpvar_3;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
in highp vec2 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture (_MainTex, xlv_TEXCOORD0) * _Color);
  lowp float tmpvar_3;
  tmpvar_3 = tmpvar_2.w;
  lowp vec4 c_4;
  c_4.xyz = ((tmpvar_2.xyz * _LightColor0.xyz) * (max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz)) * 2.0));
  c_4.w = tmpvar_3;
  c_1.xyz = (c_4.xyz + (tmpvar_2.xyz * xlv_TEXCOORD2));
  c_1.w = tmpvar_3;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D unity_Lightmap;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture2D (_MainTex, xlv_TEXCOORD0) * _Color);
  c_1.xyz = (tmpvar_2.xyz * (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz));
  c_1.w = tmpvar_2.w;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out highp vec2 xlv_TEXCOORD1;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D unity_Lightmap;
in highp vec2 xlv_TEXCOORD0;
in highp vec2 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture (_MainTex, xlv_TEXCOORD0) * _Color);
  c_1.xyz = (tmpvar_2.xyz * (2.0 * texture (unity_Lightmap, xlv_TEXCOORD1).xyz));
  c_1.w = tmpvar_2.w;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D unity_Lightmap;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture2D (_MainTex, xlv_TEXCOORD0) * _Color);
  mediump vec3 lm_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_3 = tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_2.xyz * lm_3);
  c_1.xyz = tmpvar_5;
  c_1.w = tmpvar_2.w;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out highp vec2 xlv_TEXCOORD1;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D unity_Lightmap;
in highp vec2 xlv_TEXCOORD0;
in highp vec2 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture (_MainTex, xlv_TEXCOORD0) * _Color);
  mediump vec3 lm_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_3 = tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_2.xyz * lm_3);
  c_1.xyz = tmpvar_5;
  c_1.w = tmpvar_2.w;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  highp vec3 tmpvar_22;
  tmpvar_22 = (_Object2World * _glesVertex).xyz;
  highp vec4 tmpvar_23;
  tmpvar_23 = (unity_4LightPosX0 - tmpvar_22.x);
  highp vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosY0 - tmpvar_22.y);
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosZ0 - tmpvar_22.z);
  highp vec4 tmpvar_26;
  tmpvar_26 = (((tmpvar_23 * tmpvar_23) + (tmpvar_24 * tmpvar_24)) + (tmpvar_25 * tmpvar_25));
  highp vec4 tmpvar_27;
  tmpvar_27 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_23 * tmpvar_5.x) + (tmpvar_24 * tmpvar_5.y)) + (tmpvar_25 * tmpvar_5.z)) * inversesqrt(tmpvar_26))) * (1.0/((1.0 + (tmpvar_26 * unity_4LightAtten0)))));
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_3 + ((((unity_LightColor[0].xyz * tmpvar_27.x) + (unity_LightColor[1].xyz * tmpvar_27.y)) + (unity_LightColor[2].xyz * tmpvar_27.z)) + (unity_LightColor[3].xyz * tmpvar_27.w)));
  tmpvar_3 = tmpvar_28;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture2D (_MainTex, xlv_TEXCOORD0) * _Color);
  lowp float tmpvar_3;
  tmpvar_3 = tmpvar_2.w;
  lowp vec4 c_4;
  c_4.xyz = ((tmpvar_2.xyz * _LightColor0.xyz) * (max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz)) * 2.0));
  c_4.w = tmpvar_3;
  c_1.xyz = (c_4.xyz + (tmpvar_2.xyz * xlv_TEXCOORD2));
  c_1.w = tmpvar_3;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  highp vec3 tmpvar_22;
  tmpvar_22 = (_Object2World * _glesVertex).xyz;
  highp vec4 tmpvar_23;
  tmpvar_23 = (unity_4LightPosX0 - tmpvar_22.x);
  highp vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosY0 - tmpvar_22.y);
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosZ0 - tmpvar_22.z);
  highp vec4 tmpvar_26;
  tmpvar_26 = (((tmpvar_23 * tmpvar_23) + (tmpvar_24 * tmpvar_24)) + (tmpvar_25 * tmpvar_25));
  highp vec4 tmpvar_27;
  tmpvar_27 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_23 * tmpvar_5.x) + (tmpvar_24 * tmpvar_5.y)) + (tmpvar_25 * tmpvar_5.z)) * inversesqrt(tmpvar_26))) * (1.0/((1.0 + (tmpvar_26 * unity_4LightAtten0)))));
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_3 + ((((unity_LightColor[0].xyz * tmpvar_27.x) + (unity_LightColor[1].xyz * tmpvar_27.y)) + (unity_LightColor[2].xyz * tmpvar_27.z)) + (unity_LightColor[3].xyz * tmpvar_27.w)));
  tmpvar_3 = tmpvar_28;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
in highp vec2 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture (_MainTex, xlv_TEXCOORD0) * _Color);
  lowp float tmpvar_3;
  tmpvar_3 = tmpvar_2.w;
  lowp vec4 c_4;
  c_4.xyz = ((tmpvar_2.xyz * _LightColor0.xyz) * (max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz)) * 2.0));
  c_4.w = tmpvar_3;
  c_1.xyz = (c_4.xyz + (tmpvar_2.xyz * xlv_TEXCOORD2));
  c_1.w = tmpvar_3;
  _glesFragData[0] = c_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES3"
}
}
 }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardAdd" "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
  ZWrite Off
  Fog {
   Color (0,0,0,0)
  }
  Blend SrcAlpha One
  AlphaTest Greater 0
  ColorMask RGB
Program "vp" {
SubProgram "gles " {
Keywords { "POINT" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_WorldSpaceLightPos0.xyz - (_Object2World * _glesVertex).xyz);
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture2D (_MainTex, xlv_TEXCOORD0) * _Color);
  lowp float tmpvar_4;
  tmpvar_4 = tmpvar_3.w;
  mediump vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_5;
  highp float tmpvar_6;
  tmpvar_6 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 c_7;
  c_7.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * ((max (0.0, dot (xlv_TEXCOORD1, lightDir_2)) * texture2D (_LightTexture0, vec2(tmpvar_6)).w) * 2.0));
  c_7.w = tmpvar_4;
  c_1.xyz = c_7.xyz;
  c_1.w = tmpvar_4;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_WorldSpaceLightPos0.xyz - (_Object2World * _glesVertex).xyz);
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
in highp vec2 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture (_MainTex, xlv_TEXCOORD0) * _Color);
  lowp float tmpvar_4;
  tmpvar_4 = tmpvar_3.w;
  mediump vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_5;
  highp float tmpvar_6;
  tmpvar_6 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 c_7;
  c_7.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * ((max (0.0, dot (xlv_TEXCOORD1, lightDir_2)) * texture (_LightTexture0, vec2(tmpvar_6)).w) * 2.0));
  c_7.w = tmpvar_4;
  c_1.xyz = c_7.xyz;
  c_1.w = tmpvar_4;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = _WorldSpaceLightPos0.xyz;
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture2D (_MainTex, xlv_TEXCOORD0) * _Color);
  lowp float tmpvar_4;
  tmpvar_4 = tmpvar_3.w;
  lightDir_2 = xlv_TEXCOORD2;
  lowp vec4 c_5;
  c_5.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * (max (0.0, dot (xlv_TEXCOORD1, lightDir_2)) * 2.0));
  c_5.w = tmpvar_4;
  c_1.xyz = c_5.xyz;
  c_1.w = tmpvar_4;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = _WorldSpaceLightPos0.xyz;
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
in highp vec2 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture (_MainTex, xlv_TEXCOORD0) * _Color);
  lowp float tmpvar_4;
  tmpvar_4 = tmpvar_3.w;
  lightDir_2 = xlv_TEXCOORD2;
  lowp vec4 c_5;
  c_5.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * (max (0.0, dot (xlv_TEXCOORD1, lightDir_2)) * 2.0));
  c_5.w = tmpvar_4;
  c_1.xyz = c_5.xyz;
  c_1.w = tmpvar_4;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_WorldSpaceLightPos0.xyz - (_Object2World * _glesVertex).xyz);
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture2D (_MainTex, xlv_TEXCOORD0) * _Color);
  lowp float tmpvar_4;
  tmpvar_4 = tmpvar_3.w;
  mediump vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_5;
  highp vec2 P_6;
  P_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  highp float tmpvar_7;
  tmpvar_7 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp float atten_8;
  atten_8 = ((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, P_6).w) * texture2D (_LightTextureB0, vec2(tmpvar_7)).w);
  lowp vec4 c_9;
  c_9.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * ((max (0.0, dot (xlv_TEXCOORD1, lightDir_2)) * atten_8) * 2.0));
  c_9.w = tmpvar_4;
  c_1.xyz = c_9.xyz;
  c_1.w = tmpvar_4;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_WorldSpaceLightPos0.xyz - (_Object2World * _glesVertex).xyz);
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
in highp vec2 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture (_MainTex, xlv_TEXCOORD0) * _Color);
  lowp float tmpvar_4;
  tmpvar_4 = tmpvar_3.w;
  mediump vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_5;
  highp vec2 P_6;
  P_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  highp float tmpvar_7;
  tmpvar_7 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp float atten_8;
  atten_8 = ((float((xlv_TEXCOORD3.z > 0.0)) * texture (_LightTexture0, P_6).w) * texture (_LightTextureB0, vec2(tmpvar_7)).w);
  lowp vec4 c_9;
  c_9.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * ((max (0.0, dot (xlv_TEXCOORD1, lightDir_2)) * atten_8) * 2.0));
  c_9.w = tmpvar_4;
  c_1.xyz = c_9.xyz;
  c_1.w = tmpvar_4;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_WorldSpaceLightPos0.xyz - (_Object2World * _glesVertex).xyz);
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture2D (_MainTex, xlv_TEXCOORD0) * _Color);
  lowp float tmpvar_4;
  tmpvar_4 = tmpvar_3.w;
  mediump vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_5;
  highp float tmpvar_6;
  tmpvar_6 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 c_7;
  c_7.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * ((max (0.0, dot (xlv_TEXCOORD1, lightDir_2)) * (texture2D (_LightTextureB0, vec2(tmpvar_6)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w)) * 2.0));
  c_7.w = tmpvar_4;
  c_1.xyz = c_7.xyz;
  c_1.w = tmpvar_4;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_WorldSpaceLightPos0.xyz - (_Object2World * _glesVertex).xyz);
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
in highp vec2 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture (_MainTex, xlv_TEXCOORD0) * _Color);
  lowp float tmpvar_4;
  tmpvar_4 = tmpvar_3.w;
  mediump vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_5;
  highp float tmpvar_6;
  tmpvar_6 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 c_7;
  c_7.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * ((max (0.0, dot (xlv_TEXCOORD1, lightDir_2)) * (texture (_LightTextureB0, vec2(tmpvar_6)).w * texture (_LightTexture0, xlv_TEXCOORD3).w)) * 2.0));
  c_7.w = tmpvar_4;
  c_1.xyz = c_7.xyz;
  c_1.w = tmpvar_4;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = _WorldSpaceLightPos0.xyz;
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture2D (_MainTex, xlv_TEXCOORD0) * _Color);
  lowp float tmpvar_4;
  tmpvar_4 = tmpvar_3.w;
  lightDir_2 = xlv_TEXCOORD2;
  lowp vec4 c_5;
  c_5.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * ((max (0.0, dot (xlv_TEXCOORD1, lightDir_2)) * texture2D (_LightTexture0, xlv_TEXCOORD3).w) * 2.0));
  c_5.w = tmpvar_4;
  c_1.xyz = c_5.xyz;
  c_1.w = tmpvar_4;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = _WorldSpaceLightPos0.xyz;
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
in highp vec2 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture (_MainTex, xlv_TEXCOORD0) * _Color);
  lowp float tmpvar_4;
  tmpvar_4 = tmpvar_3.w;
  lightDir_2 = xlv_TEXCOORD2;
  lowp vec4 c_5;
  c_5.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * ((max (0.0, dot (xlv_TEXCOORD1, lightDir_2)) * texture (_LightTexture0, xlv_TEXCOORD3).w) * 2.0));
  c_5.w = tmpvar_4;
  c_1.xyz = c_5.xyz;
  c_1.w = tmpvar_4;
  _glesFragData[0] = c_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "POINT" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3"
}
}
 }
}
Fallback "Transparent/VertexLit"
}            *             Alpha-BumpedÐ  Shader "Transparent/Bumped Diffuse" {
Properties {
 _Color ("Main Color", Color) = (1,1,1,1)
 _MainTex ("Base (RGB) Trans (A)", 2D) = "white" {}
 _BumpMap ("Normalmap", 2D) = "bump" {}
}
SubShader { 
 LOD 300
 Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardBase" "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
  ZWrite Off
  Blend SrcAlpha OneMinusSrcAlpha
  AlphaTest Greater 0
  ColorMask RGB
Program "vp" {
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 shlight_3;
  highp vec4 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_8 = tmpvar_1.xyz;
  tmpvar_9 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_10;
  tmpvar_10[0].x = tmpvar_8.x;
  tmpvar_10[0].y = tmpvar_9.x;
  tmpvar_10[0].z = tmpvar_2.x;
  tmpvar_10[1].x = tmpvar_8.y;
  tmpvar_10[1].y = tmpvar_9.y;
  tmpvar_10[1].z = tmpvar_2.y;
  tmpvar_10[2].x = tmpvar_8.z;
  tmpvar_10[2].y = tmpvar_9.z;
  tmpvar_10[2].z = tmpvar_2.z;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_5 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = (tmpvar_7 * (tmpvar_2 * unity_Scale.w));
  mediump vec3 tmpvar_13;
  mediump vec4 normal_14;
  normal_14 = tmpvar_12;
  highp float vC_15;
  mediump vec3 x3_16;
  mediump vec3 x2_17;
  mediump vec3 x1_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHAr, normal_14);
  x1_18.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHAg, normal_14);
  x1_18.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHAb, normal_14);
  x1_18.z = tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22 = (normal_14.xyzz * normal_14.yzzx);
  highp float tmpvar_23;
  tmpvar_23 = dot (unity_SHBr, tmpvar_22);
  x2_17.x = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = dot (unity_SHBg, tmpvar_22);
  x2_17.y = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = dot (unity_SHBb, tmpvar_22);
  x2_17.z = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = ((normal_14.x * normal_14.x) - (normal_14.y * normal_14.y));
  vC_15 = tmpvar_26;
  highp vec3 tmpvar_27;
  tmpvar_27 = (unity_SHC.xyz * vC_15);
  x3_16 = tmpvar_27;
  tmpvar_13 = ((x1_18 + x2_17) + x3_16);
  shlight_3 = tmpvar_13;
  tmpvar_6 = shlight_3;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture2D (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp float tmpvar_3;
  tmpvar_3 = tmpvar_2.w;
  lowp vec4 c_4;
  c_4.xyz = ((tmpvar_2.xyz * _LightColor0.xyz) * (max (0.0, dot (((texture2D (_BumpMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0), xlv_TEXCOORD1)) * 2.0));
  c_4.w = tmpvar_3;
  c_1.xyz = (c_4.xyz + (tmpvar_2.xyz * xlv_TEXCOORD2));
  c_1.w = tmpvar_3;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
out highp vec4 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 shlight_3;
  highp vec4 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_8 = tmpvar_1.xyz;
  tmpvar_9 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_10;
  tmpvar_10[0].x = tmpvar_8.x;
  tmpvar_10[0].y = tmpvar_9.x;
  tmpvar_10[0].z = tmpvar_2.x;
  tmpvar_10[1].x = tmpvar_8.y;
  tmpvar_10[1].y = tmpvar_9.y;
  tmpvar_10[1].z = tmpvar_2.y;
  tmpvar_10[2].x = tmpvar_8.z;
  tmpvar_10[2].y = tmpvar_9.z;
  tmpvar_10[2].z = tmpvar_2.z;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_5 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = (tmpvar_7 * (tmpvar_2 * unity_Scale.w));
  mediump vec3 tmpvar_13;
  mediump vec4 normal_14;
  normal_14 = tmpvar_12;
  highp float vC_15;
  mediump vec3 x3_16;
  mediump vec3 x2_17;
  mediump vec3 x1_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHAr, normal_14);
  x1_18.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHAg, normal_14);
  x1_18.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHAb, normal_14);
  x1_18.z = tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22 = (normal_14.xyzz * normal_14.yzzx);
  highp float tmpvar_23;
  tmpvar_23 = dot (unity_SHBr, tmpvar_22);
  x2_17.x = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = dot (unity_SHBg, tmpvar_22);
  x2_17.y = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = dot (unity_SHBb, tmpvar_22);
  x2_17.z = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = ((normal_14.x * normal_14.x) - (normal_14.y * normal_14.y));
  vC_15 = tmpvar_26;
  highp vec3 tmpvar_27;
  tmpvar_27 = (unity_SHC.xyz * vC_15);
  x3_16 = tmpvar_27;
  tmpvar_13 = ((x1_18 + x2_17) + x3_16);
  shlight_3 = tmpvar_13;
  tmpvar_6 = shlight_3;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp float tmpvar_3;
  tmpvar_3 = tmpvar_2.w;
  lowp vec4 c_4;
  c_4.xyz = ((tmpvar_2.xyz * _LightColor0.xyz) * (max (0.0, dot (((texture (_BumpMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0), xlv_TEXCOORD1)) * 2.0));
  c_4.w = tmpvar_3;
  c_1.xyz = (c_4.xyz + (tmpvar_2.xyz * xlv_TEXCOORD2));
  c_1.w = tmpvar_3;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D unity_Lightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture2D (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  c_1.xyz = (tmpvar_2.xyz * (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz));
  c_1.w = tmpvar_2.w;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
out highp vec4 xlv_TEXCOORD0;
out highp vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D unity_Lightmap;
in highp vec4 xlv_TEXCOORD0;
in highp vec2 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  c_1.xyz = (tmpvar_2.xyz * (2.0 * texture (unity_Lightmap, xlv_TEXCOORD1).xyz));
  c_1.w = tmpvar_2.w;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture2D (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp vec3 tmpvar_3;
  tmpvar_3 = ((texture2D (_BumpMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  mat3 tmpvar_4;
  tmpvar_4[0].x = 0.816497;
  tmpvar_4[0].y = -0.408248;
  tmpvar_4[0].z = -0.408248;
  tmpvar_4[1].x = 0.0;
  tmpvar_4[1].y = 0.707107;
  tmpvar_4[1].z = -0.707107;
  tmpvar_4[2].x = 0.57735;
  tmpvar_4[2].y = 0.57735;
  tmpvar_4[2].z = 0.57735;
  mediump vec3 normal_5;
  normal_5 = tmpvar_3;
  mediump vec3 scalePerBasisVector_6;
  mediump vec3 lm_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_7 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = (2.0 * texture2D (unity_LightmapInd, xlv_TEXCOORD1).xyz);
  scalePerBasisVector_6 = tmpvar_9;
  lm_7 = (lm_7 * dot (clamp ((tmpvar_4 * normal_5), 0.0, 1.0), scalePerBasisVector_6));
  mediump vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_2.xyz * lm_7);
  c_1.xyz = tmpvar_10;
  c_1.w = tmpvar_2.w;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
out highp vec4 xlv_TEXCOORD0;
out highp vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
in highp vec4 xlv_TEXCOORD0;
in highp vec2 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp vec3 tmpvar_3;
  tmpvar_3 = ((texture (_BumpMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  mat3 tmpvar_4;
  tmpvar_4[0].x = 0.816497;
  tmpvar_4[0].y = -0.408248;
  tmpvar_4[0].z = -0.408248;
  tmpvar_4[1].x = 0.0;
  tmpvar_4[1].y = 0.707107;
  tmpvar_4[1].z = -0.707107;
  tmpvar_4[2].x = 0.57735;
  tmpvar_4[2].y = 0.57735;
  tmpvar_4[2].z = 0.57735;
  mediump vec3 normal_5;
  normal_5 = tmpvar_3;
  mediump vec3 scalePerBasisVector_6;
  mediump vec3 lm_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_7 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = (2.0 * texture (unity_LightmapInd, xlv_TEXCOORD1).xyz);
  scalePerBasisVector_6 = tmpvar_9;
  lm_7 = (lm_7 * dot (clamp ((tmpvar_4 * normal_5), 0.0, 1.0), scalePerBasisVector_6));
  mediump vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_2.xyz * lm_7);
  c_1.xyz = tmpvar_10;
  c_1.w = tmpvar_2.w;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 shlight_3;
  highp vec4 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * (tmpvar_2 * unity_Scale.w));
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1.xyz;
  tmpvar_10 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_2.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_2.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_2.z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_5 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_8;
  mediump vec3 tmpvar_14;
  mediump vec4 normal_15;
  normal_15 = tmpvar_13;
  highp float vC_16;
  mediump vec3 x3_17;
  mediump vec3 x2_18;
  mediump vec3 x1_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHAr, normal_15);
  x1_19.x = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHAg, normal_15);
  x1_19.y = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (unity_SHAb, normal_15);
  x1_19.z = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normal_15.xyzz * normal_15.yzzx);
  highp float tmpvar_24;
  tmpvar_24 = dot (unity_SHBr, tmpvar_23);
  x2_18.x = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = dot (unity_SHBg, tmpvar_23);
  x2_18.y = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = dot (unity_SHBb, tmpvar_23);
  x2_18.z = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = ((normal_15.x * normal_15.x) - (normal_15.y * normal_15.y));
  vC_16 = tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_28 = (unity_SHC.xyz * vC_16);
  x3_17 = tmpvar_28;
  tmpvar_14 = ((x1_19 + x2_18) + x3_17);
  shlight_3 = tmpvar_14;
  tmpvar_6 = shlight_3;
  highp vec3 tmpvar_29;
  tmpvar_29 = (_Object2World * _glesVertex).xyz;
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosX0 - tmpvar_29.x);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosY0 - tmpvar_29.y);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosZ0 - tmpvar_29.z);
  highp vec4 tmpvar_33;
  tmpvar_33 = (((tmpvar_30 * tmpvar_30) + (tmpvar_31 * tmpvar_31)) + (tmpvar_32 * tmpvar_32));
  highp vec4 tmpvar_34;
  tmpvar_34 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_30 * tmpvar_8.x) + (tmpvar_31 * tmpvar_8.y)) + (tmpvar_32 * tmpvar_8.z)) * inversesqrt(tmpvar_33))) * (1.0/((1.0 + (tmpvar_33 * unity_4LightAtten0)))));
  highp vec3 tmpvar_35;
  tmpvar_35 = (tmpvar_6 + ((((unity_LightColor[0].xyz * tmpvar_34.x) + (unity_LightColor[1].xyz * tmpvar_34.y)) + (unity_LightColor[2].xyz * tmpvar_34.z)) + (unity_LightColor[3].xyz * tmpvar_34.w)));
  tmpvar_6 = tmpvar_35;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture2D (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp float tmpvar_3;
  tmpvar_3 = tmpvar_2.w;
  lowp vec4 c_4;
  c_4.xyz = ((tmpvar_2.xyz * _LightColor0.xyz) * (max (0.0, dot (((texture2D (_BumpMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0), xlv_TEXCOORD1)) * 2.0));
  c_4.w = tmpvar_3;
  c_1.xyz = (c_4.xyz + (tmpvar_2.xyz * xlv_TEXCOORD2));
  c_1.w = tmpvar_3;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
out highp vec4 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 shlight_3;
  highp vec4 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * (tmpvar_2 * unity_Scale.w));
  highp vec3 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1.xyz;
  tmpvar_10 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_11;
  tmpvar_11[0].x = tmpvar_9.x;
  tmpvar_11[0].y = tmpvar_10.x;
  tmpvar_11[0].z = tmpvar_2.x;
  tmpvar_11[1].x = tmpvar_9.y;
  tmpvar_11[1].y = tmpvar_10.y;
  tmpvar_11[1].z = tmpvar_2.y;
  tmpvar_11[2].x = tmpvar_9.z;
  tmpvar_11[2].y = tmpvar_10.z;
  tmpvar_11[2].z = tmpvar_2.z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_5 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_8;
  mediump vec3 tmpvar_14;
  mediump vec4 normal_15;
  normal_15 = tmpvar_13;
  highp float vC_16;
  mediump vec3 x3_17;
  mediump vec3 x2_18;
  mediump vec3 x1_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHAr, normal_15);
  x1_19.x = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHAg, normal_15);
  x1_19.y = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (unity_SHAb, normal_15);
  x1_19.z = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normal_15.xyzz * normal_15.yzzx);
  highp float tmpvar_24;
  tmpvar_24 = dot (unity_SHBr, tmpvar_23);
  x2_18.x = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = dot (unity_SHBg, tmpvar_23);
  x2_18.y = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = dot (unity_SHBb, tmpvar_23);
  x2_18.z = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = ((normal_15.x * normal_15.x) - (normal_15.y * normal_15.y));
  vC_16 = tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_28 = (unity_SHC.xyz * vC_16);
  x3_17 = tmpvar_28;
  tmpvar_14 = ((x1_19 + x2_18) + x3_17);
  shlight_3 = tmpvar_14;
  tmpvar_6 = shlight_3;
  highp vec3 tmpvar_29;
  tmpvar_29 = (_Object2World * _glesVertex).xyz;
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosX0 - tmpvar_29.x);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosY0 - tmpvar_29.y);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosZ0 - tmpvar_29.z);
  highp vec4 tmpvar_33;
  tmpvar_33 = (((tmpvar_30 * tmpvar_30) + (tmpvar_31 * tmpvar_31)) + (tmpvar_32 * tmpvar_32));
  highp vec4 tmpvar_34;
  tmpvar_34 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_30 * tmpvar_8.x) + (tmpvar_31 * tmpvar_8.y)) + (tmpvar_32 * tmpvar_8.z)) * inversesqrt(tmpvar_33))) * (1.0/((1.0 + (tmpvar_33 * unity_4LightAtten0)))));
  highp vec3 tmpvar_35;
  tmpvar_35 = (tmpvar_6 + ((((unity_LightColor[0].xyz * tmpvar_34.x) + (unity_LightColor[1].xyz * tmpvar_34.y)) + (unity_LightColor[2].xyz * tmpvar_34.z)) + (unity_LightColor[3].xyz * tmpvar_34.w)));
  tmpvar_6 = tmpvar_35;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp float tmpvar_3;
  tmpvar_3 = tmpvar_2.w;
  lowp vec4 c_4;
  c_4.xyz = ((tmpvar_2.xyz * _LightColor0.xyz) * (max (0.0, dot (((texture (_BumpMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0), xlv_TEXCOORD1)) * 2.0));
  c_4.w = tmpvar_3;
  c_1.xyz = (c_4.xyz + (tmpvar_2.xyz * xlv_TEXCOORD2));
  c_1.w = tmpvar_3;
  _glesFragData[0] = c_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES3"
}
}
 }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardAdd" "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
  ZWrite Off
  Fog {
   Color (0,0,0,0)
  }
  Blend SrcAlpha One
  AlphaTest Greater 0
  ColorMask RGB
Program "vp" {
SubProgram "gles " {
Keywords { "POINT" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  highp vec3 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_5 = tmpvar_1.xyz;
  tmpvar_6 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_7;
  tmpvar_7[0].x = tmpvar_5.x;
  tmpvar_7[0].y = tmpvar_6.x;
  tmpvar_7[0].z = tmpvar_2.x;
  tmpvar_7[1].x = tmpvar_5.y;
  tmpvar_7[1].y = tmpvar_6.y;
  tmpvar_7[1].z = tmpvar_2.y;
  tmpvar_7[2].x = tmpvar_5.z;
  tmpvar_7[2].y = tmpvar_6.z;
  tmpvar_7[2].z = tmpvar_2.z;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_4 = tmpvar_8;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture2D (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp float tmpvar_4;
  tmpvar_4 = tmpvar_3.w;
  mediump vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD1);
  lightDir_2 = tmpvar_5;
  highp float tmpvar_6;
  tmpvar_6 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 c_7;
  c_7.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * ((max (0.0, dot (((texture2D (_BumpMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0), lightDir_2)) * texture2D (_LightTexture0, vec2(tmpvar_6)).w) * 2.0));
  c_7.w = tmpvar_4;
  c_1.xyz = c_7.xyz;
  c_1.w = tmpvar_4;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
out highp vec4 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  highp vec3 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_5 = tmpvar_1.xyz;
  tmpvar_6 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_7;
  tmpvar_7[0].x = tmpvar_5.x;
  tmpvar_7[0].y = tmpvar_6.x;
  tmpvar_7[0].z = tmpvar_2.x;
  tmpvar_7[1].x = tmpvar_5.y;
  tmpvar_7[1].y = tmpvar_6.y;
  tmpvar_7[1].z = tmpvar_2.y;
  tmpvar_7[2].x = tmpvar_5.z;
  tmpvar_7[2].y = tmpvar_6.z;
  tmpvar_7[2].z = tmpvar_2.z;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_4 = tmpvar_8;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp float tmpvar_4;
  tmpvar_4 = tmpvar_3.w;
  mediump vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD1);
  lightDir_2 = tmpvar_5;
  highp float tmpvar_6;
  tmpvar_6 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 c_7;
  c_7.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * ((max (0.0, dot (((texture (_BumpMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0), lightDir_2)) * texture (_LightTexture0, vec2(tmpvar_6)).w) * 2.0));
  c_7.w = tmpvar_4;
  c_1.xyz = c_7.xyz;
  c_1.w = tmpvar_4;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  highp vec3 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_5 = tmpvar_1.xyz;
  tmpvar_6 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_7;
  tmpvar_7[0].x = tmpvar_5.x;
  tmpvar_7[0].y = tmpvar_6.x;
  tmpvar_7[0].z = tmpvar_2.x;
  tmpvar_7[1].x = tmpvar_5.y;
  tmpvar_7[1].y = tmpvar_6.y;
  tmpvar_7[1].z = tmpvar_2.y;
  tmpvar_7[2].x = tmpvar_5.z;
  tmpvar_7[2].y = tmpvar_6.z;
  tmpvar_7[2].z = tmpvar_2.z;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_4 = tmpvar_8;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture2D (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp float tmpvar_4;
  tmpvar_4 = tmpvar_3.w;
  lightDir_2 = xlv_TEXCOORD1;
  lowp vec4 c_5;
  c_5.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * (max (0.0, dot (((texture2D (_BumpMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0), lightDir_2)) * 2.0));
  c_5.w = tmpvar_4;
  c_1.xyz = c_5.xyz;
  c_1.w = tmpvar_4;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
out highp vec4 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  highp vec3 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_5 = tmpvar_1.xyz;
  tmpvar_6 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_7;
  tmpvar_7[0].x = tmpvar_5.x;
  tmpvar_7[0].y = tmpvar_6.x;
  tmpvar_7[0].z = tmpvar_2.x;
  tmpvar_7[1].x = tmpvar_5.y;
  tmpvar_7[1].y = tmpvar_6.y;
  tmpvar_7[1].z = tmpvar_2.y;
  tmpvar_7[2].x = tmpvar_5.z;
  tmpvar_7[2].y = tmpvar_6.z;
  tmpvar_7[2].z = tmpvar_2.z;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_4 = tmpvar_8;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp float tmpvar_4;
  tmpvar_4 = tmpvar_3.w;
  lightDir_2 = xlv_TEXCOORD1;
  lowp vec4 c_5;
  c_5.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * (max (0.0, dot (((texture (_BumpMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0), lightDir_2)) * 2.0));
  c_5.w = tmpvar_4;
  c_1.xyz = c_5.xyz;
  c_1.w = tmpvar_4;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  highp vec3 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_5 = tmpvar_1.xyz;
  tmpvar_6 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_7;
  tmpvar_7[0].x = tmpvar_5.x;
  tmpvar_7[0].y = tmpvar_6.x;
  tmpvar_7[0].z = tmpvar_2.x;
  tmpvar_7[1].x = tmpvar_5.y;
  tmpvar_7[1].y = tmpvar_6.y;
  tmpvar_7[1].z = tmpvar_2.y;
  tmpvar_7[2].x = tmpvar_5.z;
  tmpvar_7[2].y = tmpvar_6.z;
  tmpvar_7[2].z = tmpvar_2.z;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_4 = tmpvar_8;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture2D (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp float tmpvar_4;
  tmpvar_4 = tmpvar_3.w;
  mediump vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD1);
  lightDir_2 = tmpvar_5;
  highp vec2 P_6;
  P_6 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  highp float tmpvar_7;
  tmpvar_7 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp float atten_8;
  atten_8 = ((float((xlv_TEXCOORD2.z > 0.0)) * texture2D (_LightTexture0, P_6).w) * texture2D (_LightTextureB0, vec2(tmpvar_7)).w);
  lowp vec4 c_9;
  c_9.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * ((max (0.0, dot (((texture2D (_BumpMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0), lightDir_2)) * atten_8) * 2.0));
  c_9.w = tmpvar_4;
  c_1.xyz = c_9.xyz;
  c_1.w = tmpvar_4;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
out highp vec4 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  highp vec3 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_5 = tmpvar_1.xyz;
  tmpvar_6 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_7;
  tmpvar_7[0].x = tmpvar_5.x;
  tmpvar_7[0].y = tmpvar_6.x;
  tmpvar_7[0].z = tmpvar_2.x;
  tmpvar_7[1].x = tmpvar_5.y;
  tmpvar_7[1].y = tmpvar_6.y;
  tmpvar_7[1].z = tmpvar_2.y;
  tmpvar_7[2].x = tmpvar_5.z;
  tmpvar_7[2].y = tmpvar_6.z;
  tmpvar_7[2].z = tmpvar_2.z;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_4 = tmpvar_8;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp float tmpvar_4;
  tmpvar_4 = tmpvar_3.w;
  mediump vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD1);
  lightDir_2 = tmpvar_5;
  highp vec2 P_6;
  P_6 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  highp float tmpvar_7;
  tmpvar_7 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp float atten_8;
  atten_8 = ((float((xlv_TEXCOORD2.z > 0.0)) * texture (_LightTexture0, P_6).w) * texture (_LightTextureB0, vec2(tmpvar_7)).w);
  lowp vec4 c_9;
  c_9.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * ((max (0.0, dot (((texture (_BumpMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0), lightDir_2)) * atten_8) * 2.0));
  c_9.w = tmpvar_4;
  c_1.xyz = c_9.xyz;
  c_1.w = tmpvar_4;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  highp vec3 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_5 = tmpvar_1.xyz;
  tmpvar_6 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_7;
  tmpvar_7[0].x = tmpvar_5.x;
  tmpvar_7[0].y = tmpvar_6.x;
  tmpvar_7[0].z = tmpvar_2.x;
  tmpvar_7[1].x = tmpvar_5.y;
  tmpvar_7[1].y = tmpvar_6.y;
  tmpvar_7[1].z = tmpvar_2.y;
  tmpvar_7[2].x = tmpvar_5.z;
  tmpvar_7[2].y = tmpvar_6.z;
  tmpvar_7[2].z = tmpvar_2.z;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_4 = tmpvar_8;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture2D (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp float tmpvar_4;
  tmpvar_4 = tmpvar_3.w;
  mediump vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD1);
  lightDir_2 = tmpvar_5;
  highp float tmpvar_6;
  tmpvar_6 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 c_7;
  c_7.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * ((max (0.0, dot (((texture2D (_BumpMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0), lightDir_2)) * (texture2D (_LightTextureB0, vec2(tmpvar_6)).w * textureCube (_LightTexture0, xlv_TEXCOORD2).w)) * 2.0));
  c_7.w = tmpvar_4;
  c_1.xyz = c_7.xyz;
  c_1.w = tmpvar_4;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
out highp vec4 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  highp vec3 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_5 = tmpvar_1.xyz;
  tmpvar_6 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_7;
  tmpvar_7[0].x = tmpvar_5.x;
  tmpvar_7[0].y = tmpvar_6.x;
  tmpvar_7[0].z = tmpvar_2.x;
  tmpvar_7[1].x = tmpvar_5.y;
  tmpvar_7[1].y = tmpvar_6.y;
  tmpvar_7[1].z = tmpvar_2.y;
  tmpvar_7[2].x = tmpvar_5.z;
  tmpvar_7[2].y = tmpvar_6.z;
  tmpvar_7[2].z = tmpvar_2.z;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_4 = tmpvar_8;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp float tmpvar_4;
  tmpvar_4 = tmpvar_3.w;
  mediump vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD1);
  lightDir_2 = tmpvar_5;
  highp float tmpvar_6;
  tmpvar_6 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 c_7;
  c_7.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * ((max (0.0, dot (((texture (_BumpMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0), lightDir_2)) * (texture (_LightTextureB0, vec2(tmpvar_6)).w * texture (_LightTexture0, xlv_TEXCOORD2).w)) * 2.0));
  c_7.w = tmpvar_4;
  c_1.xyz = c_7.xyz;
  c_1.w = tmpvar_4;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  highp vec3 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_5 = tmpvar_1.xyz;
  tmpvar_6 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_7;
  tmpvar_7[0].x = tmpvar_5.x;
  tmpvar_7[0].y = tmpvar_6.x;
  tmpvar_7[0].z = tmpvar_2.x;
  tmpvar_7[1].x = tmpvar_5.y;
  tmpvar_7[1].y = tmpvar_6.y;
  tmpvar_7[1].z = tmpvar_2.y;
  tmpvar_7[2].x = tmpvar_5.z;
  tmpvar_7[2].y = tmpvar_6.z;
  tmpvar_7[2].z = tmpvar_2.z;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_4 = tmpvar_8;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture2D (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp float tmpvar_4;
  tmpvar_4 = tmpvar_3.w;
  lightDir_2 = xlv_TEXCOORD1;
  lowp vec4 c_5;
  c_5.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * ((max (0.0, dot (((texture2D (_BumpMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0), lightDir_2)) * texture2D (_LightTexture0, xlv_TEXCOORD2).w) * 2.0));
  c_5.w = tmpvar_4;
  c_1.xyz = c_5.xyz;
  c_1.w = tmpvar_4;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
out highp vec4 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
  highp vec3 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_5 = tmpvar_1.xyz;
  tmpvar_6 = (((tmpvar_2.yzx * tmpvar_1.zxy) - (tmpvar_2.zxy * tmpvar_1.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_7;
  tmpvar_7[0].x = tmpvar_5.x;
  tmpvar_7[0].y = tmpvar_6.x;
  tmpvar_7[0].z = tmpvar_2.x;
  tmpvar_7[1].x = tmpvar_5.y;
  tmpvar_7[1].y = tmpvar_6.y;
  tmpvar_7[1].z = tmpvar_2.y;
  tmpvar_7[2].x = tmpvar_5.z;
  tmpvar_7[2].y = tmpvar_6.z;
  tmpvar_7[2].z = tmpvar_2.z;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_4 = tmpvar_8;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture (_MainTex, xlv_TEXCOORD0.xy) * _Color);
  lowp float tmpvar_4;
  tmpvar_4 = tmpvar_3.w;
  lightDir_2 = xlv_TEXCOORD1;
  lowp vec4 c_5;
  c_5.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * ((max (0.0, dot (((texture (_BumpMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0), lightDir_2)) * texture (_LightTexture0, xlv_TEXCOORD2).w) * 2.0));
  c_5.w = tmpvar_4;
  c_1.xyz = c_5.xyz;
  c_1.w = tmpvar_4;
  _glesFragData[0] = c_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "POINT" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3"
}
}
 }
}
Fallback "Transparent/Diffuse"
}           (       *         Alpha-VertexLit ÿ  Shader "Transparent/VertexLit" {
Properties {
 _Color ("Main Color", Color) = (1,1,1,1)
 _SpecColor ("Spec Color", Color) = (1,1,1,0)
 _Emission ("Emissive Color", Color) = (0,0,0,0)
 _Shininess ("Shininess", Range(0.1,1)) = 0.7
 _MainTex ("Base (RGB) Trans (A)", 2D) = "white" {}
}
SubShader { 
 LOD 100
 Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
 Pass {
  Tags { "LIGHTMODE"="Vertex" "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
  Lighting On
  SeparateSpecular On
  Material {
   Ambient [_Color]
   Diffuse [_Color]
   Emission [_Emission]
   Specular [_SpecColor]
   Shininess [_Shininess]
  }
  ZWrite Off
  Blend SrcAlpha OneMinusSrcAlpha
  AlphaTest Greater 0
  ColorMask RGB
  SetTexture [_MainTex] { combine texture * primary double, texture alpha * primary alpha }
 }
 Pass {
  Tags { "LIGHTMODE"="VertexLM" "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
  BindChannels {
   Bind "vertex", Vertex
   Bind "normal", Normal
   Bind "texcoord1", TexCoord0
   Bind "texcoord", TexCoord1
  }
  ZWrite Off
  Blend SrcAlpha OneMinusSrcAlpha
  AlphaTest Greater 0
  ColorMask RGB
  SetTexture [unity_Lightmap] { Matrix [unity_LightmapMatrix] ConstantColor [_Color] combine texture * constant }
  SetTexture [_MainTex] { combine texture * previous double, texture alpha * primary alpha }
 }
 Pass {
  Tags { "LIGHTMODE"="VertexLMRGBM" "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
  BindChannels {
   Bind "vertex", Vertex
   Bind "normal", Normal
   Bind "texcoord1", TexCoord0
   Bind "texcoord1", TexCoord1
   Bind "texcoord", TexCoord2
  }
  ZWrite Off
  Blend SrcAlpha OneMinusSrcAlpha
  AlphaTest Greater 0
  ColorMask RGB
  SetTexture [unity_Lightmap] { Matrix [unity_LightmapMatrix] combine texture * texture alpha double }
  SetTexture [unity_Lightmap] { ConstantColor [_Color] combine previous * constant }
  SetTexture [_MainTex] { combine texture * previous quad, texture alpha * primary alpha }
 }
}
}                   Skybox  ((  Shader "RenderFX/Skybox" {
Properties {
 _Tint ("Tint Color", Color) = (0.5,0.5,0.5,0.5)
 _FrontTex ("Front (+Z)", 2D) = "white" {}
 _BackTex ("Back (-Z)", 2D) = "white" {}
 _LeftTex ("Left (+X)", 2D) = "white" {}
 _RightTex ("Right (-X)", 2D) = "white" {}
 _UpTex ("Up (+Y)", 2D) = "white" {}
 _DownTex ("Down (-Y)", 2D) = "white" {}
}
SubShader { 
 Tags { "QUEUE"="Background" "RenderType"="Background" }
 Pass {
  Tags { "QUEUE"="Background" "RenderType"="Background" }
  ZWrite Off
  Cull Off
  Fog { Mode Off }
Program "vp" {
SubProgram "gles " {
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesMultiTexCoord0.xy;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 unity_ColorSpaceGrey;
uniform lowp vec4 _Tint;
uniform sampler2D _FrontTex;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 col_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_FrontTex, xlv_TEXCOORD0);
  col_1.xyz = ((tmpvar_2.xyz + _Tint.xyz) - unity_ColorSpaceGrey.xyz);
  col_1.w = (tmpvar_2.w * _Tint.w);
  gl_FragData[0] = col_1;
}



#endif"
}
SubProgram "gles3 " {
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
out highp vec2 xlv_TEXCOORD0;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesMultiTexCoord0.xy;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 unity_ColorSpaceGrey;
uniform lowp vec4 _Tint;
uniform sampler2D _FrontTex;
in highp vec2 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 col_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture (_FrontTex, xlv_TEXCOORD0);
  col_1.xyz = ((tmpvar_2.xyz + _Tint.xyz) - unity_ColorSpaceGrey.xyz);
  col_1.w = (tmpvar_2.w * _Tint.w);
  _glesFragData[0] = col_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
"!!GLES"
}
SubProgram "gles3 " {
"!!GLES3"
}
}
 }
 Pass {
  Tags { "QUEUE"="Background" "RenderType"="Background" }
  ZWrite Off
  Cull Off
  Fog { Mode Off }
Program "vp" {
SubProgram "gles " {
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesMultiTexCoord0.xy;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 unity_ColorSpaceGrey;
uniform lowp vec4 _Tint;
uniform sampler2D _BackTex;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 col_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_BackTex, xlv_TEXCOORD0);
  col_1.xyz = ((tmpvar_2.xyz + _Tint.xyz) - unity_ColorSpaceGrey.xyz);
  col_1.w = (tmpvar_2.w * _Tint.w);
  gl_FragData[0] = col_1;
}



#endif"
}
SubProgram "gles3 " {
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
out highp vec2 xlv_TEXCOORD0;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesMultiTexCoord0.xy;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 unity_ColorSpaceGrey;
uniform lowp vec4 _Tint;
uniform sampler2D _BackTex;
in highp vec2 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 col_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture (_BackTex, xlv_TEXCOORD0);
  col_1.xyz = ((tmpvar_2.xyz + _Tint.xyz) - unity_ColorSpaceGrey.xyz);
  col_1.w = (tmpvar_2.w * _Tint.w);
  _glesFragData[0] = col_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
"!!GLES"
}
SubProgram "gles3 " {
"!!GLES3"
}
}
 }
 Pass {
  Tags { "QUEUE"="Background" "RenderType"="Background" }
  ZWrite Off
  Cull Off
  Fog { Mode Off }
Program "vp" {
SubProgram "gles " {
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesMultiTexCoord0.xy;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 unity_ColorSpaceGrey;
uniform lowp vec4 _Tint;
uniform sampler2D _LeftTex;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 col_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_LeftTex, xlv_TEXCOORD0);
  col_1.xyz = ((tmpvar_2.xyz + _Tint.xyz) - unity_ColorSpaceGrey.xyz);
  col_1.w = (tmpvar_2.w * _Tint.w);
  gl_FragData[0] = col_1;
}



#endif"
}
SubProgram "gles3 " {
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
out highp vec2 xlv_TEXCOORD0;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesMultiTexCoord0.xy;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 unity_ColorSpaceGrey;
uniform lowp vec4 _Tint;
uniform sampler2D _LeftTex;
in highp vec2 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 col_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture (_LeftTex, xlv_TEXCOORD0);
  col_1.xyz = ((tmpvar_2.xyz + _Tint.xyz) - unity_ColorSpaceGrey.xyz);
  col_1.w = (tmpvar_2.w * _Tint.w);
  _glesFragData[0] = col_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
"!!GLES"
}
SubProgram "gles3 " {
"!!GLES3"
}
}
 }
 Pass {
  Tags { "QUEUE"="Background" "RenderType"="Background" }
  ZWrite Off
  Cull Off
  Fog { Mode Off }
Program "vp" {
SubProgram "gles " {
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesMultiTexCoord0.xy;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 unity_ColorSpaceGrey;
uniform lowp vec4 _Tint;
uniform sampler2D _RightTex;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 col_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_RightTex, xlv_TEXCOORD0);
  col_1.xyz = ((tmpvar_2.xyz + _Tint.xyz) - unity_ColorSpaceGrey.xyz);
  col_1.w = (tmpvar_2.w * _Tint.w);
  gl_FragData[0] = col_1;
}



#endif"
}
SubProgram "gles3 " {
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
out highp vec2 xlv_TEXCOORD0;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesMultiTexCoord0.xy;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 unity_ColorSpaceGrey;
uniform lowp vec4 _Tint;
uniform sampler2D _RightTex;
in highp vec2 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 col_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture (_RightTex, xlv_TEXCOORD0);
  col_1.xyz = ((tmpvar_2.xyz + _Tint.xyz) - unity_ColorSpaceGrey.xyz);
  col_1.w = (tmpvar_2.w * _Tint.w);
  _glesFragData[0] = col_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
"!!GLES"
}
SubProgram "gles3 " {
"!!GLES3"
}
}
 }
 Pass {
  Tags { "QUEUE"="Background" "RenderType"="Background" }
  ZWrite Off
  Cull Off
  Fog { Mode Off }
Program "vp" {
SubProgram "gles " {
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesMultiTexCoord0.xy;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 unity_ColorSpaceGrey;
uniform lowp vec4 _Tint;
uniform sampler2D _UpTex;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 col_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_UpTex, xlv_TEXCOORD0);
  col_1.xyz = ((tmpvar_2.xyz + _Tint.xyz) - unity_ColorSpaceGrey.xyz);
  col_1.w = (tmpvar_2.w * _Tint.w);
  gl_FragData[0] = col_1;
}



#endif"
}
SubProgram "gles3 " {
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
out highp vec2 xlv_TEXCOORD0;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesMultiTexCoord0.xy;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 unity_ColorSpaceGrey;
uniform lowp vec4 _Tint;
uniform sampler2D _UpTex;
in highp vec2 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 col_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture (_UpTex, xlv_TEXCOORD0);
  col_1.xyz = ((tmpvar_2.xyz + _Tint.xyz) - unity_ColorSpaceGrey.xyz);
  col_1.w = (tmpvar_2.w * _Tint.w);
  _glesFragData[0] = col_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
"!!GLES"
}
SubProgram "gles3 " {
"!!GLES3"
}
}
 }
 Pass {
  Tags { "QUEUE"="Background" "RenderType"="Background" }
  ZWrite Off
  Cull Off
  Fog { Mode Off }
Program "vp" {
SubProgram "gles " {
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesMultiTexCoord0.xy;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 unity_ColorSpaceGrey;
uniform lowp vec4 _Tint;
uniform sampler2D _DownTex;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 col_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_DownTex, xlv_TEXCOORD0);
  col_1.xyz = ((tmpvar_2.xyz + _Tint.xyz) - unity_ColorSpaceGrey.xyz);
  col_1.w = (tmpvar_2.w * _Tint.w);
  gl_FragData[0] = col_1;
}



#endif"
}
SubProgram "gles3 " {
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
out highp vec2 xlv_TEXCOORD0;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesMultiTexCoord0.xy;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 unity_ColorSpaceGrey;
uniform lowp vec4 _Tint;
uniform sampler2D _DownTex;
in highp vec2 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 col_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture (_DownTex, xlv_TEXCOORD0);
  col_1.xyz = ((tmpvar_2.xyz + _Tint.xyz) - unity_ColorSpaceGrey.xyz);
  col_1.w = (tmpvar_2.w * _Tint.w);
  _glesFragData[0] = col_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
"!!GLES"
}
SubProgram "gles3 " {
"!!GLES3"
}
}
 }
}
}                  Particle Premultiply Blend  ¶  Shader "Particles/Alpha Blended Premultiply" {
Properties {
 _MainTex ("Particle Texture", 2D) = "white" {}
 _InvFade ("Soft Particles Factor", Range(0.01,3)) = 1
}
SubShader { 
 Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
 Pass {
  Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
  ZWrite Off
  Cull Off
  Fog { Mode Off }
  Blend One OneMinusSrcAlpha
  ColorMask RGB
Program "vp" {
SubProgram "gles " {
Keywords { "SOFTPARTICLES_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _MainTex_ST;
varying lowp vec4 xlv_COLOR;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_COLOR = _glesColor;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
varying lowp vec4 xlv_COLOR;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = ((xlv_COLOR * texture2D (_MainTex, xlv_TEXCOORD0)) * xlv_COLOR.w);
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SOFTPARTICLES_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _MainTex_ST;
out lowp vec4 xlv_COLOR;
out highp vec2 xlv_TEXCOORD0;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_COLOR = _glesColor;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
in lowp vec4 xlv_COLOR;
in highp vec2 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = ((xlv_COLOR * texture (_MainTex, xlv_TEXCOORD0)) * xlv_COLOR.w);
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "SOFTPARTICLES_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp vec4 _MainTex_ST;
varying lowp vec4 xlv_COLOR;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_3.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_COLOR = _glesColor;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _ZBufferParams;
uniform sampler2D _MainTex;
uniform highp sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
varying lowp vec4 xlv_COLOR;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1.xyz = xlv_COLOR.xyz;
  highp vec4 tmpvar_2;
  tmpvar_2 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD1);
  highp float tmpvar_3;
  tmpvar_3 = (xlv_COLOR.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * tmpvar_2.x) + _ZBufferParams.w))) - xlv_TEXCOORD1.z)), 0.0, 1.0));
  tmpvar_1.w = tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = ((tmpvar_1 * texture2D (_MainTex, xlv_TEXCOORD0)) * tmpvar_1.w);
  gl_FragData[0] = tmpvar_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SOFTPARTICLES_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp vec4 _MainTex_ST;
out lowp vec4 xlv_COLOR;
out highp vec2 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_3.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_COLOR = _glesColor;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform highp vec4 _ZBufferParams;
uniform sampler2D _MainTex;
uniform highp sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
in lowp vec4 xlv_COLOR;
in highp vec2 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1.xyz = xlv_COLOR.xyz;
  highp vec4 tmpvar_2;
  tmpvar_2 = textureProj (_CameraDepthTexture, xlv_TEXCOORD1);
  highp float tmpvar_3;
  tmpvar_3 = (xlv_COLOR.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * tmpvar_2.x) + _ZBufferParams.w))) - xlv_TEXCOORD1.z)), 0.0, 1.0));
  tmpvar_1.w = tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = ((tmpvar_1 * texture (_MainTex, xlv_TEXCOORD0)) * tmpvar_1.w);
  _glesFragData[0] = tmpvar_4;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "SOFTPARTICLES_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SOFTPARTICLES_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SOFTPARTICLES_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SOFTPARTICLES_ON" }
"!!GLES3"
}
}
 }
}
}             	   VertexLit   )ý Shader "Hidden/TerrainEngine/Details/Vertexlit" {
Properties {
 _MainTex ("Main Texture", 2D) = "white" {}
}
SubShader { 
 LOD 200
 Tags { "RenderType"="Opaque" }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardBase" "SHADOWSUPPORT"="true" "RenderType"="Opaque" }
Program "vp" {
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp vec4 c_3;
  c_3.xyz = ((tmpvar_2.xyz * _LightColor0.xyz) * (max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz)) * 2.0));
  c_3.w = tmpvar_2.w;
  c_1.w = c_3.w;
  c_1.xyz = (c_3.xyz + (tmpvar_2.xyz * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp vec4 c_3;
  c_3.xyz = ((tmpvar_2.xyz * _LightColor0.xyz) * (max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz)) * 2.0));
  c_3.w = tmpvar_2.w;
  c_1.w = c_3.w;
  c_1.xyz = (c_3.xyz + (tmpvar_2.xyz * xlv_TEXCOORD2));
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform sampler2D unity_Lightmap;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  c_1.xyz = (tmpvar_2.xyz * (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz));
  c_1.w = tmpvar_2.w;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec2 xlv_TEXCOORD1;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform sampler2D unity_Lightmap;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec2 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  c_1.xyz = (tmpvar_2.xyz * (2.0 * texture (unity_Lightmap, xlv_TEXCOORD1).xyz));
  c_1.w = tmpvar_2.w;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform sampler2D unity_Lightmap;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  mediump vec3 lm_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_3 = tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_2.xyz * lm_3);
  c_1.xyz = tmpvar_5;
  c_1.w = tmpvar_2.w;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec2 xlv_TEXCOORD1;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform sampler2D unity_Lightmap;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec2 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  mediump vec3 lm_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_3 = tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_2.xyz * lm_3);
  c_1.xyz = tmpvar_5;
  c_1.w = tmpvar_2.w;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float tmpvar_3;
  mediump float lightShadowDataX_4;
  highp float dist_5;
  lowp float tmpvar_6;
  tmpvar_6 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_5 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = _LightShadowData.x;
  lightShadowDataX_4 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = max (float((dist_5 > (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))), lightShadowDataX_4);
  tmpvar_3 = tmpvar_8;
  lowp vec4 c_9;
  c_9.xyz = ((tmpvar_2.xyz * _LightColor0.xyz) * ((max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz)) * tmpvar_3) * 2.0));
  c_9.w = tmpvar_2.w;
  c_1.w = c_9.w;
  c_1.xyz = (c_9.xyz + (tmpvar_2.xyz * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float tmpvar_3;
  mediump float lightShadowDataX_4;
  highp float dist_5;
  lowp float tmpvar_6;
  tmpvar_6 = textureProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_5 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = _LightShadowData.x;
  lightShadowDataX_4 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = max (float((dist_5 > (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))), lightShadowDataX_4);
  tmpvar_3 = tmpvar_8;
  lowp vec4 c_9;
  c_9.xyz = ((tmpvar_2.xyz * _LightColor0.xyz) * ((max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz)) * tmpvar_3) * 2.0));
  c_9.w = tmpvar_2.w;
  c_1.w = c_9.w;
  c_1.xyz = (c_9.xyz + (tmpvar_2.xyz * xlv_TEXCOORD2));
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _LightShadowData;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D unity_Lightmap;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float tmpvar_3;
  mediump float lightShadowDataX_4;
  highp float dist_5;
  lowp float tmpvar_6;
  tmpvar_6 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD2).x;
  dist_5 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = _LightShadowData.x;
  lightShadowDataX_4 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = max (float((dist_5 > (xlv_TEXCOORD2.z / xlv_TEXCOORD2.w))), lightShadowDataX_4);
  tmpvar_3 = tmpvar_8;
  c_1.xyz = (tmpvar_2.xyz * min ((2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz), vec3((tmpvar_3 * 2.0))));
  c_1.w = tmpvar_2.w;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec2 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform highp vec4 _LightShadowData;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D unity_Lightmap;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec2 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float tmpvar_3;
  mediump float lightShadowDataX_4;
  highp float dist_5;
  lowp float tmpvar_6;
  tmpvar_6 = textureProj (_ShadowMapTexture, xlv_TEXCOORD2).x;
  dist_5 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = _LightShadowData.x;
  lightShadowDataX_4 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = max (float((dist_5 > (xlv_TEXCOORD2.z / xlv_TEXCOORD2.w))), lightShadowDataX_4);
  tmpvar_3 = tmpvar_8;
  c_1.xyz = (tmpvar_2.xyz * min ((2.0 * texture (unity_Lightmap, xlv_TEXCOORD1).xyz), vec3((tmpvar_3 * 2.0))));
  c_1.w = tmpvar_2.w;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _LightShadowData;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D unity_Lightmap;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float tmpvar_3;
  mediump float lightShadowDataX_4;
  highp float dist_5;
  lowp float tmpvar_6;
  tmpvar_6 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD2).x;
  dist_5 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = _LightShadowData.x;
  lightShadowDataX_4 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = max (float((dist_5 > (xlv_TEXCOORD2.z / xlv_TEXCOORD2.w))), lightShadowDataX_4);
  tmpvar_3 = tmpvar_8;
  mediump vec3 lm_9;
  lowp vec3 tmpvar_10;
  tmpvar_10 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_9 = tmpvar_10;
  lowp vec3 tmpvar_11;
  tmpvar_11 = vec3((tmpvar_3 * 2.0));
  mediump vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_2.xyz * min (lm_9, tmpvar_11));
  c_1.xyz = tmpvar_12;
  c_1.w = tmpvar_2.w;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec2 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform highp vec4 _LightShadowData;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D unity_Lightmap;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec2 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float tmpvar_3;
  mediump float lightShadowDataX_4;
  highp float dist_5;
  lowp float tmpvar_6;
  tmpvar_6 = textureProj (_ShadowMapTexture, xlv_TEXCOORD2).x;
  dist_5 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = _LightShadowData.x;
  lightShadowDataX_4 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = max (float((dist_5 > (xlv_TEXCOORD2.z / xlv_TEXCOORD2.w))), lightShadowDataX_4);
  tmpvar_3 = tmpvar_8;
  mediump vec3 lm_9;
  lowp vec3 tmpvar_10;
  tmpvar_10 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_9 = tmpvar_10;
  lowp vec3 tmpvar_11;
  tmpvar_11 = vec3((tmpvar_3 * 2.0));
  mediump vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_2.xyz * min (lm_9, tmpvar_11));
  c_1.xyz = tmpvar_12;
  c_1.w = tmpvar_2.w;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  highp vec3 tmpvar_22;
  tmpvar_22 = (_Object2World * _glesVertex).xyz;
  highp vec4 tmpvar_23;
  tmpvar_23 = (unity_4LightPosX0 - tmpvar_22.x);
  highp vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosY0 - tmpvar_22.y);
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosZ0 - tmpvar_22.z);
  highp vec4 tmpvar_26;
  tmpvar_26 = (((tmpvar_23 * tmpvar_23) + (tmpvar_24 * tmpvar_24)) + (tmpvar_25 * tmpvar_25));
  highp vec4 tmpvar_27;
  tmpvar_27 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_23 * tmpvar_5.x) + (tmpvar_24 * tmpvar_5.y)) + (tmpvar_25 * tmpvar_5.z)) * inversesqrt(tmpvar_26))) * (1.0/((1.0 + (tmpvar_26 * unity_4LightAtten0)))));
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_3 + ((((unity_LightColor[0].xyz * tmpvar_27.x) + (unity_LightColor[1].xyz * tmpvar_27.y)) + (unity_LightColor[2].xyz * tmpvar_27.z)) + (unity_LightColor[3].xyz * tmpvar_27.w)));
  tmpvar_3 = tmpvar_28;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp vec4 c_3;
  c_3.xyz = ((tmpvar_2.xyz * _LightColor0.xyz) * (max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz)) * 2.0));
  c_3.w = tmpvar_2.w;
  c_1.w = c_3.w;
  c_1.xyz = (c_3.xyz + (tmpvar_2.xyz * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  highp vec3 tmpvar_22;
  tmpvar_22 = (_Object2World * _glesVertex).xyz;
  highp vec4 tmpvar_23;
  tmpvar_23 = (unity_4LightPosX0 - tmpvar_22.x);
  highp vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosY0 - tmpvar_22.y);
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosZ0 - tmpvar_22.z);
  highp vec4 tmpvar_26;
  tmpvar_26 = (((tmpvar_23 * tmpvar_23) + (tmpvar_24 * tmpvar_24)) + (tmpvar_25 * tmpvar_25));
  highp vec4 tmpvar_27;
  tmpvar_27 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_23 * tmpvar_5.x) + (tmpvar_24 * tmpvar_5.y)) + (tmpvar_25 * tmpvar_5.z)) * inversesqrt(tmpvar_26))) * (1.0/((1.0 + (tmpvar_26 * unity_4LightAtten0)))));
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_3 + ((((unity_LightColor[0].xyz * tmpvar_27.x) + (unity_LightColor[1].xyz * tmpvar_27.y)) + (unity_LightColor[2].xyz * tmpvar_27.z)) + (unity_LightColor[3].xyz * tmpvar_27.w)));
  tmpvar_3 = tmpvar_28;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp vec4 c_3;
  c_3.xyz = ((tmpvar_2.xyz * _LightColor0.xyz) * (max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz)) * 2.0));
  c_3.w = tmpvar_2.w;
  c_1.w = c_3.w;
  c_1.xyz = (c_3.xyz + (tmpvar_2.xyz * xlv_TEXCOORD2));
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  highp vec3 tmpvar_22;
  tmpvar_22 = (_Object2World * _glesVertex).xyz;
  highp vec4 tmpvar_23;
  tmpvar_23 = (unity_4LightPosX0 - tmpvar_22.x);
  highp vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosY0 - tmpvar_22.y);
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosZ0 - tmpvar_22.z);
  highp vec4 tmpvar_26;
  tmpvar_26 = (((tmpvar_23 * tmpvar_23) + (tmpvar_24 * tmpvar_24)) + (tmpvar_25 * tmpvar_25));
  highp vec4 tmpvar_27;
  tmpvar_27 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_23 * tmpvar_5.x) + (tmpvar_24 * tmpvar_5.y)) + (tmpvar_25 * tmpvar_5.z)) * inversesqrt(tmpvar_26))) * (1.0/((1.0 + (tmpvar_26 * unity_4LightAtten0)))));
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_3 + ((((unity_LightColor[0].xyz * tmpvar_27.x) + (unity_LightColor[1].xyz * tmpvar_27.y)) + (unity_LightColor[2].xyz * tmpvar_27.z)) + (unity_LightColor[3].xyz * tmpvar_27.w)));
  tmpvar_3 = tmpvar_28;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float tmpvar_3;
  mediump float lightShadowDataX_4;
  highp float dist_5;
  lowp float tmpvar_6;
  tmpvar_6 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_5 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = _LightShadowData.x;
  lightShadowDataX_4 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = max (float((dist_5 > (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))), lightShadowDataX_4);
  tmpvar_3 = tmpvar_8;
  lowp vec4 c_9;
  c_9.xyz = ((tmpvar_2.xyz * _LightColor0.xyz) * ((max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz)) * tmpvar_3) * 2.0));
  c_9.w = tmpvar_2.w;
  c_1.w = c_9.w;
  c_1.xyz = (c_9.xyz + (tmpvar_2.xyz * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  highp vec3 tmpvar_22;
  tmpvar_22 = (_Object2World * _glesVertex).xyz;
  highp vec4 tmpvar_23;
  tmpvar_23 = (unity_4LightPosX0 - tmpvar_22.x);
  highp vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosY0 - tmpvar_22.y);
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosZ0 - tmpvar_22.z);
  highp vec4 tmpvar_26;
  tmpvar_26 = (((tmpvar_23 * tmpvar_23) + (tmpvar_24 * tmpvar_24)) + (tmpvar_25 * tmpvar_25));
  highp vec4 tmpvar_27;
  tmpvar_27 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_23 * tmpvar_5.x) + (tmpvar_24 * tmpvar_5.y)) + (tmpvar_25 * tmpvar_5.z)) * inversesqrt(tmpvar_26))) * (1.0/((1.0 + (tmpvar_26 * unity_4LightAtten0)))));
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_3 + ((((unity_LightColor[0].xyz * tmpvar_27.x) + (unity_LightColor[1].xyz * tmpvar_27.y)) + (unity_LightColor[2].xyz * tmpvar_27.z)) + (unity_LightColor[3].xyz * tmpvar_27.w)));
  tmpvar_3 = tmpvar_28;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float tmpvar_3;
  mediump float lightShadowDataX_4;
  highp float dist_5;
  lowp float tmpvar_6;
  tmpvar_6 = textureProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_5 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = _LightShadowData.x;
  lightShadowDataX_4 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = max (float((dist_5 > (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))), lightShadowDataX_4);
  tmpvar_3 = tmpvar_8;
  lowp vec4 c_9;
  c_9.xyz = ((tmpvar_2.xyz * _LightColor0.xyz) * ((max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz)) * tmpvar_3) * 2.0));
  c_9.w = tmpvar_2.w;
  c_1.w = c_9.w;
  c_1.xyz = (c_9.xyz + (tmpvar_2.xyz * xlv_TEXCOORD2));
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float shadow_3;
  lowp float tmpvar_4;
  tmpvar_4 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD3.xyz);
  highp float tmpvar_5;
  tmpvar_5 = (_LightShadowData.x + (tmpvar_4 * (1.0 - _LightShadowData.x)));
  shadow_3 = tmpvar_5;
  lowp vec4 c_6;
  c_6.xyz = ((tmpvar_2.xyz * _LightColor0.xyz) * ((max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz)) * shadow_3) * 2.0));
  c_6.w = tmpvar_2.w;
  c_1.w = c_6.w;
  c_1.xyz = (c_6.xyz + (tmpvar_2.xyz * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float shadow_3;
  mediump float tmpvar_4;
  tmpvar_4 = texture (_ShadowMapTexture, xlv_TEXCOORD3.xyz);
  shadow_3 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (_LightShadowData.x + (shadow_3 * (1.0 - _LightShadowData.x)));
  shadow_3 = tmpvar_5;
  lowp vec4 c_6;
  c_6.xyz = ((tmpvar_2.xyz * _LightColor0.xyz) * ((max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz)) * shadow_3) * 2.0));
  c_6.w = tmpvar_2.w;
  c_1.w = c_6.w;
  c_1.xyz = (c_6.xyz + (tmpvar_2.xyz * xlv_TEXCOORD2));
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D unity_Lightmap;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float shadow_3;
  lowp float tmpvar_4;
  tmpvar_4 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD2.xyz);
  highp float tmpvar_5;
  tmpvar_5 = (_LightShadowData.x + (tmpvar_4 * (1.0 - _LightShadowData.x)));
  shadow_3 = tmpvar_5;
  c_1.xyz = (tmpvar_2.xyz * min ((2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz), vec3((shadow_3 * 2.0))));
  c_1.w = tmpvar_2.w;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec2 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D unity_Lightmap;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec2 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float shadow_3;
  mediump float tmpvar_4;
  tmpvar_4 = texture (_ShadowMapTexture, xlv_TEXCOORD2.xyz);
  shadow_3 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (_LightShadowData.x + (shadow_3 * (1.0 - _LightShadowData.x)));
  shadow_3 = tmpvar_5;
  c_1.xyz = (tmpvar_2.xyz * min ((2.0 * texture (unity_Lightmap, xlv_TEXCOORD1).xyz), vec3((shadow_3 * 2.0))));
  c_1.w = tmpvar_2.w;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D unity_Lightmap;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float shadow_3;
  lowp float tmpvar_4;
  tmpvar_4 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD2.xyz);
  highp float tmpvar_5;
  tmpvar_5 = (_LightShadowData.x + (tmpvar_4 * (1.0 - _LightShadowData.x)));
  shadow_3 = tmpvar_5;
  mediump vec3 lm_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_6 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = vec3((shadow_3 * 2.0));
  mediump vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_2.xyz * min (lm_6, tmpvar_8));
  c_1.xyz = tmpvar_9;
  c_1.w = tmpvar_2.w;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec2 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D unity_Lightmap;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec2 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float shadow_3;
  mediump float tmpvar_4;
  tmpvar_4 = texture (_ShadowMapTexture, xlv_TEXCOORD2.xyz);
  shadow_3 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (_LightShadowData.x + (shadow_3 * (1.0 - _LightShadowData.x)));
  shadow_3 = tmpvar_5;
  mediump vec3 lm_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_6 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = vec3((shadow_3 * 2.0));
  mediump vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_2.xyz * min (lm_6, tmpvar_8));
  c_1.xyz = tmpvar_9;
  c_1.w = tmpvar_2.w;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  highp vec3 tmpvar_22;
  tmpvar_22 = (_Object2World * _glesVertex).xyz;
  highp vec4 tmpvar_23;
  tmpvar_23 = (unity_4LightPosX0 - tmpvar_22.x);
  highp vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosY0 - tmpvar_22.y);
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosZ0 - tmpvar_22.z);
  highp vec4 tmpvar_26;
  tmpvar_26 = (((tmpvar_23 * tmpvar_23) + (tmpvar_24 * tmpvar_24)) + (tmpvar_25 * tmpvar_25));
  highp vec4 tmpvar_27;
  tmpvar_27 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_23 * tmpvar_5.x) + (tmpvar_24 * tmpvar_5.y)) + (tmpvar_25 * tmpvar_5.z)) * inversesqrt(tmpvar_26))) * (1.0/((1.0 + (tmpvar_26 * unity_4LightAtten0)))));
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_3 + ((((unity_LightColor[0].xyz * tmpvar_27.x) + (unity_LightColor[1].xyz * tmpvar_27.y)) + (unity_LightColor[2].xyz * tmpvar_27.z)) + (unity_LightColor[3].xyz * tmpvar_27.w)));
  tmpvar_3 = tmpvar_28;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float shadow_3;
  lowp float tmpvar_4;
  tmpvar_4 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD3.xyz);
  highp float tmpvar_5;
  tmpvar_5 = (_LightShadowData.x + (tmpvar_4 * (1.0 - _LightShadowData.x)));
  shadow_3 = tmpvar_5;
  lowp vec4 c_6;
  c_6.xyz = ((tmpvar_2.xyz * _LightColor0.xyz) * ((max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz)) * shadow_3) * 2.0));
  c_6.w = tmpvar_2.w;
  c_1.w = c_6.w;
  c_1.xyz = (c_6.xyz + (tmpvar_2.xyz * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  highp vec3 tmpvar_22;
  tmpvar_22 = (_Object2World * _glesVertex).xyz;
  highp vec4 tmpvar_23;
  tmpvar_23 = (unity_4LightPosX0 - tmpvar_22.x);
  highp vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosY0 - tmpvar_22.y);
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosZ0 - tmpvar_22.z);
  highp vec4 tmpvar_26;
  tmpvar_26 = (((tmpvar_23 * tmpvar_23) + (tmpvar_24 * tmpvar_24)) + (tmpvar_25 * tmpvar_25));
  highp vec4 tmpvar_27;
  tmpvar_27 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_23 * tmpvar_5.x) + (tmpvar_24 * tmpvar_5.y)) + (tmpvar_25 * tmpvar_5.z)) * inversesqrt(tmpvar_26))) * (1.0/((1.0 + (tmpvar_26 * unity_4LightAtten0)))));
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_3 + ((((unity_LightColor[0].xyz * tmpvar_27.x) + (unity_LightColor[1].xyz * tmpvar_27.y)) + (unity_LightColor[2].xyz * tmpvar_27.z)) + (unity_LightColor[3].xyz * tmpvar_27.w)));
  tmpvar_3 = tmpvar_28;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float shadow_3;
  mediump float tmpvar_4;
  tmpvar_4 = texture (_ShadowMapTexture, xlv_TEXCOORD3.xyz);
  shadow_3 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (_LightShadowData.x + (shadow_3 * (1.0 - _LightShadowData.x)));
  shadow_3 = tmpvar_5;
  lowp vec4 c_6;
  c_6.xyz = ((tmpvar_2.xyz * _LightColor0.xyz) * ((max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz)) * shadow_3) * 2.0));
  c_6.w = tmpvar_2.w;
  c_1.w = c_6.w;
  c_1.xyz = (c_6.xyz + (tmpvar_2.xyz * xlv_TEXCOORD2));
  _glesFragData[0] = c_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES3"
}
}
 }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardAdd" "RenderType"="Opaque" }
  ZWrite Off
  Fog {
   Color (0,0,0,0)
  }
  Blend One One
Program "vp" {
SubProgram "gles " {
Keywords { "POINT" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_WorldSpaceLightPos0.xyz - (_Object2World * _glesVertex).xyz);
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _MainTex;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  mediump vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 c_6;
  c_6.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * ((max (0.0, dot (xlv_TEXCOORD1, lightDir_2)) * texture2D (_LightTexture0, vec2(tmpvar_5)).w) * 2.0));
  c_6.w = tmpvar_3.w;
  c_1.xyz = c_6.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_WorldSpaceLightPos0.xyz - (_Object2World * _glesVertex).xyz);
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _MainTex;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  mediump vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 c_6;
  c_6.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * ((max (0.0, dot (xlv_TEXCOORD1, lightDir_2)) * texture (_LightTexture0, vec2(tmpvar_5)).w) * 2.0));
  c_6.w = tmpvar_3.w;
  c_1.xyz = c_6.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = _WorldSpaceLightPos0.xyz;
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lightDir_2 = xlv_TEXCOORD2;
  lowp vec4 c_4;
  c_4.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * (max (0.0, dot (xlv_TEXCOORD1, lightDir_2)) * 2.0));
  c_4.w = tmpvar_3.w;
  c_1.xyz = c_4.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = _WorldSpaceLightPos0.xyz;
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lightDir_2 = xlv_TEXCOORD2;
  lowp vec4 c_4;
  c_4.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * (max (0.0, dot (xlv_TEXCOORD1, lightDir_2)) * 2.0));
  c_4.w = tmpvar_3.w;
  c_1.xyz = c_4.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_WorldSpaceLightPos0.xyz - (_Object2World * _glesVertex).xyz);
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  mediump vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_4;
  highp vec2 P_5;
  P_5 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  highp float tmpvar_6;
  tmpvar_6 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp float atten_7;
  atten_7 = ((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, P_5).w) * texture2D (_LightTextureB0, vec2(tmpvar_6)).w);
  lowp vec4 c_8;
  c_8.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * ((max (0.0, dot (xlv_TEXCOORD1, lightDir_2)) * atten_7) * 2.0));
  c_8.w = tmpvar_3.w;
  c_1.xyz = c_8.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_WorldSpaceLightPos0.xyz - (_Object2World * _glesVertex).xyz);
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  mediump vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_4;
  highp vec2 P_5;
  P_5 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  highp float tmpvar_6;
  tmpvar_6 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp float atten_7;
  atten_7 = ((float((xlv_TEXCOORD3.z > 0.0)) * texture (_LightTexture0, P_5).w) * texture (_LightTextureB0, vec2(tmpvar_6)).w);
  lowp vec4 c_8;
  c_8.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * ((max (0.0, dot (xlv_TEXCOORD1, lightDir_2)) * atten_7) * 2.0));
  c_8.w = tmpvar_3.w;
  c_1.xyz = c_8.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_WorldSpaceLightPos0.xyz - (_Object2World * _glesVertex).xyz);
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  mediump vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 c_6;
  c_6.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * ((max (0.0, dot (xlv_TEXCOORD1, lightDir_2)) * (texture2D (_LightTextureB0, vec2(tmpvar_5)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w)) * 2.0));
  c_6.w = tmpvar_3.w;
  c_1.xyz = c_6.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_WorldSpaceLightPos0.xyz - (_Object2World * _glesVertex).xyz);
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  mediump vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 c_6;
  c_6.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * ((max (0.0, dot (xlv_TEXCOORD1, lightDir_2)) * (texture (_LightTextureB0, vec2(tmpvar_5)).w * texture (_LightTexture0, xlv_TEXCOORD3).w)) * 2.0));
  c_6.w = tmpvar_3.w;
  c_1.xyz = c_6.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = _WorldSpaceLightPos0.xyz;
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _MainTex;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lightDir_2 = xlv_TEXCOORD2;
  lowp vec4 c_4;
  c_4.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * ((max (0.0, dot (xlv_TEXCOORD1, lightDir_2)) * texture2D (_LightTexture0, xlv_TEXCOORD3).w) * 2.0));
  c_4.w = tmpvar_3.w;
  c_1.xyz = c_4.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = _WorldSpaceLightPos0.xyz;
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _MainTex;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lightDir_2 = xlv_TEXCOORD2;
  lowp vec4 c_4;
  c_4.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * ((max (0.0, dot (xlv_TEXCOORD1, lightDir_2)) * texture (_LightTexture0, xlv_TEXCOORD3).w) * 2.0));
  c_4.w = tmpvar_3.w;
  c_1.xyz = c_4.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "POINT" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3"
}
}
 }
 Pass {
  Name "PREPASS"
  Tags { "LIGHTMODE"="PrePassBase" "RenderType"="Opaque" }
  Fog { Mode Off }
Program "vp" {
SubProgram "gles " {
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
varying lowp vec3 xlv_TEXCOORD0;
void main ()
{
  lowp vec3 tmpvar_1;
  mat3 tmpvar_2;
  tmpvar_2[0] = _Object2World[0].xyz;
  tmpvar_2[1] = _Object2World[1].xyz;
  tmpvar_2[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_3;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

varying lowp vec3 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 res_1;
  res_1.xyz = ((xlv_TEXCOORD0 * 0.5) + 0.5);
  res_1.w = 0.0;
  gl_FragData[0] = res_1;
}



#endif"
}
SubProgram "gles3 " {
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec3 _glesNormal;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
out lowp vec3 xlv_TEXCOORD0;
void main ()
{
  lowp vec3 tmpvar_1;
  mat3 tmpvar_2;
  tmpvar_2[0] = _Object2World[0].xyz;
  tmpvar_2[1] = _Object2World[1].xyz;
  tmpvar_2[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_3;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
in lowp vec3 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 res_1;
  res_1.xyz = ((xlv_TEXCOORD0 * 0.5) + 0.5);
  res_1.w = 0.0;
  _glesFragData[0] = res_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
"!!GLES"
}
SubProgram "gles3 " {
"!!GLES3"
}
}
 }
 Pass {
  Name "PREPASS"
  Tags { "LIGHTMODE"="PrePassFinal" "RenderType"="Opaque" }
  ZWrite Off
Program "vp" {
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  mat3 tmpvar_6;
  tmpvar_6[0] = _Object2World[0].xyz;
  tmpvar_6[1] = _Object2World[1].xyz;
  tmpvar_6[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = (tmpvar_6 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_8;
  mediump vec4 normal_9;
  normal_9 = tmpvar_7;
  highp float vC_10;
  mediump vec3 x3_11;
  mediump vec3 x2_12;
  mediump vec3 x1_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAr, normal_9);
  x1_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAg, normal_9);
  x1_13.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAb, normal_9);
  x1_13.z = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_9.xyzz * normal_9.yzzx);
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBr, tmpvar_17);
  x2_12.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBg, tmpvar_17);
  x2_12.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBb, tmpvar_17);
  x2_12.z = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = ((normal_9.x * normal_9.x) - (normal_9.y * normal_9.y));
  vC_10 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (unity_SHC.xyz * vC_10);
  x3_11 = tmpvar_22;
  tmpvar_8 = ((x1_13 + x2_12) + x3_11);
  tmpvar_1 = tmpvar_8;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  tmpvar_6 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_6.w;
  highp vec3 tmpvar_7;
  tmpvar_7 = (tmpvar_6.xyz + xlv_TEXCOORD2);
  light_3.xyz = tmpvar_7;
  lowp vec4 c_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_4.xyz * light_3.xyz);
  c_8.xyz = tmpvar_9;
  c_8.w = tmpvar_4.w;
  c_2 = c_8;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  mat3 tmpvar_6;
  tmpvar_6[0] = _Object2World[0].xyz;
  tmpvar_6[1] = _Object2World[1].xyz;
  tmpvar_6[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = (tmpvar_6 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_8;
  mediump vec4 normal_9;
  normal_9 = tmpvar_7;
  highp float vC_10;
  mediump vec3 x3_11;
  mediump vec3 x2_12;
  mediump vec3 x1_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAr, normal_9);
  x1_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAg, normal_9);
  x1_13.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAb, normal_9);
  x1_13.z = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_9.xyzz * normal_9.yzzx);
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBr, tmpvar_17);
  x2_12.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBg, tmpvar_17);
  x2_12.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBb, tmpvar_17);
  x2_12.z = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = ((normal_9.x * normal_9.x) - (normal_9.y * normal_9.y));
  vC_10 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (unity_SHC.xyz * vC_10);
  x3_11 = tmpvar_22;
  tmpvar_8 = ((x1_13 + x2_12) + x3_11);
  tmpvar_1 = tmpvar_8;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = (texture (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  tmpvar_6 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_6.w;
  highp vec3 tmpvar_7;
  tmpvar_7 = (tmpvar_6.xyz + xlv_TEXCOORD2);
  light_3.xyz = tmpvar_7;
  lowp vec4 c_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_4.xyz * light_3.xyz);
  c_8.xyz = tmpvar_9;
  c_8.w = tmpvar_4.w;
  c_2 = c_8;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  tmpvar_1.xyz = (((_Object2World * _glesVertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_1.w = (-((glstate_matrix_modelview0 * _glesVertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec3 lmIndirect_3;
  mediump vec3 lmFull_4;
  mediump float lmFade_5;
  mediump vec4 light_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_6 = tmpvar_8;
  mediump vec4 tmpvar_9;
  tmpvar_9 = -(log2(max (light_6, vec4(0.001, 0.001, 0.001, 0.001))));
  light_6.w = tmpvar_9.w;
  highp float tmpvar_10;
  tmpvar_10 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * unity_LightmapFade.z) + unity_LightmapFade.w);
  lmFade_5 = tmpvar_10;
  lowp vec3 tmpvar_11;
  tmpvar_11 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lmFull_4 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = (2.0 * texture2D (unity_LightmapInd, xlv_TEXCOORD2).xyz);
  lmIndirect_3 = tmpvar_12;
  light_6.xyz = (tmpvar_9.xyz + mix (lmIndirect_3, lmFull_4, vec3(clamp (lmFade_5, 0.0, 1.0))));
  lowp vec4 c_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_7.xyz * light_6.xyz);
  c_13.xyz = tmpvar_14;
  c_13.w = tmpvar_7.w;
  c_2 = c_13;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  tmpvar_1.xyz = (((_Object2World * _glesVertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_1.w = (-((glstate_matrix_modelview0 * _glesVertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec3 lmIndirect_3;
  mediump vec3 lmFull_4;
  mediump float lmFade_5;
  mediump vec4 light_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = (texture (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp vec4 tmpvar_8;
  tmpvar_8 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_6 = tmpvar_8;
  mediump vec4 tmpvar_9;
  tmpvar_9 = -(log2(max (light_6, vec4(0.001, 0.001, 0.001, 0.001))));
  light_6.w = tmpvar_9.w;
  highp float tmpvar_10;
  tmpvar_10 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * unity_LightmapFade.z) + unity_LightmapFade.w);
  lmFade_5 = tmpvar_10;
  lowp vec3 tmpvar_11;
  tmpvar_11 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lmFull_4 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = (2.0 * texture (unity_LightmapInd, xlv_TEXCOORD2).xyz);
  lmIndirect_3 = tmpvar_12;
  light_6.xyz = (tmpvar_9.xyz + mix (lmIndirect_3, lmFull_4, vec3(clamp (lmFade_5, 0.0, 1.0))));
  lowp vec4 c_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_7.xyz * light_6.xyz);
  c_13.xyz = tmpvar_14;
  c_13.w = tmpvar_7.w;
  c_2 = c_13;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_4;
  tmpvar_4.x = tmpvar_3.x;
  tmpvar_4.y = (tmpvar_3.y * _ProjectionParams.x);
  o_2.xy = (tmpvar_4 + tmpvar_3.w);
  o_2.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_5;
  mediump vec3 lm_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lm_6 = tmpvar_7;
  mediump vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = lm_6;
  mediump vec4 tmpvar_9;
  tmpvar_9 = (-(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001)))) + tmpvar_8);
  light_3 = tmpvar_9;
  lowp vec4 c_10;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_4.xyz * tmpvar_9.xyz);
  c_10.xyz = tmpvar_11;
  c_10.w = tmpvar_4.w;
  c_2 = c_10;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_4;
  tmpvar_4.x = tmpvar_3.x;
  tmpvar_4.y = (tmpvar_3.y * _ProjectionParams.x);
  o_2.xy = (tmpvar_4 + tmpvar_3.w);
  o_2.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = (texture (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_5;
  mediump vec3 lm_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lm_6 = tmpvar_7;
  mediump vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = lm_6;
  mediump vec4 tmpvar_9;
  tmpvar_9 = (-(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001)))) + tmpvar_8);
  light_3 = tmpvar_9;
  lowp vec4 c_10;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_4.xyz * tmpvar_9.xyz);
  c_10.xyz = tmpvar_11;
  c_10.w = tmpvar_4.w;
  c_2 = c_10;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  mat3 tmpvar_6;
  tmpvar_6[0] = _Object2World[0].xyz;
  tmpvar_6[1] = _Object2World[1].xyz;
  tmpvar_6[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = (tmpvar_6 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_8;
  mediump vec4 normal_9;
  normal_9 = tmpvar_7;
  highp float vC_10;
  mediump vec3 x3_11;
  mediump vec3 x2_12;
  mediump vec3 x1_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAr, normal_9);
  x1_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAg, normal_9);
  x1_13.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAb, normal_9);
  x1_13.z = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_9.xyzz * normal_9.yzzx);
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBr, tmpvar_17);
  x2_12.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBg, tmpvar_17);
  x2_12.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBb, tmpvar_17);
  x2_12.z = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = ((normal_9.x * normal_9.x) - (normal_9.y * normal_9.y));
  vC_10 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (unity_SHC.xyz * vC_10);
  x3_11 = tmpvar_22;
  tmpvar_8 = ((x1_13 + x2_12) + x3_11);
  tmpvar_1 = tmpvar_8;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  tmpvar_6 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_6.w;
  highp vec3 tmpvar_7;
  tmpvar_7 = (tmpvar_6.xyz + xlv_TEXCOORD2);
  light_3.xyz = tmpvar_7;
  lowp vec4 c_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_4.xyz * light_3.xyz);
  c_8.xyz = tmpvar_9;
  c_8.w = tmpvar_4.w;
  c_2 = c_8;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  mat3 tmpvar_6;
  tmpvar_6[0] = _Object2World[0].xyz;
  tmpvar_6[1] = _Object2World[1].xyz;
  tmpvar_6[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = (tmpvar_6 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_8;
  mediump vec4 normal_9;
  normal_9 = tmpvar_7;
  highp float vC_10;
  mediump vec3 x3_11;
  mediump vec3 x2_12;
  mediump vec3 x1_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAr, normal_9);
  x1_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAg, normal_9);
  x1_13.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAb, normal_9);
  x1_13.z = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_9.xyzz * normal_9.yzzx);
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBr, tmpvar_17);
  x2_12.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBg, tmpvar_17);
  x2_12.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBb, tmpvar_17);
  x2_12.z = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = ((normal_9.x * normal_9.x) - (normal_9.y * normal_9.y));
  vC_10 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (unity_SHC.xyz * vC_10);
  x3_11 = tmpvar_22;
  tmpvar_8 = ((x1_13 + x2_12) + x3_11);
  tmpvar_1 = tmpvar_8;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = (texture (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  tmpvar_6 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_6.w;
  highp vec3 tmpvar_7;
  tmpvar_7 = (tmpvar_6.xyz + xlv_TEXCOORD2);
  light_3.xyz = tmpvar_7;
  lowp vec4 c_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_4.xyz * light_3.xyz);
  c_8.xyz = tmpvar_9;
  c_8.w = tmpvar_4.w;
  c_2 = c_8;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  tmpvar_1.xyz = (((_Object2World * _glesVertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_1.w = (-((glstate_matrix_modelview0 * _glesVertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec3 lmIndirect_3;
  mediump vec3 lmFull_4;
  mediump float lmFade_5;
  mediump vec4 light_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_6 = tmpvar_8;
  mediump vec4 tmpvar_9;
  tmpvar_9 = max (light_6, vec4(0.001, 0.001, 0.001, 0.001));
  light_6.w = tmpvar_9.w;
  highp float tmpvar_10;
  tmpvar_10 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * unity_LightmapFade.z) + unity_LightmapFade.w);
  lmFade_5 = tmpvar_10;
  lowp vec3 tmpvar_11;
  tmpvar_11 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lmFull_4 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = (2.0 * texture2D (unity_LightmapInd, xlv_TEXCOORD2).xyz);
  lmIndirect_3 = tmpvar_12;
  light_6.xyz = (tmpvar_9.xyz + mix (lmIndirect_3, lmFull_4, vec3(clamp (lmFade_5, 0.0, 1.0))));
  lowp vec4 c_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_7.xyz * light_6.xyz);
  c_13.xyz = tmpvar_14;
  c_13.w = tmpvar_7.w;
  c_2 = c_13;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  tmpvar_1.xyz = (((_Object2World * _glesVertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_1.w = (-((glstate_matrix_modelview0 * _glesVertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec3 lmIndirect_3;
  mediump vec3 lmFull_4;
  mediump float lmFade_5;
  mediump vec4 light_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = (texture (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp vec4 tmpvar_8;
  tmpvar_8 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_6 = tmpvar_8;
  mediump vec4 tmpvar_9;
  tmpvar_9 = max (light_6, vec4(0.001, 0.001, 0.001, 0.001));
  light_6.w = tmpvar_9.w;
  highp float tmpvar_10;
  tmpvar_10 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * unity_LightmapFade.z) + unity_LightmapFade.w);
  lmFade_5 = tmpvar_10;
  lowp vec3 tmpvar_11;
  tmpvar_11 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lmFull_4 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = (2.0 * texture (unity_LightmapInd, xlv_TEXCOORD2).xyz);
  lmIndirect_3 = tmpvar_12;
  light_6.xyz = (tmpvar_9.xyz + mix (lmIndirect_3, lmFull_4, vec3(clamp (lmFade_5, 0.0, 1.0))));
  lowp vec4 c_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_7.xyz * light_6.xyz);
  c_13.xyz = tmpvar_14;
  c_13.w = tmpvar_7.w;
  c_2 = c_13;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_4;
  tmpvar_4.x = tmpvar_3.x;
  tmpvar_4.y = (tmpvar_3.y * _ProjectionParams.x);
  o_2.xy = (tmpvar_4 + tmpvar_3.w);
  o_2.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_5;
  mediump vec3 lm_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lm_6 = tmpvar_7;
  mediump vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = lm_6;
  mediump vec4 tmpvar_9;
  tmpvar_9 = (max (light_3, vec4(0.001, 0.001, 0.001, 0.001)) + tmpvar_8);
  light_3 = tmpvar_9;
  lowp vec4 c_10;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_4.xyz * tmpvar_9.xyz);
  c_10.xyz = tmpvar_11;
  c_10.w = tmpvar_4.w;
  c_2 = c_10;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_4;
  tmpvar_4.x = tmpvar_3.x;
  tmpvar_4.y = (tmpvar_3.y * _ProjectionParams.x);
  o_2.xy = (tmpvar_4 + tmpvar_3.w);
  o_2.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = (texture (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_5;
  mediump vec3 lm_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lm_6 = tmpvar_7;
  mediump vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = lm_6;
  mediump vec4 tmpvar_9;
  tmpvar_9 = (max (light_3, vec4(0.001, 0.001, 0.001, 0.001)) + tmpvar_8);
  light_3 = tmpvar_9;
  lowp vec4 c_10;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_4.xyz * tmpvar_9.xyz);
  c_10.xyz = tmpvar_11;
  c_10.w = tmpvar_4.w;
  c_2 = c_10;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3"
}
}
 }
}
SubShader { 
 Tags { "RenderType"="Opaque" }
 Pass {
  Tags { "LIGHTMODE"="Vertex" "RenderType"="Opaque" }
  Lighting On
  ColorMaterial AmbientAndDiffuse
  SetTexture [_MainTex] { combine texture * primary double, texture alpha * primary alpha }
 }
 Pass {
  Tags { "LIGHTMODE"="VertexLMRGBM" "RenderType"="Opaque" }
  BindChannels {
   Bind "vertex", Vertex
   Bind "texcoord1", TexCoord0
   Bind "texcoord", TexCoord1
  }
  ColorMaterial AmbientAndDiffuse
  SetTexture [unity_Lightmap] { Matrix [unity_LightmapMatrix] combine texture * texture alpha double }
  SetTexture [_MainTex] { combine texture * previous quad, texture alpha }
 }
}
Fallback "VertexLit"
}                          WavingGrass D& Shader "Hidden/TerrainEngine/Details/WavingDoublePass" {
Properties {
 _WavingTint ("Fade Color", Color) = (0.7,0.6,0.5,0)
 _MainTex ("Base (RGB) Alpha (A)", 2D) = "white" {}
 _WaveAndDistance ("Wave and distance", Vector) = (12,3.6,1,1)
 _Cutoff ("Cutoff", Float) = 0.5
}
SubShader { 
 LOD 200
 Tags { "QUEUE"="Geometry+200" "IGNOREPROJECTOR"="true" "RenderType"="Grass" }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardBase" "SHADOWSUPPORT"="true" "QUEUE"="Geometry+200" "IGNOREPROJECTOR"="true" "RenderType"="Grass" }
  Cull Off
  ColorMask RGB
Program "vp" {
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp vec4 vertex_4;
  vertex_4.yw = _glesVertex.yw;
  lowp vec4 color_5;
  color_5.xyz = _glesColor.xyz;
  lowp vec3 waveColor_6;
  highp vec3 waveMove_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_8);
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_9);
  highp vec4 tmpvar_12;
  tmpvar_12 = (((tmpvar_8 + (tmpvar_10 * -0.161616)) + (tmpvar_11 * 0.0083333)) + ((tmpvar_11 * tmpvar_9) * -0.00019841));
  highp vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * tmpvar_12);
  highp vec4 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * tmpvar_13);
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_7.y = 0.0;
  waveMove_7.x = dot (tmpvar_15, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_7.z = dot (tmpvar_15, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_4.xz = (_glesVertex.xz - (waveMove_7.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_14, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_6 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = (vertex_4.xyz - _CameraPosition.xyz);
  highp float tmpvar_18;
  tmpvar_18 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_17, tmpvar_17))) * _CameraPosition.w), 0.0, 1.0);
  color_5.w = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.xyz = ((2.0 * waveColor_6) * _glesColor.xyz);
  tmpvar_19.w = color_5.w;
  mat3 tmpvar_20;
  tmpvar_20[0] = _Object2World[0].xyz;
  tmpvar_20[1] = _Object2World[1].xyz;
  tmpvar_20[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  mediump vec3 tmpvar_23;
  mediump vec4 normal_24;
  normal_24 = tmpvar_22;
  highp float vC_25;
  mediump vec3 x3_26;
  mediump vec3 x2_27;
  mediump vec3 x1_28;
  highp float tmpvar_29;
  tmpvar_29 = dot (unity_SHAr, normal_24);
  x1_28.x = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = dot (unity_SHAg, normal_24);
  x1_28.y = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = dot (unity_SHAb, normal_24);
  x1_28.z = tmpvar_31;
  mediump vec4 tmpvar_32;
  tmpvar_32 = (normal_24.xyzz * normal_24.yzzx);
  highp float tmpvar_33;
  tmpvar_33 = dot (unity_SHBr, tmpvar_32);
  x2_27.x = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = dot (unity_SHBg, tmpvar_32);
  x2_27.y = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = dot (unity_SHBb, tmpvar_32);
  x2_27.z = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = ((normal_24.x * normal_24.x) - (normal_24.y * normal_24.y));
  vC_25 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = (unity_SHC.xyz * vC_25);
  x3_26 = tmpvar_37;
  tmpvar_23 = ((x1_28 + x2_27) + x3_26);
  shlight_1 = tmpvar_23;
  tmpvar_3 = shlight_1;
  gl_Position = (glstate_matrix_mvp * vertex_4);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_3;
  x_3 = (tmpvar_2.w - _Cutoff);
  if ((x_3 < 0.0)) {
    discard;
  };
  lowp vec4 c_4;
  c_4.xyz = ((tmpvar_2.xyz * _LightColor0.xyz) * (max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz)) * 2.0));
  c_4.w = (tmpvar_2.w * xlv_COLOR0.w);
  c_1.w = c_4.w;
  c_1.xyz = (c_4.xyz + (tmpvar_2.xyz * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp vec4 vertex_4;
  vertex_4.yw = _glesVertex.yw;
  lowp vec4 color_5;
  color_5.xyz = _glesColor.xyz;
  lowp vec3 waveColor_6;
  highp vec3 waveMove_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_8);
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_9);
  highp vec4 tmpvar_12;
  tmpvar_12 = (((tmpvar_8 + (tmpvar_10 * -0.161616)) + (tmpvar_11 * 0.0083333)) + ((tmpvar_11 * tmpvar_9) * -0.00019841));
  highp vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * tmpvar_12);
  highp vec4 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * tmpvar_13);
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_7.y = 0.0;
  waveMove_7.x = dot (tmpvar_15, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_7.z = dot (tmpvar_15, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_4.xz = (_glesVertex.xz - (waveMove_7.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_14, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_6 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = (vertex_4.xyz - _CameraPosition.xyz);
  highp float tmpvar_18;
  tmpvar_18 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_17, tmpvar_17))) * _CameraPosition.w), 0.0, 1.0);
  color_5.w = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.xyz = ((2.0 * waveColor_6) * _glesColor.xyz);
  tmpvar_19.w = color_5.w;
  mat3 tmpvar_20;
  tmpvar_20[0] = _Object2World[0].xyz;
  tmpvar_20[1] = _Object2World[1].xyz;
  tmpvar_20[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  mediump vec3 tmpvar_23;
  mediump vec4 normal_24;
  normal_24 = tmpvar_22;
  highp float vC_25;
  mediump vec3 x3_26;
  mediump vec3 x2_27;
  mediump vec3 x1_28;
  highp float tmpvar_29;
  tmpvar_29 = dot (unity_SHAr, normal_24);
  x1_28.x = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = dot (unity_SHAg, normal_24);
  x1_28.y = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = dot (unity_SHAb, normal_24);
  x1_28.z = tmpvar_31;
  mediump vec4 tmpvar_32;
  tmpvar_32 = (normal_24.xyzz * normal_24.yzzx);
  highp float tmpvar_33;
  tmpvar_33 = dot (unity_SHBr, tmpvar_32);
  x2_27.x = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = dot (unity_SHBg, tmpvar_32);
  x2_27.y = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = dot (unity_SHBb, tmpvar_32);
  x2_27.z = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = ((normal_24.x * normal_24.x) - (normal_24.y * normal_24.y));
  vC_25 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = (unity_SHC.xyz * vC_25);
  x3_26 = tmpvar_37;
  tmpvar_23 = ((x1_28 + x2_27) + x3_26);
  shlight_1 = tmpvar_23;
  tmpvar_3 = shlight_1;
  gl_Position = (glstate_matrix_mvp * vertex_4);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_3;
  x_3 = (tmpvar_2.w - _Cutoff);
  if ((x_3 < 0.0)) {
    discard;
  };
  lowp vec4 c_4;
  c_4.xyz = ((tmpvar_2.xyz * _LightColor0.xyz) * (max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz)) * 2.0));
  c_4.w = (tmpvar_2.w * xlv_COLOR0.w);
  c_1.w = c_4.w;
  c_1.xyz = (c_4.xyz + (tmpvar_2.xyz * xlv_TEXCOORD2));
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 vertex_1;
  vertex_1.yw = _glesVertex.yw;
  lowp vec4 color_2;
  color_2.xyz = _glesColor.xyz;
  lowp vec3 waveColor_3;
  highp vec3 waveMove_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * tmpvar_5);
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_5);
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_6);
  highp vec4 tmpvar_9;
  tmpvar_9 = (((tmpvar_5 + (tmpvar_7 * -0.161616)) + (tmpvar_8 * 0.0083333)) + ((tmpvar_8 * tmpvar_6) * -0.00019841));
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_4.y = 0.0;
  waveMove_4.x = dot (tmpvar_12, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_4.z = dot (tmpvar_12, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_1.xz = (_glesVertex.xz - (waveMove_4.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_13;
  tmpvar_13 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_11, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (vertex_1.xyz - _CameraPosition.xyz);
  highp float tmpvar_15;
  tmpvar_15 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_14, tmpvar_14))) * _CameraPosition.w), 0.0, 1.0);
  color_2.w = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16.xyz = ((2.0 * waveColor_3) * _glesColor.xyz);
  tmpvar_16.w = color_2.w;
  gl_Position = (glstate_matrix_mvp * vertex_1);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_16;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D unity_Lightmap;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_3;
  x_3 = (tmpvar_2.w - _Cutoff);
  if ((x_3 < 0.0)) {
    discard;
  };
  c_1.xyz = (tmpvar_2.xyz * (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz));
  c_1.w = (tmpvar_2.w * xlv_COLOR0.w);
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 vertex_1;
  vertex_1.yw = _glesVertex.yw;
  lowp vec4 color_2;
  color_2.xyz = _glesColor.xyz;
  lowp vec3 waveColor_3;
  highp vec3 waveMove_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * tmpvar_5);
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_5);
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_6);
  highp vec4 tmpvar_9;
  tmpvar_9 = (((tmpvar_5 + (tmpvar_7 * -0.161616)) + (tmpvar_8 * 0.0083333)) + ((tmpvar_8 * tmpvar_6) * -0.00019841));
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_4.y = 0.0;
  waveMove_4.x = dot (tmpvar_12, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_4.z = dot (tmpvar_12, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_1.xz = (_glesVertex.xz - (waveMove_4.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_13;
  tmpvar_13 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_11, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (vertex_1.xyz - _CameraPosition.xyz);
  highp float tmpvar_15;
  tmpvar_15 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_14, tmpvar_14))) * _CameraPosition.w), 0.0, 1.0);
  color_2.w = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16.xyz = ((2.0 * waveColor_3) * _glesColor.xyz);
  tmpvar_16.w = color_2.w;
  gl_Position = (glstate_matrix_mvp * vertex_1);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_16;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D unity_Lightmap;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec2 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_3;
  x_3 = (tmpvar_2.w - _Cutoff);
  if ((x_3 < 0.0)) {
    discard;
  };
  c_1.xyz = (tmpvar_2.xyz * (2.0 * texture (unity_Lightmap, xlv_TEXCOORD1).xyz));
  c_1.w = (tmpvar_2.w * xlv_COLOR0.w);
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 vertex_1;
  vertex_1.yw = _glesVertex.yw;
  lowp vec4 color_2;
  color_2.xyz = _glesColor.xyz;
  lowp vec3 waveColor_3;
  highp vec3 waveMove_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * tmpvar_5);
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_5);
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_6);
  highp vec4 tmpvar_9;
  tmpvar_9 = (((tmpvar_5 + (tmpvar_7 * -0.161616)) + (tmpvar_8 * 0.0083333)) + ((tmpvar_8 * tmpvar_6) * -0.00019841));
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_4.y = 0.0;
  waveMove_4.x = dot (tmpvar_12, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_4.z = dot (tmpvar_12, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_1.xz = (_glesVertex.xz - (waveMove_4.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_13;
  tmpvar_13 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_11, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (vertex_1.xyz - _CameraPosition.xyz);
  highp float tmpvar_15;
  tmpvar_15 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_14, tmpvar_14))) * _CameraPosition.w), 0.0, 1.0);
  color_2.w = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16.xyz = ((2.0 * waveColor_3) * _glesColor.xyz);
  tmpvar_16.w = color_2.w;
  gl_Position = (glstate_matrix_mvp * vertex_1);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_16;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D unity_Lightmap;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_3;
  x_3 = (tmpvar_2.w - _Cutoff);
  if ((x_3 < 0.0)) {
    discard;
  };
  mediump vec3 lm_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_4 = tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_2.xyz * lm_4);
  c_1.xyz = tmpvar_6;
  c_1.w = (tmpvar_2.w * xlv_COLOR0.w);
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 vertex_1;
  vertex_1.yw = _glesVertex.yw;
  lowp vec4 color_2;
  color_2.xyz = _glesColor.xyz;
  lowp vec3 waveColor_3;
  highp vec3 waveMove_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * tmpvar_5);
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_5);
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_6);
  highp vec4 tmpvar_9;
  tmpvar_9 = (((tmpvar_5 + (tmpvar_7 * -0.161616)) + (tmpvar_8 * 0.0083333)) + ((tmpvar_8 * tmpvar_6) * -0.00019841));
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_4.y = 0.0;
  waveMove_4.x = dot (tmpvar_12, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_4.z = dot (tmpvar_12, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_1.xz = (_glesVertex.xz - (waveMove_4.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_13;
  tmpvar_13 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_11, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (vertex_1.xyz - _CameraPosition.xyz);
  highp float tmpvar_15;
  tmpvar_15 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_14, tmpvar_14))) * _CameraPosition.w), 0.0, 1.0);
  color_2.w = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16.xyz = ((2.0 * waveColor_3) * _glesColor.xyz);
  tmpvar_16.w = color_2.w;
  gl_Position = (glstate_matrix_mvp * vertex_1);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_16;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D unity_Lightmap;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec2 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_3;
  x_3 = (tmpvar_2.w - _Cutoff);
  if ((x_3 < 0.0)) {
    discard;
  };
  mediump vec3 lm_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_4 = tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_2.xyz * lm_4);
  c_1.xyz = tmpvar_6;
  c_1.w = (tmpvar_2.w * xlv_COLOR0.w);
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp vec4 vertex_4;
  vertex_4.yw = _glesVertex.yw;
  lowp vec4 color_5;
  color_5.xyz = _glesColor.xyz;
  lowp vec3 waveColor_6;
  highp vec3 waveMove_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_8);
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_9);
  highp vec4 tmpvar_12;
  tmpvar_12 = (((tmpvar_8 + (tmpvar_10 * -0.161616)) + (tmpvar_11 * 0.0083333)) + ((tmpvar_11 * tmpvar_9) * -0.00019841));
  highp vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * tmpvar_12);
  highp vec4 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * tmpvar_13);
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_7.y = 0.0;
  waveMove_7.x = dot (tmpvar_15, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_7.z = dot (tmpvar_15, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_4.xz = (_glesVertex.xz - (waveMove_7.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_14, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_6 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = (vertex_4.xyz - _CameraPosition.xyz);
  highp float tmpvar_18;
  tmpvar_18 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_17, tmpvar_17))) * _CameraPosition.w), 0.0, 1.0);
  color_5.w = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.xyz = ((2.0 * waveColor_6) * _glesColor.xyz);
  tmpvar_19.w = color_5.w;
  mat3 tmpvar_20;
  tmpvar_20[0] = _Object2World[0].xyz;
  tmpvar_20[1] = _Object2World[1].xyz;
  tmpvar_20[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  mediump vec3 tmpvar_23;
  mediump vec4 normal_24;
  normal_24 = tmpvar_22;
  highp float vC_25;
  mediump vec3 x3_26;
  mediump vec3 x2_27;
  mediump vec3 x1_28;
  highp float tmpvar_29;
  tmpvar_29 = dot (unity_SHAr, normal_24);
  x1_28.x = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = dot (unity_SHAg, normal_24);
  x1_28.y = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = dot (unity_SHAb, normal_24);
  x1_28.z = tmpvar_31;
  mediump vec4 tmpvar_32;
  tmpvar_32 = (normal_24.xyzz * normal_24.yzzx);
  highp float tmpvar_33;
  tmpvar_33 = dot (unity_SHBr, tmpvar_32);
  x2_27.x = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = dot (unity_SHBg, tmpvar_32);
  x2_27.y = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = dot (unity_SHBb, tmpvar_32);
  x2_27.z = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = ((normal_24.x * normal_24.x) - (normal_24.y * normal_24.y));
  vC_25 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = (unity_SHC.xyz * vC_25);
  x3_26 = tmpvar_37;
  tmpvar_23 = ((x1_28 + x2_27) + x3_26);
  shlight_1 = tmpvar_23;
  tmpvar_3 = shlight_1;
  gl_Position = (glstate_matrix_mvp * vertex_4);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * vertex_4));
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_3;
  x_3 = (tmpvar_2.w - _Cutoff);
  if ((x_3 < 0.0)) {
    discard;
  };
  lowp float tmpvar_4;
  mediump float lightShadowDataX_5;
  highp float dist_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_6 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = _LightShadowData.x;
  lightShadowDataX_5 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = max (float((dist_6 > (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))), lightShadowDataX_5);
  tmpvar_4 = tmpvar_9;
  lowp vec4 c_10;
  c_10.xyz = ((tmpvar_2.xyz * _LightColor0.xyz) * ((max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz)) * tmpvar_4) * 2.0));
  c_10.w = (tmpvar_2.w * xlv_COLOR0.w);
  c_1.w = c_10.w;
  c_1.xyz = (c_10.xyz + (tmpvar_2.xyz * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp vec4 vertex_4;
  vertex_4.yw = _glesVertex.yw;
  lowp vec4 color_5;
  color_5.xyz = _glesColor.xyz;
  lowp vec3 waveColor_6;
  highp vec3 waveMove_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_8);
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_9);
  highp vec4 tmpvar_12;
  tmpvar_12 = (((tmpvar_8 + (tmpvar_10 * -0.161616)) + (tmpvar_11 * 0.0083333)) + ((tmpvar_11 * tmpvar_9) * -0.00019841));
  highp vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * tmpvar_12);
  highp vec4 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * tmpvar_13);
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_7.y = 0.0;
  waveMove_7.x = dot (tmpvar_15, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_7.z = dot (tmpvar_15, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_4.xz = (_glesVertex.xz - (waveMove_7.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_14, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_6 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = (vertex_4.xyz - _CameraPosition.xyz);
  highp float tmpvar_18;
  tmpvar_18 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_17, tmpvar_17))) * _CameraPosition.w), 0.0, 1.0);
  color_5.w = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.xyz = ((2.0 * waveColor_6) * _glesColor.xyz);
  tmpvar_19.w = color_5.w;
  mat3 tmpvar_20;
  tmpvar_20[0] = _Object2World[0].xyz;
  tmpvar_20[1] = _Object2World[1].xyz;
  tmpvar_20[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  mediump vec3 tmpvar_23;
  mediump vec4 normal_24;
  normal_24 = tmpvar_22;
  highp float vC_25;
  mediump vec3 x3_26;
  mediump vec3 x2_27;
  mediump vec3 x1_28;
  highp float tmpvar_29;
  tmpvar_29 = dot (unity_SHAr, normal_24);
  x1_28.x = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = dot (unity_SHAg, normal_24);
  x1_28.y = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = dot (unity_SHAb, normal_24);
  x1_28.z = tmpvar_31;
  mediump vec4 tmpvar_32;
  tmpvar_32 = (normal_24.xyzz * normal_24.yzzx);
  highp float tmpvar_33;
  tmpvar_33 = dot (unity_SHBr, tmpvar_32);
  x2_27.x = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = dot (unity_SHBg, tmpvar_32);
  x2_27.y = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = dot (unity_SHBb, tmpvar_32);
  x2_27.z = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = ((normal_24.x * normal_24.x) - (normal_24.y * normal_24.y));
  vC_25 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = (unity_SHC.xyz * vC_25);
  x3_26 = tmpvar_37;
  tmpvar_23 = ((x1_28 + x2_27) + x3_26);
  shlight_1 = tmpvar_23;
  tmpvar_3 = shlight_1;
  gl_Position = (glstate_matrix_mvp * vertex_4);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * vertex_4));
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_3;
  x_3 = (tmpvar_2.w - _Cutoff);
  if ((x_3 < 0.0)) {
    discard;
  };
  lowp float tmpvar_4;
  mediump float lightShadowDataX_5;
  highp float dist_6;
  lowp float tmpvar_7;
  tmpvar_7 = textureProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_6 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = _LightShadowData.x;
  lightShadowDataX_5 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = max (float((dist_6 > (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))), lightShadowDataX_5);
  tmpvar_4 = tmpvar_9;
  lowp vec4 c_10;
  c_10.xyz = ((tmpvar_2.xyz * _LightColor0.xyz) * ((max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz)) * tmpvar_4) * 2.0));
  c_10.w = (tmpvar_2.w * xlv_COLOR0.w);
  c_1.w = c_10.w;
  c_1.xyz = (c_10.xyz + (tmpvar_2.xyz * xlv_TEXCOORD2));
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp vec4 vertex_1;
  vertex_1.yw = _glesVertex.yw;
  lowp vec4 color_2;
  color_2.xyz = _glesColor.xyz;
  lowp vec3 waveColor_3;
  highp vec3 waveMove_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * tmpvar_5);
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_5);
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_6);
  highp vec4 tmpvar_9;
  tmpvar_9 = (((tmpvar_5 + (tmpvar_7 * -0.161616)) + (tmpvar_8 * 0.0083333)) + ((tmpvar_8 * tmpvar_6) * -0.00019841));
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_4.y = 0.0;
  waveMove_4.x = dot (tmpvar_12, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_4.z = dot (tmpvar_12, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_1.xz = (_glesVertex.xz - (waveMove_4.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_13;
  tmpvar_13 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_11, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (vertex_1.xyz - _CameraPosition.xyz);
  highp float tmpvar_15;
  tmpvar_15 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_14, tmpvar_14))) * _CameraPosition.w), 0.0, 1.0);
  color_2.w = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16.xyz = ((2.0 * waveColor_3) * _glesColor.xyz);
  tmpvar_16.w = color_2.w;
  gl_Position = (glstate_matrix_mvp * vertex_1);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_16;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * vertex_1));
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _LightShadowData;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D unity_Lightmap;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_3;
  x_3 = (tmpvar_2.w - _Cutoff);
  if ((x_3 < 0.0)) {
    discard;
  };
  lowp float tmpvar_4;
  mediump float lightShadowDataX_5;
  highp float dist_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD2).x;
  dist_6 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = _LightShadowData.x;
  lightShadowDataX_5 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = max (float((dist_6 > (xlv_TEXCOORD2.z / xlv_TEXCOORD2.w))), lightShadowDataX_5);
  tmpvar_4 = tmpvar_9;
  c_1.xyz = (tmpvar_2.xyz * min ((2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz), vec3((tmpvar_4 * 2.0))));
  c_1.w = (tmpvar_2.w * xlv_COLOR0.w);
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec2 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp vec4 vertex_1;
  vertex_1.yw = _glesVertex.yw;
  lowp vec4 color_2;
  color_2.xyz = _glesColor.xyz;
  lowp vec3 waveColor_3;
  highp vec3 waveMove_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * tmpvar_5);
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_5);
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_6);
  highp vec4 tmpvar_9;
  tmpvar_9 = (((tmpvar_5 + (tmpvar_7 * -0.161616)) + (tmpvar_8 * 0.0083333)) + ((tmpvar_8 * tmpvar_6) * -0.00019841));
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_4.y = 0.0;
  waveMove_4.x = dot (tmpvar_12, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_4.z = dot (tmpvar_12, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_1.xz = (_glesVertex.xz - (waveMove_4.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_13;
  tmpvar_13 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_11, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (vertex_1.xyz - _CameraPosition.xyz);
  highp float tmpvar_15;
  tmpvar_15 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_14, tmpvar_14))) * _CameraPosition.w), 0.0, 1.0);
  color_2.w = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16.xyz = ((2.0 * waveColor_3) * _glesColor.xyz);
  tmpvar_16.w = color_2.w;
  gl_Position = (glstate_matrix_mvp * vertex_1);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_16;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * vertex_1));
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform highp vec4 _LightShadowData;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D unity_Lightmap;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec2 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_3;
  x_3 = (tmpvar_2.w - _Cutoff);
  if ((x_3 < 0.0)) {
    discard;
  };
  lowp float tmpvar_4;
  mediump float lightShadowDataX_5;
  highp float dist_6;
  lowp float tmpvar_7;
  tmpvar_7 = textureProj (_ShadowMapTexture, xlv_TEXCOORD2).x;
  dist_6 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = _LightShadowData.x;
  lightShadowDataX_5 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = max (float((dist_6 > (xlv_TEXCOORD2.z / xlv_TEXCOORD2.w))), lightShadowDataX_5);
  tmpvar_4 = tmpvar_9;
  c_1.xyz = (tmpvar_2.xyz * min ((2.0 * texture (unity_Lightmap, xlv_TEXCOORD1).xyz), vec3((tmpvar_4 * 2.0))));
  c_1.w = (tmpvar_2.w * xlv_COLOR0.w);
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp vec4 vertex_1;
  vertex_1.yw = _glesVertex.yw;
  lowp vec4 color_2;
  color_2.xyz = _glesColor.xyz;
  lowp vec3 waveColor_3;
  highp vec3 waveMove_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * tmpvar_5);
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_5);
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_6);
  highp vec4 tmpvar_9;
  tmpvar_9 = (((tmpvar_5 + (tmpvar_7 * -0.161616)) + (tmpvar_8 * 0.0083333)) + ((tmpvar_8 * tmpvar_6) * -0.00019841));
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_4.y = 0.0;
  waveMove_4.x = dot (tmpvar_12, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_4.z = dot (tmpvar_12, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_1.xz = (_glesVertex.xz - (waveMove_4.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_13;
  tmpvar_13 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_11, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (vertex_1.xyz - _CameraPosition.xyz);
  highp float tmpvar_15;
  tmpvar_15 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_14, tmpvar_14))) * _CameraPosition.w), 0.0, 1.0);
  color_2.w = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16.xyz = ((2.0 * waveColor_3) * _glesColor.xyz);
  tmpvar_16.w = color_2.w;
  gl_Position = (glstate_matrix_mvp * vertex_1);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_16;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * vertex_1));
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _LightShadowData;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D unity_Lightmap;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_3;
  x_3 = (tmpvar_2.w - _Cutoff);
  if ((x_3 < 0.0)) {
    discard;
  };
  lowp float tmpvar_4;
  mediump float lightShadowDataX_5;
  highp float dist_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD2).x;
  dist_6 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = _LightShadowData.x;
  lightShadowDataX_5 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = max (float((dist_6 > (xlv_TEXCOORD2.z / xlv_TEXCOORD2.w))), lightShadowDataX_5);
  tmpvar_4 = tmpvar_9;
  mediump vec3 lm_10;
  lowp vec3 tmpvar_11;
  tmpvar_11 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_10 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = vec3((tmpvar_4 * 2.0));
  mediump vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_2.xyz * min (lm_10, tmpvar_12));
  c_1.xyz = tmpvar_13;
  c_1.w = (tmpvar_2.w * xlv_COLOR0.w);
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec2 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp vec4 vertex_1;
  vertex_1.yw = _glesVertex.yw;
  lowp vec4 color_2;
  color_2.xyz = _glesColor.xyz;
  lowp vec3 waveColor_3;
  highp vec3 waveMove_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * tmpvar_5);
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_5);
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_6);
  highp vec4 tmpvar_9;
  tmpvar_9 = (((tmpvar_5 + (tmpvar_7 * -0.161616)) + (tmpvar_8 * 0.0083333)) + ((tmpvar_8 * tmpvar_6) * -0.00019841));
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_4.y = 0.0;
  waveMove_4.x = dot (tmpvar_12, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_4.z = dot (tmpvar_12, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_1.xz = (_glesVertex.xz - (waveMove_4.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_13;
  tmpvar_13 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_11, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (vertex_1.xyz - _CameraPosition.xyz);
  highp float tmpvar_15;
  tmpvar_15 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_14, tmpvar_14))) * _CameraPosition.w), 0.0, 1.0);
  color_2.w = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16.xyz = ((2.0 * waveColor_3) * _glesColor.xyz);
  tmpvar_16.w = color_2.w;
  gl_Position = (glstate_matrix_mvp * vertex_1);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_16;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * vertex_1));
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform highp vec4 _LightShadowData;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D unity_Lightmap;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec2 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_3;
  x_3 = (tmpvar_2.w - _Cutoff);
  if ((x_3 < 0.0)) {
    discard;
  };
  lowp float tmpvar_4;
  mediump float lightShadowDataX_5;
  highp float dist_6;
  lowp float tmpvar_7;
  tmpvar_7 = textureProj (_ShadowMapTexture, xlv_TEXCOORD2).x;
  dist_6 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = _LightShadowData.x;
  lightShadowDataX_5 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = max (float((dist_6 > (xlv_TEXCOORD2.z / xlv_TEXCOORD2.w))), lightShadowDataX_5);
  tmpvar_4 = tmpvar_9;
  mediump vec3 lm_10;
  lowp vec3 tmpvar_11;
  tmpvar_11 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_10 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = vec3((tmpvar_4 * 2.0));
  mediump vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_2.xyz * min (lm_10, tmpvar_12));
  c_1.xyz = tmpvar_13;
  c_1.w = (tmpvar_2.w * xlv_COLOR0.w);
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp vec4 vertex_4;
  vertex_4.yw = _glesVertex.yw;
  lowp vec4 color_5;
  color_5.xyz = _glesColor.xyz;
  lowp vec3 waveColor_6;
  highp vec3 waveMove_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_8);
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_9);
  highp vec4 tmpvar_12;
  tmpvar_12 = (((tmpvar_8 + (tmpvar_10 * -0.161616)) + (tmpvar_11 * 0.0083333)) + ((tmpvar_11 * tmpvar_9) * -0.00019841));
  highp vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * tmpvar_12);
  highp vec4 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * tmpvar_13);
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_7.y = 0.0;
  waveMove_7.x = dot (tmpvar_15, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_7.z = dot (tmpvar_15, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_4.xz = (_glesVertex.xz - (waveMove_7.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_14, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_6 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = (vertex_4.xyz - _CameraPosition.xyz);
  highp float tmpvar_18;
  tmpvar_18 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_17, tmpvar_17))) * _CameraPosition.w), 0.0, 1.0);
  color_5.w = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.xyz = ((2.0 * waveColor_6) * _glesColor.xyz);
  tmpvar_19.w = color_5.w;
  mat3 tmpvar_20;
  tmpvar_20[0] = _Object2World[0].xyz;
  tmpvar_20[1] = _Object2World[1].xyz;
  tmpvar_20[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  mediump vec3 tmpvar_23;
  mediump vec4 normal_24;
  normal_24 = tmpvar_22;
  highp float vC_25;
  mediump vec3 x3_26;
  mediump vec3 x2_27;
  mediump vec3 x1_28;
  highp float tmpvar_29;
  tmpvar_29 = dot (unity_SHAr, normal_24);
  x1_28.x = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = dot (unity_SHAg, normal_24);
  x1_28.y = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = dot (unity_SHAb, normal_24);
  x1_28.z = tmpvar_31;
  mediump vec4 tmpvar_32;
  tmpvar_32 = (normal_24.xyzz * normal_24.yzzx);
  highp float tmpvar_33;
  tmpvar_33 = dot (unity_SHBr, tmpvar_32);
  x2_27.x = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = dot (unity_SHBg, tmpvar_32);
  x2_27.y = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = dot (unity_SHBb, tmpvar_32);
  x2_27.z = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = ((normal_24.x * normal_24.x) - (normal_24.y * normal_24.y));
  vC_25 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = (unity_SHC.xyz * vC_25);
  x3_26 = tmpvar_37;
  tmpvar_23 = ((x1_28 + x2_27) + x3_26);
  shlight_1 = tmpvar_23;
  tmpvar_3 = shlight_1;
  highp vec3 tmpvar_38;
  tmpvar_38 = (_Object2World * vertex_4).xyz;
  highp vec4 tmpvar_39;
  tmpvar_39 = (unity_4LightPosX0 - tmpvar_38.x);
  highp vec4 tmpvar_40;
  tmpvar_40 = (unity_4LightPosY0 - tmpvar_38.y);
  highp vec4 tmpvar_41;
  tmpvar_41 = (unity_4LightPosZ0 - tmpvar_38.z);
  highp vec4 tmpvar_42;
  tmpvar_42 = (((tmpvar_39 * tmpvar_39) + (tmpvar_40 * tmpvar_40)) + (tmpvar_41 * tmpvar_41));
  highp vec4 tmpvar_43;
  tmpvar_43 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_39 * tmpvar_21.x) + (tmpvar_40 * tmpvar_21.y)) + (tmpvar_41 * tmpvar_21.z)) * inversesqrt(tmpvar_42))) * (1.0/((1.0 + (tmpvar_42 * unity_4LightAtten0)))));
  highp vec3 tmpvar_44;
  tmpvar_44 = (tmpvar_3 + ((((unity_LightColor[0].xyz * tmpvar_43.x) + (unity_LightColor[1].xyz * tmpvar_43.y)) + (unity_LightColor[2].xyz * tmpvar_43.z)) + (unity_LightColor[3].xyz * tmpvar_43.w)));
  tmpvar_3 = tmpvar_44;
  gl_Position = (glstate_matrix_mvp * vertex_4);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_3;
  x_3 = (tmpvar_2.w - _Cutoff);
  if ((x_3 < 0.0)) {
    discard;
  };
  lowp vec4 c_4;
  c_4.xyz = ((tmpvar_2.xyz * _LightColor0.xyz) * (max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz)) * 2.0));
  c_4.w = (tmpvar_2.w * xlv_COLOR0.w);
  c_1.w = c_4.w;
  c_1.xyz = (c_4.xyz + (tmpvar_2.xyz * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp vec4 vertex_4;
  vertex_4.yw = _glesVertex.yw;
  lowp vec4 color_5;
  color_5.xyz = _glesColor.xyz;
  lowp vec3 waveColor_6;
  highp vec3 waveMove_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_8);
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_9);
  highp vec4 tmpvar_12;
  tmpvar_12 = (((tmpvar_8 + (tmpvar_10 * -0.161616)) + (tmpvar_11 * 0.0083333)) + ((tmpvar_11 * tmpvar_9) * -0.00019841));
  highp vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * tmpvar_12);
  highp vec4 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * tmpvar_13);
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_7.y = 0.0;
  waveMove_7.x = dot (tmpvar_15, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_7.z = dot (tmpvar_15, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_4.xz = (_glesVertex.xz - (waveMove_7.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_14, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_6 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = (vertex_4.xyz - _CameraPosition.xyz);
  highp float tmpvar_18;
  tmpvar_18 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_17, tmpvar_17))) * _CameraPosition.w), 0.0, 1.0);
  color_5.w = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.xyz = ((2.0 * waveColor_6) * _glesColor.xyz);
  tmpvar_19.w = color_5.w;
  mat3 tmpvar_20;
  tmpvar_20[0] = _Object2World[0].xyz;
  tmpvar_20[1] = _Object2World[1].xyz;
  tmpvar_20[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  mediump vec3 tmpvar_23;
  mediump vec4 normal_24;
  normal_24 = tmpvar_22;
  highp float vC_25;
  mediump vec3 x3_26;
  mediump vec3 x2_27;
  mediump vec3 x1_28;
  highp float tmpvar_29;
  tmpvar_29 = dot (unity_SHAr, normal_24);
  x1_28.x = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = dot (unity_SHAg, normal_24);
  x1_28.y = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = dot (unity_SHAb, normal_24);
  x1_28.z = tmpvar_31;
  mediump vec4 tmpvar_32;
  tmpvar_32 = (normal_24.xyzz * normal_24.yzzx);
  highp float tmpvar_33;
  tmpvar_33 = dot (unity_SHBr, tmpvar_32);
  x2_27.x = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = dot (unity_SHBg, tmpvar_32);
  x2_27.y = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = dot (unity_SHBb, tmpvar_32);
  x2_27.z = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = ((normal_24.x * normal_24.x) - (normal_24.y * normal_24.y));
  vC_25 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = (unity_SHC.xyz * vC_25);
  x3_26 = tmpvar_37;
  tmpvar_23 = ((x1_28 + x2_27) + x3_26);
  shlight_1 = tmpvar_23;
  tmpvar_3 = shlight_1;
  highp vec3 tmpvar_38;
  tmpvar_38 = (_Object2World * vertex_4).xyz;
  highp vec4 tmpvar_39;
  tmpvar_39 = (unity_4LightPosX0 - tmpvar_38.x);
  highp vec4 tmpvar_40;
  tmpvar_40 = (unity_4LightPosY0 - tmpvar_38.y);
  highp vec4 tmpvar_41;
  tmpvar_41 = (unity_4LightPosZ0 - tmpvar_38.z);
  highp vec4 tmpvar_42;
  tmpvar_42 = (((tmpvar_39 * tmpvar_39) + (tmpvar_40 * tmpvar_40)) + (tmpvar_41 * tmpvar_41));
  highp vec4 tmpvar_43;
  tmpvar_43 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_39 * tmpvar_21.x) + (tmpvar_40 * tmpvar_21.y)) + (tmpvar_41 * tmpvar_21.z)) * inversesqrt(tmpvar_42))) * (1.0/((1.0 + (tmpvar_42 * unity_4LightAtten0)))));
  highp vec3 tmpvar_44;
  tmpvar_44 = (tmpvar_3 + ((((unity_LightColor[0].xyz * tmpvar_43.x) + (unity_LightColor[1].xyz * tmpvar_43.y)) + (unity_LightColor[2].xyz * tmpvar_43.z)) + (unity_LightColor[3].xyz * tmpvar_43.w)));
  tmpvar_3 = tmpvar_44;
  gl_Position = (glstate_matrix_mvp * vertex_4);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_3;
  x_3 = (tmpvar_2.w - _Cutoff);
  if ((x_3 < 0.0)) {
    discard;
  };
  lowp vec4 c_4;
  c_4.xyz = ((tmpvar_2.xyz * _LightColor0.xyz) * (max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz)) * 2.0));
  c_4.w = (tmpvar_2.w * xlv_COLOR0.w);
  c_1.w = c_4.w;
  c_1.xyz = (c_4.xyz + (tmpvar_2.xyz * xlv_TEXCOORD2));
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp vec4 vertex_4;
  vertex_4.yw = _glesVertex.yw;
  lowp vec4 color_5;
  color_5.xyz = _glesColor.xyz;
  lowp vec3 waveColor_6;
  highp vec3 waveMove_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_8);
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_9);
  highp vec4 tmpvar_12;
  tmpvar_12 = (((tmpvar_8 + (tmpvar_10 * -0.161616)) + (tmpvar_11 * 0.0083333)) + ((tmpvar_11 * tmpvar_9) * -0.00019841));
  highp vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * tmpvar_12);
  highp vec4 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * tmpvar_13);
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_7.y = 0.0;
  waveMove_7.x = dot (tmpvar_15, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_7.z = dot (tmpvar_15, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_4.xz = (_glesVertex.xz - (waveMove_7.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_14, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_6 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = (vertex_4.xyz - _CameraPosition.xyz);
  highp float tmpvar_18;
  tmpvar_18 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_17, tmpvar_17))) * _CameraPosition.w), 0.0, 1.0);
  color_5.w = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.xyz = ((2.0 * waveColor_6) * _glesColor.xyz);
  tmpvar_19.w = color_5.w;
  mat3 tmpvar_20;
  tmpvar_20[0] = _Object2World[0].xyz;
  tmpvar_20[1] = _Object2World[1].xyz;
  tmpvar_20[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  mediump vec3 tmpvar_23;
  mediump vec4 normal_24;
  normal_24 = tmpvar_22;
  highp float vC_25;
  mediump vec3 x3_26;
  mediump vec3 x2_27;
  mediump vec3 x1_28;
  highp float tmpvar_29;
  tmpvar_29 = dot (unity_SHAr, normal_24);
  x1_28.x = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = dot (unity_SHAg, normal_24);
  x1_28.y = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = dot (unity_SHAb, normal_24);
  x1_28.z = tmpvar_31;
  mediump vec4 tmpvar_32;
  tmpvar_32 = (normal_24.xyzz * normal_24.yzzx);
  highp float tmpvar_33;
  tmpvar_33 = dot (unity_SHBr, tmpvar_32);
  x2_27.x = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = dot (unity_SHBg, tmpvar_32);
  x2_27.y = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = dot (unity_SHBb, tmpvar_32);
  x2_27.z = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = ((normal_24.x * normal_24.x) - (normal_24.y * normal_24.y));
  vC_25 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = (unity_SHC.xyz * vC_25);
  x3_26 = tmpvar_37;
  tmpvar_23 = ((x1_28 + x2_27) + x3_26);
  shlight_1 = tmpvar_23;
  tmpvar_3 = shlight_1;
  highp vec3 tmpvar_38;
  tmpvar_38 = (_Object2World * vertex_4).xyz;
  highp vec4 tmpvar_39;
  tmpvar_39 = (unity_4LightPosX0 - tmpvar_38.x);
  highp vec4 tmpvar_40;
  tmpvar_40 = (unity_4LightPosY0 - tmpvar_38.y);
  highp vec4 tmpvar_41;
  tmpvar_41 = (unity_4LightPosZ0 - tmpvar_38.z);
  highp vec4 tmpvar_42;
  tmpvar_42 = (((tmpvar_39 * tmpvar_39) + (tmpvar_40 * tmpvar_40)) + (tmpvar_41 * tmpvar_41));
  highp vec4 tmpvar_43;
  tmpvar_43 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_39 * tmpvar_21.x) + (tmpvar_40 * tmpvar_21.y)) + (tmpvar_41 * tmpvar_21.z)) * inversesqrt(tmpvar_42))) * (1.0/((1.0 + (tmpvar_42 * unity_4LightAtten0)))));
  highp vec3 tmpvar_44;
  tmpvar_44 = (tmpvar_3 + ((((unity_LightColor[0].xyz * tmpvar_43.x) + (unity_LightColor[1].xyz * tmpvar_43.y)) + (unity_LightColor[2].xyz * tmpvar_43.z)) + (unity_LightColor[3].xyz * tmpvar_43.w)));
  tmpvar_3 = tmpvar_44;
  gl_Position = (glstate_matrix_mvp * vertex_4);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * vertex_4));
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_3;
  x_3 = (tmpvar_2.w - _Cutoff);
  if ((x_3 < 0.0)) {
    discard;
  };
  lowp float tmpvar_4;
  mediump float lightShadowDataX_5;
  highp float dist_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_6 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = _LightShadowData.x;
  lightShadowDataX_5 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = max (float((dist_6 > (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))), lightShadowDataX_5);
  tmpvar_4 = tmpvar_9;
  lowp vec4 c_10;
  c_10.xyz = ((tmpvar_2.xyz * _LightColor0.xyz) * ((max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz)) * tmpvar_4) * 2.0));
  c_10.w = (tmpvar_2.w * xlv_COLOR0.w);
  c_1.w = c_10.w;
  c_1.xyz = (c_10.xyz + (tmpvar_2.xyz * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp vec4 vertex_4;
  vertex_4.yw = _glesVertex.yw;
  lowp vec4 color_5;
  color_5.xyz = _glesColor.xyz;
  lowp vec3 waveColor_6;
  highp vec3 waveMove_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_8);
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_9);
  highp vec4 tmpvar_12;
  tmpvar_12 = (((tmpvar_8 + (tmpvar_10 * -0.161616)) + (tmpvar_11 * 0.0083333)) + ((tmpvar_11 * tmpvar_9) * -0.00019841));
  highp vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * tmpvar_12);
  highp vec4 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * tmpvar_13);
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_7.y = 0.0;
  waveMove_7.x = dot (tmpvar_15, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_7.z = dot (tmpvar_15, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_4.xz = (_glesVertex.xz - (waveMove_7.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_14, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_6 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = (vertex_4.xyz - _CameraPosition.xyz);
  highp float tmpvar_18;
  tmpvar_18 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_17, tmpvar_17))) * _CameraPosition.w), 0.0, 1.0);
  color_5.w = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.xyz = ((2.0 * waveColor_6) * _glesColor.xyz);
  tmpvar_19.w = color_5.w;
  mat3 tmpvar_20;
  tmpvar_20[0] = _Object2World[0].xyz;
  tmpvar_20[1] = _Object2World[1].xyz;
  tmpvar_20[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  mediump vec3 tmpvar_23;
  mediump vec4 normal_24;
  normal_24 = tmpvar_22;
  highp float vC_25;
  mediump vec3 x3_26;
  mediump vec3 x2_27;
  mediump vec3 x1_28;
  highp float tmpvar_29;
  tmpvar_29 = dot (unity_SHAr, normal_24);
  x1_28.x = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = dot (unity_SHAg, normal_24);
  x1_28.y = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = dot (unity_SHAb, normal_24);
  x1_28.z = tmpvar_31;
  mediump vec4 tmpvar_32;
  tmpvar_32 = (normal_24.xyzz * normal_24.yzzx);
  highp float tmpvar_33;
  tmpvar_33 = dot (unity_SHBr, tmpvar_32);
  x2_27.x = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = dot (unity_SHBg, tmpvar_32);
  x2_27.y = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = dot (unity_SHBb, tmpvar_32);
  x2_27.z = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = ((normal_24.x * normal_24.x) - (normal_24.y * normal_24.y));
  vC_25 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = (unity_SHC.xyz * vC_25);
  x3_26 = tmpvar_37;
  tmpvar_23 = ((x1_28 + x2_27) + x3_26);
  shlight_1 = tmpvar_23;
  tmpvar_3 = shlight_1;
  highp vec3 tmpvar_38;
  tmpvar_38 = (_Object2World * vertex_4).xyz;
  highp vec4 tmpvar_39;
  tmpvar_39 = (unity_4LightPosX0 - tmpvar_38.x);
  highp vec4 tmpvar_40;
  tmpvar_40 = (unity_4LightPosY0 - tmpvar_38.y);
  highp vec4 tmpvar_41;
  tmpvar_41 = (unity_4LightPosZ0 - tmpvar_38.z);
  highp vec4 tmpvar_42;
  tmpvar_42 = (((tmpvar_39 * tmpvar_39) + (tmpvar_40 * tmpvar_40)) + (tmpvar_41 * tmpvar_41));
  highp vec4 tmpvar_43;
  tmpvar_43 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_39 * tmpvar_21.x) + (tmpvar_40 * tmpvar_21.y)) + (tmpvar_41 * tmpvar_21.z)) * inversesqrt(tmpvar_42))) * (1.0/((1.0 + (tmpvar_42 * unity_4LightAtten0)))));
  highp vec3 tmpvar_44;
  tmpvar_44 = (tmpvar_3 + ((((unity_LightColor[0].xyz * tmpvar_43.x) + (unity_LightColor[1].xyz * tmpvar_43.y)) + (unity_LightColor[2].xyz * tmpvar_43.z)) + (unity_LightColor[3].xyz * tmpvar_43.w)));
  tmpvar_3 = tmpvar_44;
  gl_Position = (glstate_matrix_mvp * vertex_4);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * vertex_4));
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_3;
  x_3 = (tmpvar_2.w - _Cutoff);
  if ((x_3 < 0.0)) {
    discard;
  };
  lowp float tmpvar_4;
  mediump float lightShadowDataX_5;
  highp float dist_6;
  lowp float tmpvar_7;
  tmpvar_7 = textureProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_6 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = _LightShadowData.x;
  lightShadowDataX_5 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = max (float((dist_6 > (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))), lightShadowDataX_5);
  tmpvar_4 = tmpvar_9;
  lowp vec4 c_10;
  c_10.xyz = ((tmpvar_2.xyz * _LightColor0.xyz) * ((max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz)) * tmpvar_4) * 2.0));
  c_10.w = (tmpvar_2.w * xlv_COLOR0.w);
  c_1.w = c_10.w;
  c_1.xyz = (c_10.xyz + (tmpvar_2.xyz * xlv_TEXCOORD2));
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp vec4 vertex_4;
  vertex_4.yw = _glesVertex.yw;
  lowp vec4 color_5;
  color_5.xyz = _glesColor.xyz;
  lowp vec3 waveColor_6;
  highp vec3 waveMove_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_8);
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_9);
  highp vec4 tmpvar_12;
  tmpvar_12 = (((tmpvar_8 + (tmpvar_10 * -0.161616)) + (tmpvar_11 * 0.0083333)) + ((tmpvar_11 * tmpvar_9) * -0.00019841));
  highp vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * tmpvar_12);
  highp vec4 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * tmpvar_13);
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_7.y = 0.0;
  waveMove_7.x = dot (tmpvar_15, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_7.z = dot (tmpvar_15, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_4.xz = (_glesVertex.xz - (waveMove_7.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_14, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_6 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = (vertex_4.xyz - _CameraPosition.xyz);
  highp float tmpvar_18;
  tmpvar_18 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_17, tmpvar_17))) * _CameraPosition.w), 0.0, 1.0);
  color_5.w = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.xyz = ((2.0 * waveColor_6) * _glesColor.xyz);
  tmpvar_19.w = color_5.w;
  mat3 tmpvar_20;
  tmpvar_20[0] = _Object2World[0].xyz;
  tmpvar_20[1] = _Object2World[1].xyz;
  tmpvar_20[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  mediump vec3 tmpvar_23;
  mediump vec4 normal_24;
  normal_24 = tmpvar_22;
  highp float vC_25;
  mediump vec3 x3_26;
  mediump vec3 x2_27;
  mediump vec3 x1_28;
  highp float tmpvar_29;
  tmpvar_29 = dot (unity_SHAr, normal_24);
  x1_28.x = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = dot (unity_SHAg, normal_24);
  x1_28.y = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = dot (unity_SHAb, normal_24);
  x1_28.z = tmpvar_31;
  mediump vec4 tmpvar_32;
  tmpvar_32 = (normal_24.xyzz * normal_24.yzzx);
  highp float tmpvar_33;
  tmpvar_33 = dot (unity_SHBr, tmpvar_32);
  x2_27.x = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = dot (unity_SHBg, tmpvar_32);
  x2_27.y = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = dot (unity_SHBb, tmpvar_32);
  x2_27.z = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = ((normal_24.x * normal_24.x) - (normal_24.y * normal_24.y));
  vC_25 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = (unity_SHC.xyz * vC_25);
  x3_26 = tmpvar_37;
  tmpvar_23 = ((x1_28 + x2_27) + x3_26);
  shlight_1 = tmpvar_23;
  tmpvar_3 = shlight_1;
  gl_Position = (glstate_matrix_mvp * vertex_4);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * vertex_4));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_3;
  x_3 = (tmpvar_2.w - _Cutoff);
  if ((x_3 < 0.0)) {
    discard;
  };
  lowp float shadow_4;
  lowp float tmpvar_5;
  tmpvar_5 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD3.xyz);
  highp float tmpvar_6;
  tmpvar_6 = (_LightShadowData.x + (tmpvar_5 * (1.0 - _LightShadowData.x)));
  shadow_4 = tmpvar_6;
  lowp vec4 c_7;
  c_7.xyz = ((tmpvar_2.xyz * _LightColor0.xyz) * ((max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz)) * shadow_4) * 2.0));
  c_7.w = (tmpvar_2.w * xlv_COLOR0.w);
  c_1.w = c_7.w;
  c_1.xyz = (c_7.xyz + (tmpvar_2.xyz * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp vec4 vertex_4;
  vertex_4.yw = _glesVertex.yw;
  lowp vec4 color_5;
  color_5.xyz = _glesColor.xyz;
  lowp vec3 waveColor_6;
  highp vec3 waveMove_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_8);
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_9);
  highp vec4 tmpvar_12;
  tmpvar_12 = (((tmpvar_8 + (tmpvar_10 * -0.161616)) + (tmpvar_11 * 0.0083333)) + ((tmpvar_11 * tmpvar_9) * -0.00019841));
  highp vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * tmpvar_12);
  highp vec4 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * tmpvar_13);
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_7.y = 0.0;
  waveMove_7.x = dot (tmpvar_15, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_7.z = dot (tmpvar_15, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_4.xz = (_glesVertex.xz - (waveMove_7.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_14, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_6 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = (vertex_4.xyz - _CameraPosition.xyz);
  highp float tmpvar_18;
  tmpvar_18 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_17, tmpvar_17))) * _CameraPosition.w), 0.0, 1.0);
  color_5.w = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.xyz = ((2.0 * waveColor_6) * _glesColor.xyz);
  tmpvar_19.w = color_5.w;
  mat3 tmpvar_20;
  tmpvar_20[0] = _Object2World[0].xyz;
  tmpvar_20[1] = _Object2World[1].xyz;
  tmpvar_20[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  mediump vec3 tmpvar_23;
  mediump vec4 normal_24;
  normal_24 = tmpvar_22;
  highp float vC_25;
  mediump vec3 x3_26;
  mediump vec3 x2_27;
  mediump vec3 x1_28;
  highp float tmpvar_29;
  tmpvar_29 = dot (unity_SHAr, normal_24);
  x1_28.x = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = dot (unity_SHAg, normal_24);
  x1_28.y = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = dot (unity_SHAb, normal_24);
  x1_28.z = tmpvar_31;
  mediump vec4 tmpvar_32;
  tmpvar_32 = (normal_24.xyzz * normal_24.yzzx);
  highp float tmpvar_33;
  tmpvar_33 = dot (unity_SHBr, tmpvar_32);
  x2_27.x = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = dot (unity_SHBg, tmpvar_32);
  x2_27.y = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = dot (unity_SHBb, tmpvar_32);
  x2_27.z = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = ((normal_24.x * normal_24.x) - (normal_24.y * normal_24.y));
  vC_25 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = (unity_SHC.xyz * vC_25);
  x3_26 = tmpvar_37;
  tmpvar_23 = ((x1_28 + x2_27) + x3_26);
  shlight_1 = tmpvar_23;
  tmpvar_3 = shlight_1;
  gl_Position = (glstate_matrix_mvp * vertex_4);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * vertex_4));
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_3;
  x_3 = (tmpvar_2.w - _Cutoff);
  if ((x_3 < 0.0)) {
    discard;
  };
  lowp float shadow_4;
  mediump float tmpvar_5;
  tmpvar_5 = texture (_ShadowMapTexture, xlv_TEXCOORD3.xyz);
  shadow_4 = tmpvar_5;
  highp float tmpvar_6;
  tmpvar_6 = (_LightShadowData.x + (shadow_4 * (1.0 - _LightShadowData.x)));
  shadow_4 = tmpvar_6;
  lowp vec4 c_7;
  c_7.xyz = ((tmpvar_2.xyz * _LightColor0.xyz) * ((max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz)) * shadow_4) * 2.0));
  c_7.w = (tmpvar_2.w * xlv_COLOR0.w);
  c_1.w = c_7.w;
  c_1.xyz = (c_7.xyz + (tmpvar_2.xyz * xlv_TEXCOORD2));
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp vec4 vertex_1;
  vertex_1.yw = _glesVertex.yw;
  lowp vec4 color_2;
  color_2.xyz = _glesColor.xyz;
  lowp vec3 waveColor_3;
  highp vec3 waveMove_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * tmpvar_5);
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_5);
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_6);
  highp vec4 tmpvar_9;
  tmpvar_9 = (((tmpvar_5 + (tmpvar_7 * -0.161616)) + (tmpvar_8 * 0.0083333)) + ((tmpvar_8 * tmpvar_6) * -0.00019841));
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_4.y = 0.0;
  waveMove_4.x = dot (tmpvar_12, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_4.z = dot (tmpvar_12, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_1.xz = (_glesVertex.xz - (waveMove_4.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_13;
  tmpvar_13 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_11, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (vertex_1.xyz - _CameraPosition.xyz);
  highp float tmpvar_15;
  tmpvar_15 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_14, tmpvar_14))) * _CameraPosition.w), 0.0, 1.0);
  color_2.w = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16.xyz = ((2.0 * waveColor_3) * _glesColor.xyz);
  tmpvar_16.w = color_2.w;
  gl_Position = (glstate_matrix_mvp * vertex_1);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_16;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * vertex_1));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D unity_Lightmap;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_3;
  x_3 = (tmpvar_2.w - _Cutoff);
  if ((x_3 < 0.0)) {
    discard;
  };
  lowp float shadow_4;
  lowp float tmpvar_5;
  tmpvar_5 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD2.xyz);
  highp float tmpvar_6;
  tmpvar_6 = (_LightShadowData.x + (tmpvar_5 * (1.0 - _LightShadowData.x)));
  shadow_4 = tmpvar_6;
  c_1.xyz = (tmpvar_2.xyz * min ((2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz), vec3((shadow_4 * 2.0))));
  c_1.w = (tmpvar_2.w * xlv_COLOR0.w);
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec2 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp vec4 vertex_1;
  vertex_1.yw = _glesVertex.yw;
  lowp vec4 color_2;
  color_2.xyz = _glesColor.xyz;
  lowp vec3 waveColor_3;
  highp vec3 waveMove_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * tmpvar_5);
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_5);
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_6);
  highp vec4 tmpvar_9;
  tmpvar_9 = (((tmpvar_5 + (tmpvar_7 * -0.161616)) + (tmpvar_8 * 0.0083333)) + ((tmpvar_8 * tmpvar_6) * -0.00019841));
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_4.y = 0.0;
  waveMove_4.x = dot (tmpvar_12, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_4.z = dot (tmpvar_12, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_1.xz = (_glesVertex.xz - (waveMove_4.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_13;
  tmpvar_13 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_11, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (vertex_1.xyz - _CameraPosition.xyz);
  highp float tmpvar_15;
  tmpvar_15 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_14, tmpvar_14))) * _CameraPosition.w), 0.0, 1.0);
  color_2.w = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16.xyz = ((2.0 * waveColor_3) * _glesColor.xyz);
  tmpvar_16.w = color_2.w;
  gl_Position = (glstate_matrix_mvp * vertex_1);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_16;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * vertex_1));
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D unity_Lightmap;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec2 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_3;
  x_3 = (tmpvar_2.w - _Cutoff);
  if ((x_3 < 0.0)) {
    discard;
  };
  lowp float shadow_4;
  mediump float tmpvar_5;
  tmpvar_5 = texture (_ShadowMapTexture, xlv_TEXCOORD2.xyz);
  shadow_4 = tmpvar_5;
  highp float tmpvar_6;
  tmpvar_6 = (_LightShadowData.x + (shadow_4 * (1.0 - _LightShadowData.x)));
  shadow_4 = tmpvar_6;
  c_1.xyz = (tmpvar_2.xyz * min ((2.0 * texture (unity_Lightmap, xlv_TEXCOORD1).xyz), vec3((shadow_4 * 2.0))));
  c_1.w = (tmpvar_2.w * xlv_COLOR0.w);
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp vec4 vertex_1;
  vertex_1.yw = _glesVertex.yw;
  lowp vec4 color_2;
  color_2.xyz = _glesColor.xyz;
  lowp vec3 waveColor_3;
  highp vec3 waveMove_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * tmpvar_5);
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_5);
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_6);
  highp vec4 tmpvar_9;
  tmpvar_9 = (((tmpvar_5 + (tmpvar_7 * -0.161616)) + (tmpvar_8 * 0.0083333)) + ((tmpvar_8 * tmpvar_6) * -0.00019841));
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_4.y = 0.0;
  waveMove_4.x = dot (tmpvar_12, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_4.z = dot (tmpvar_12, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_1.xz = (_glesVertex.xz - (waveMove_4.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_13;
  tmpvar_13 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_11, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (vertex_1.xyz - _CameraPosition.xyz);
  highp float tmpvar_15;
  tmpvar_15 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_14, tmpvar_14))) * _CameraPosition.w), 0.0, 1.0);
  color_2.w = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16.xyz = ((2.0 * waveColor_3) * _glesColor.xyz);
  tmpvar_16.w = color_2.w;
  gl_Position = (glstate_matrix_mvp * vertex_1);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_16;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * vertex_1));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D unity_Lightmap;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_3;
  x_3 = (tmpvar_2.w - _Cutoff);
  if ((x_3 < 0.0)) {
    discard;
  };
  lowp float shadow_4;
  lowp float tmpvar_5;
  tmpvar_5 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD2.xyz);
  highp float tmpvar_6;
  tmpvar_6 = (_LightShadowData.x + (tmpvar_5 * (1.0 - _LightShadowData.x)));
  shadow_4 = tmpvar_6;
  mediump vec3 lm_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_7 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = vec3((shadow_4 * 2.0));
  mediump vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_2.xyz * min (lm_7, tmpvar_9));
  c_1.xyz = tmpvar_10;
  c_1.w = (tmpvar_2.w * xlv_COLOR0.w);
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec2 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp vec4 vertex_1;
  vertex_1.yw = _glesVertex.yw;
  lowp vec4 color_2;
  color_2.xyz = _glesColor.xyz;
  lowp vec3 waveColor_3;
  highp vec3 waveMove_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * tmpvar_5);
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_5);
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_6);
  highp vec4 tmpvar_9;
  tmpvar_9 = (((tmpvar_5 + (tmpvar_7 * -0.161616)) + (tmpvar_8 * 0.0083333)) + ((tmpvar_8 * tmpvar_6) * -0.00019841));
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_4.y = 0.0;
  waveMove_4.x = dot (tmpvar_12, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_4.z = dot (tmpvar_12, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_1.xz = (_glesVertex.xz - (waveMove_4.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_13;
  tmpvar_13 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_11, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (vertex_1.xyz - _CameraPosition.xyz);
  highp float tmpvar_15;
  tmpvar_15 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_14, tmpvar_14))) * _CameraPosition.w), 0.0, 1.0);
  color_2.w = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16.xyz = ((2.0 * waveColor_3) * _glesColor.xyz);
  tmpvar_16.w = color_2.w;
  gl_Position = (glstate_matrix_mvp * vertex_1);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_16;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * vertex_1));
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D unity_Lightmap;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec2 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_3;
  x_3 = (tmpvar_2.w - _Cutoff);
  if ((x_3 < 0.0)) {
    discard;
  };
  lowp float shadow_4;
  mediump float tmpvar_5;
  tmpvar_5 = texture (_ShadowMapTexture, xlv_TEXCOORD2.xyz);
  shadow_4 = tmpvar_5;
  highp float tmpvar_6;
  tmpvar_6 = (_LightShadowData.x + (shadow_4 * (1.0 - _LightShadowData.x)));
  shadow_4 = tmpvar_6;
  mediump vec3 lm_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_7 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = vec3((shadow_4 * 2.0));
  mediump vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_2.xyz * min (lm_7, tmpvar_9));
  c_1.xyz = tmpvar_10;
  c_1.w = (tmpvar_2.w * xlv_COLOR0.w);
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp vec4 vertex_4;
  vertex_4.yw = _glesVertex.yw;
  lowp vec4 color_5;
  color_5.xyz = _glesColor.xyz;
  lowp vec3 waveColor_6;
  highp vec3 waveMove_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_8);
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_9);
  highp vec4 tmpvar_12;
  tmpvar_12 = (((tmpvar_8 + (tmpvar_10 * -0.161616)) + (tmpvar_11 * 0.0083333)) + ((tmpvar_11 * tmpvar_9) * -0.00019841));
  highp vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * tmpvar_12);
  highp vec4 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * tmpvar_13);
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_7.y = 0.0;
  waveMove_7.x = dot (tmpvar_15, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_7.z = dot (tmpvar_15, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_4.xz = (_glesVertex.xz - (waveMove_7.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_14, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_6 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = (vertex_4.xyz - _CameraPosition.xyz);
  highp float tmpvar_18;
  tmpvar_18 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_17, tmpvar_17))) * _CameraPosition.w), 0.0, 1.0);
  color_5.w = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.xyz = ((2.0 * waveColor_6) * _glesColor.xyz);
  tmpvar_19.w = color_5.w;
  mat3 tmpvar_20;
  tmpvar_20[0] = _Object2World[0].xyz;
  tmpvar_20[1] = _Object2World[1].xyz;
  tmpvar_20[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  mediump vec3 tmpvar_23;
  mediump vec4 normal_24;
  normal_24 = tmpvar_22;
  highp float vC_25;
  mediump vec3 x3_26;
  mediump vec3 x2_27;
  mediump vec3 x1_28;
  highp float tmpvar_29;
  tmpvar_29 = dot (unity_SHAr, normal_24);
  x1_28.x = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = dot (unity_SHAg, normal_24);
  x1_28.y = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = dot (unity_SHAb, normal_24);
  x1_28.z = tmpvar_31;
  mediump vec4 tmpvar_32;
  tmpvar_32 = (normal_24.xyzz * normal_24.yzzx);
  highp float tmpvar_33;
  tmpvar_33 = dot (unity_SHBr, tmpvar_32);
  x2_27.x = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = dot (unity_SHBg, tmpvar_32);
  x2_27.y = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = dot (unity_SHBb, tmpvar_32);
  x2_27.z = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = ((normal_24.x * normal_24.x) - (normal_24.y * normal_24.y));
  vC_25 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = (unity_SHC.xyz * vC_25);
  x3_26 = tmpvar_37;
  tmpvar_23 = ((x1_28 + x2_27) + x3_26);
  shlight_1 = tmpvar_23;
  tmpvar_3 = shlight_1;
  highp vec3 tmpvar_38;
  tmpvar_38 = (_Object2World * vertex_4).xyz;
  highp vec4 tmpvar_39;
  tmpvar_39 = (unity_4LightPosX0 - tmpvar_38.x);
  highp vec4 tmpvar_40;
  tmpvar_40 = (unity_4LightPosY0 - tmpvar_38.y);
  highp vec4 tmpvar_41;
  tmpvar_41 = (unity_4LightPosZ0 - tmpvar_38.z);
  highp vec4 tmpvar_42;
  tmpvar_42 = (((tmpvar_39 * tmpvar_39) + (tmpvar_40 * tmpvar_40)) + (tmpvar_41 * tmpvar_41));
  highp vec4 tmpvar_43;
  tmpvar_43 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_39 * tmpvar_21.x) + (tmpvar_40 * tmpvar_21.y)) + (tmpvar_41 * tmpvar_21.z)) * inversesqrt(tmpvar_42))) * (1.0/((1.0 + (tmpvar_42 * unity_4LightAtten0)))));
  highp vec3 tmpvar_44;
  tmpvar_44 = (tmpvar_3 + ((((unity_LightColor[0].xyz * tmpvar_43.x) + (unity_LightColor[1].xyz * tmpvar_43.y)) + (unity_LightColor[2].xyz * tmpvar_43.z)) + (unity_LightColor[3].xyz * tmpvar_43.w)));
  tmpvar_3 = tmpvar_44;
  gl_Position = (glstate_matrix_mvp * vertex_4);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * vertex_4));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_3;
  x_3 = (tmpvar_2.w - _Cutoff);
  if ((x_3 < 0.0)) {
    discard;
  };
  lowp float shadow_4;
  lowp float tmpvar_5;
  tmpvar_5 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD3.xyz);
  highp float tmpvar_6;
  tmpvar_6 = (_LightShadowData.x + (tmpvar_5 * (1.0 - _LightShadowData.x)));
  shadow_4 = tmpvar_6;
  lowp vec4 c_7;
  c_7.xyz = ((tmpvar_2.xyz * _LightColor0.xyz) * ((max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz)) * shadow_4) * 2.0));
  c_7.w = (tmpvar_2.w * xlv_COLOR0.w);
  c_1.w = c_7.w;
  c_1.xyz = (c_7.xyz + (tmpvar_2.xyz * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp vec4 vertex_4;
  vertex_4.yw = _glesVertex.yw;
  lowp vec4 color_5;
  color_5.xyz = _glesColor.xyz;
  lowp vec3 waveColor_6;
  highp vec3 waveMove_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_8);
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_9);
  highp vec4 tmpvar_12;
  tmpvar_12 = (((tmpvar_8 + (tmpvar_10 * -0.161616)) + (tmpvar_11 * 0.0083333)) + ((tmpvar_11 * tmpvar_9) * -0.00019841));
  highp vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * tmpvar_12);
  highp vec4 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * tmpvar_13);
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_7.y = 0.0;
  waveMove_7.x = dot (tmpvar_15, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_7.z = dot (tmpvar_15, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_4.xz = (_glesVertex.xz - (waveMove_7.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_14, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_6 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = (vertex_4.xyz - _CameraPosition.xyz);
  highp float tmpvar_18;
  tmpvar_18 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_17, tmpvar_17))) * _CameraPosition.w), 0.0, 1.0);
  color_5.w = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.xyz = ((2.0 * waveColor_6) * _glesColor.xyz);
  tmpvar_19.w = color_5.w;
  mat3 tmpvar_20;
  tmpvar_20[0] = _Object2World[0].xyz;
  tmpvar_20[1] = _Object2World[1].xyz;
  tmpvar_20[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  mediump vec3 tmpvar_23;
  mediump vec4 normal_24;
  normal_24 = tmpvar_22;
  highp float vC_25;
  mediump vec3 x3_26;
  mediump vec3 x2_27;
  mediump vec3 x1_28;
  highp float tmpvar_29;
  tmpvar_29 = dot (unity_SHAr, normal_24);
  x1_28.x = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = dot (unity_SHAg, normal_24);
  x1_28.y = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = dot (unity_SHAb, normal_24);
  x1_28.z = tmpvar_31;
  mediump vec4 tmpvar_32;
  tmpvar_32 = (normal_24.xyzz * normal_24.yzzx);
  highp float tmpvar_33;
  tmpvar_33 = dot (unity_SHBr, tmpvar_32);
  x2_27.x = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = dot (unity_SHBg, tmpvar_32);
  x2_27.y = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = dot (unity_SHBb, tmpvar_32);
  x2_27.z = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = ((normal_24.x * normal_24.x) - (normal_24.y * normal_24.y));
  vC_25 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = (unity_SHC.xyz * vC_25);
  x3_26 = tmpvar_37;
  tmpvar_23 = ((x1_28 + x2_27) + x3_26);
  shlight_1 = tmpvar_23;
  tmpvar_3 = shlight_1;
  highp vec3 tmpvar_38;
  tmpvar_38 = (_Object2World * vertex_4).xyz;
  highp vec4 tmpvar_39;
  tmpvar_39 = (unity_4LightPosX0 - tmpvar_38.x);
  highp vec4 tmpvar_40;
  tmpvar_40 = (unity_4LightPosY0 - tmpvar_38.y);
  highp vec4 tmpvar_41;
  tmpvar_41 = (unity_4LightPosZ0 - tmpvar_38.z);
  highp vec4 tmpvar_42;
  tmpvar_42 = (((tmpvar_39 * tmpvar_39) + (tmpvar_40 * tmpvar_40)) + (tmpvar_41 * tmpvar_41));
  highp vec4 tmpvar_43;
  tmpvar_43 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_39 * tmpvar_21.x) + (tmpvar_40 * tmpvar_21.y)) + (tmpvar_41 * tmpvar_21.z)) * inversesqrt(tmpvar_42))) * (1.0/((1.0 + (tmpvar_42 * unity_4LightAtten0)))));
  highp vec3 tmpvar_44;
  tmpvar_44 = (tmpvar_3 + ((((unity_LightColor[0].xyz * tmpvar_43.x) + (unity_LightColor[1].xyz * tmpvar_43.y)) + (unity_LightColor[2].xyz * tmpvar_43.z)) + (unity_LightColor[3].xyz * tmpvar_43.w)));
  tmpvar_3 = tmpvar_44;
  gl_Position = (glstate_matrix_mvp * vertex_4);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * vertex_4));
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_3;
  x_3 = (tmpvar_2.w - _Cutoff);
  if ((x_3 < 0.0)) {
    discard;
  };
  lowp float shadow_4;
  mediump float tmpvar_5;
  tmpvar_5 = texture (_ShadowMapTexture, xlv_TEXCOORD3.xyz);
  shadow_4 = tmpvar_5;
  highp float tmpvar_6;
  tmpvar_6 = (_LightShadowData.x + (shadow_4 * (1.0 - _LightShadowData.x)));
  shadow_4 = tmpvar_6;
  lowp vec4 c_7;
  c_7.xyz = ((tmpvar_2.xyz * _LightColor0.xyz) * ((max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz)) * shadow_4) * 2.0));
  c_7.w = (tmpvar_2.w * xlv_COLOR0.w);
  c_1.w = c_7.w;
  c_1.xyz = (c_7.xyz + (tmpvar_2.xyz * xlv_TEXCOORD2));
  _glesFragData[0] = c_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES3"
}
}
 }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardAdd" "QUEUE"="Geometry+200" "IGNOREPROJECTOR"="true" "RenderType"="Grass" }
  ZWrite Off
  Cull Off
  Fog {
   Color (0,0,0,0)
  }
  Blend One One
  ColorMask RGB
Program "vp" {
SubProgram "gles " {
Keywords { "POINT" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 vertex_3;
  vertex_3.yw = _glesVertex.yw;
  lowp vec4 color_4;
  color_4.xyz = _glesColor.xyz;
  lowp vec3 waveColor_5;
  highp vec3 waveMove_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_7);
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_7);
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_8);
  highp vec4 tmpvar_11;
  tmpvar_11 = (((tmpvar_7 + (tmpvar_9 * -0.161616)) + (tmpvar_10 * 0.0083333)) + ((tmpvar_10 * tmpvar_8) * -0.00019841));
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * tmpvar_11);
  highp vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * tmpvar_12);
  highp vec4 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_6.y = 0.0;
  waveMove_6.x = dot (tmpvar_14, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_6.z = dot (tmpvar_14, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_3.xz = (_glesVertex.xz - (waveMove_6.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_15;
  tmpvar_15 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_13, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_5 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (vertex_3.xyz - _CameraPosition.xyz);
  highp float tmpvar_17;
  tmpvar_17 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_16, tmpvar_16))) * _CameraPosition.w), 0.0, 1.0);
  color_4.w = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.xyz = ((2.0 * waveColor_5) * _glesColor.xyz);
  tmpvar_18.w = color_4.w;
  mat3 tmpvar_19;
  tmpvar_19[0] = _Object2World[0].xyz;
  tmpvar_19[1] = _Object2World[1].xyz;
  tmpvar_19[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (_WorldSpaceLightPos0.xyz - (_Object2World * vertex_3).xyz);
  tmpvar_2 = tmpvar_21;
  gl_Position = (glstate_matrix_mvp * vertex_3);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * vertex_3)).xyz;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_4;
  x_4 = (tmpvar_3.w - _Cutoff);
  if ((x_4 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_5;
  highp float tmpvar_6;
  tmpvar_6 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 c_7;
  c_7.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * ((max (0.0, dot (xlv_TEXCOORD1, lightDir_2)) * texture2D (_LightTexture0, vec2(tmpvar_6)).w) * 2.0));
  c_7.w = (tmpvar_3.w * xlv_COLOR0.w);
  c_1.xyz = c_7.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 vertex_3;
  vertex_3.yw = _glesVertex.yw;
  lowp vec4 color_4;
  color_4.xyz = _glesColor.xyz;
  lowp vec3 waveColor_5;
  highp vec3 waveMove_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_7);
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_7);
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_8);
  highp vec4 tmpvar_11;
  tmpvar_11 = (((tmpvar_7 + (tmpvar_9 * -0.161616)) + (tmpvar_10 * 0.0083333)) + ((tmpvar_10 * tmpvar_8) * -0.00019841));
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * tmpvar_11);
  highp vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * tmpvar_12);
  highp vec4 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_6.y = 0.0;
  waveMove_6.x = dot (tmpvar_14, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_6.z = dot (tmpvar_14, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_3.xz = (_glesVertex.xz - (waveMove_6.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_15;
  tmpvar_15 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_13, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_5 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (vertex_3.xyz - _CameraPosition.xyz);
  highp float tmpvar_17;
  tmpvar_17 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_16, tmpvar_16))) * _CameraPosition.w), 0.0, 1.0);
  color_4.w = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.xyz = ((2.0 * waveColor_5) * _glesColor.xyz);
  tmpvar_18.w = color_4.w;
  mat3 tmpvar_19;
  tmpvar_19[0] = _Object2World[0].xyz;
  tmpvar_19[1] = _Object2World[1].xyz;
  tmpvar_19[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (_WorldSpaceLightPos0.xyz - (_Object2World * vertex_3).xyz);
  tmpvar_2 = tmpvar_21;
  gl_Position = (glstate_matrix_mvp * vertex_3);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * vertex_3)).xyz;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_4;
  x_4 = (tmpvar_3.w - _Cutoff);
  if ((x_4 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_5;
  highp float tmpvar_6;
  tmpvar_6 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 c_7;
  c_7.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * ((max (0.0, dot (xlv_TEXCOORD1, lightDir_2)) * texture (_LightTexture0, vec2(tmpvar_6)).w) * 2.0));
  c_7.w = (tmpvar_3.w * xlv_COLOR0.w);
  c_1.xyz = c_7.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 vertex_3;
  vertex_3.yw = _glesVertex.yw;
  lowp vec4 color_4;
  color_4.xyz = _glesColor.xyz;
  lowp vec3 waveColor_5;
  highp vec3 waveMove_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_7);
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_7);
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_8);
  highp vec4 tmpvar_11;
  tmpvar_11 = (((tmpvar_7 + (tmpvar_9 * -0.161616)) + (tmpvar_10 * 0.0083333)) + ((tmpvar_10 * tmpvar_8) * -0.00019841));
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * tmpvar_11);
  highp vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * tmpvar_12);
  highp vec4 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_6.y = 0.0;
  waveMove_6.x = dot (tmpvar_14, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_6.z = dot (tmpvar_14, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_3.xz = (_glesVertex.xz - (waveMove_6.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_15;
  tmpvar_15 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_13, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_5 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (vertex_3.xyz - _CameraPosition.xyz);
  highp float tmpvar_17;
  tmpvar_17 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_16, tmpvar_16))) * _CameraPosition.w), 0.0, 1.0);
  color_4.w = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.xyz = ((2.0 * waveColor_5) * _glesColor.xyz);
  tmpvar_18.w = color_4.w;
  mat3 tmpvar_19;
  tmpvar_19[0] = _Object2World[0].xyz;
  tmpvar_19[1] = _Object2World[1].xyz;
  tmpvar_19[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = _WorldSpaceLightPos0.xyz;
  tmpvar_2 = tmpvar_21;
  gl_Position = (glstate_matrix_mvp * vertex_3);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_4;
  x_4 = (tmpvar_3.w - _Cutoff);
  if ((x_4 < 0.0)) {
    discard;
  };
  lightDir_2 = xlv_TEXCOORD2;
  lowp vec4 c_5;
  c_5.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * (max (0.0, dot (xlv_TEXCOORD1, lightDir_2)) * 2.0));
  c_5.w = (tmpvar_3.w * xlv_COLOR0.w);
  c_1.xyz = c_5.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 vertex_3;
  vertex_3.yw = _glesVertex.yw;
  lowp vec4 color_4;
  color_4.xyz = _glesColor.xyz;
  lowp vec3 waveColor_5;
  highp vec3 waveMove_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_7);
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_7);
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_8);
  highp vec4 tmpvar_11;
  tmpvar_11 = (((tmpvar_7 + (tmpvar_9 * -0.161616)) + (tmpvar_10 * 0.0083333)) + ((tmpvar_10 * tmpvar_8) * -0.00019841));
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * tmpvar_11);
  highp vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * tmpvar_12);
  highp vec4 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_6.y = 0.0;
  waveMove_6.x = dot (tmpvar_14, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_6.z = dot (tmpvar_14, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_3.xz = (_glesVertex.xz - (waveMove_6.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_15;
  tmpvar_15 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_13, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_5 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (vertex_3.xyz - _CameraPosition.xyz);
  highp float tmpvar_17;
  tmpvar_17 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_16, tmpvar_16))) * _CameraPosition.w), 0.0, 1.0);
  color_4.w = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.xyz = ((2.0 * waveColor_5) * _glesColor.xyz);
  tmpvar_18.w = color_4.w;
  mat3 tmpvar_19;
  tmpvar_19[0] = _Object2World[0].xyz;
  tmpvar_19[1] = _Object2World[1].xyz;
  tmpvar_19[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = _WorldSpaceLightPos0.xyz;
  tmpvar_2 = tmpvar_21;
  gl_Position = (glstate_matrix_mvp * vertex_3);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_4;
  x_4 = (tmpvar_3.w - _Cutoff);
  if ((x_4 < 0.0)) {
    discard;
  };
  lightDir_2 = xlv_TEXCOORD2;
  lowp vec4 c_5;
  c_5.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * (max (0.0, dot (xlv_TEXCOORD1, lightDir_2)) * 2.0));
  c_5.w = (tmpvar_3.w * xlv_COLOR0.w);
  c_1.xyz = c_5.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 vertex_3;
  vertex_3.yw = _glesVertex.yw;
  lowp vec4 color_4;
  color_4.xyz = _glesColor.xyz;
  lowp vec3 waveColor_5;
  highp vec3 waveMove_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_7);
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_7);
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_8);
  highp vec4 tmpvar_11;
  tmpvar_11 = (((tmpvar_7 + (tmpvar_9 * -0.161616)) + (tmpvar_10 * 0.0083333)) + ((tmpvar_10 * tmpvar_8) * -0.00019841));
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * tmpvar_11);
  highp vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * tmpvar_12);
  highp vec4 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_6.y = 0.0;
  waveMove_6.x = dot (tmpvar_14, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_6.z = dot (tmpvar_14, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_3.xz = (_glesVertex.xz - (waveMove_6.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_15;
  tmpvar_15 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_13, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_5 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (vertex_3.xyz - _CameraPosition.xyz);
  highp float tmpvar_17;
  tmpvar_17 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_16, tmpvar_16))) * _CameraPosition.w), 0.0, 1.0);
  color_4.w = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.xyz = ((2.0 * waveColor_5) * _glesColor.xyz);
  tmpvar_18.w = color_4.w;
  mat3 tmpvar_19;
  tmpvar_19[0] = _Object2World[0].xyz;
  tmpvar_19[1] = _Object2World[1].xyz;
  tmpvar_19[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (_WorldSpaceLightPos0.xyz - (_Object2World * vertex_3).xyz);
  tmpvar_2 = tmpvar_21;
  gl_Position = (glstate_matrix_mvp * vertex_3);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * vertex_3));
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_4;
  x_4 = (tmpvar_3.w - _Cutoff);
  if ((x_4 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_5;
  highp vec2 P_6;
  P_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  highp float tmpvar_7;
  tmpvar_7 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp float atten_8;
  atten_8 = ((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, P_6).w) * texture2D (_LightTextureB0, vec2(tmpvar_7)).w);
  lowp vec4 c_9;
  c_9.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * ((max (0.0, dot (xlv_TEXCOORD1, lightDir_2)) * atten_8) * 2.0));
  c_9.w = (tmpvar_3.w * xlv_COLOR0.w);
  c_1.xyz = c_9.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 vertex_3;
  vertex_3.yw = _glesVertex.yw;
  lowp vec4 color_4;
  color_4.xyz = _glesColor.xyz;
  lowp vec3 waveColor_5;
  highp vec3 waveMove_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_7);
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_7);
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_8);
  highp vec4 tmpvar_11;
  tmpvar_11 = (((tmpvar_7 + (tmpvar_9 * -0.161616)) + (tmpvar_10 * 0.0083333)) + ((tmpvar_10 * tmpvar_8) * -0.00019841));
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * tmpvar_11);
  highp vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * tmpvar_12);
  highp vec4 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_6.y = 0.0;
  waveMove_6.x = dot (tmpvar_14, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_6.z = dot (tmpvar_14, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_3.xz = (_glesVertex.xz - (waveMove_6.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_15;
  tmpvar_15 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_13, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_5 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (vertex_3.xyz - _CameraPosition.xyz);
  highp float tmpvar_17;
  tmpvar_17 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_16, tmpvar_16))) * _CameraPosition.w), 0.0, 1.0);
  color_4.w = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.xyz = ((2.0 * waveColor_5) * _glesColor.xyz);
  tmpvar_18.w = color_4.w;
  mat3 tmpvar_19;
  tmpvar_19[0] = _Object2World[0].xyz;
  tmpvar_19[1] = _Object2World[1].xyz;
  tmpvar_19[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (_WorldSpaceLightPos0.xyz - (_Object2World * vertex_3).xyz);
  tmpvar_2 = tmpvar_21;
  gl_Position = (glstate_matrix_mvp * vertex_3);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * vertex_3));
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_4;
  x_4 = (tmpvar_3.w - _Cutoff);
  if ((x_4 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_5;
  highp vec2 P_6;
  P_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  highp float tmpvar_7;
  tmpvar_7 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp float atten_8;
  atten_8 = ((float((xlv_TEXCOORD3.z > 0.0)) * texture (_LightTexture0, P_6).w) * texture (_LightTextureB0, vec2(tmpvar_7)).w);
  lowp vec4 c_9;
  c_9.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * ((max (0.0, dot (xlv_TEXCOORD1, lightDir_2)) * atten_8) * 2.0));
  c_9.w = (tmpvar_3.w * xlv_COLOR0.w);
  c_1.xyz = c_9.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 vertex_3;
  vertex_3.yw = _glesVertex.yw;
  lowp vec4 color_4;
  color_4.xyz = _glesColor.xyz;
  lowp vec3 waveColor_5;
  highp vec3 waveMove_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_7);
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_7);
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_8);
  highp vec4 tmpvar_11;
  tmpvar_11 = (((tmpvar_7 + (tmpvar_9 * -0.161616)) + (tmpvar_10 * 0.0083333)) + ((tmpvar_10 * tmpvar_8) * -0.00019841));
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * tmpvar_11);
  highp vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * tmpvar_12);
  highp vec4 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_6.y = 0.0;
  waveMove_6.x = dot (tmpvar_14, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_6.z = dot (tmpvar_14, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_3.xz = (_glesVertex.xz - (waveMove_6.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_15;
  tmpvar_15 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_13, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_5 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (vertex_3.xyz - _CameraPosition.xyz);
  highp float tmpvar_17;
  tmpvar_17 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_16, tmpvar_16))) * _CameraPosition.w), 0.0, 1.0);
  color_4.w = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.xyz = ((2.0 * waveColor_5) * _glesColor.xyz);
  tmpvar_18.w = color_4.w;
  mat3 tmpvar_19;
  tmpvar_19[0] = _Object2World[0].xyz;
  tmpvar_19[1] = _Object2World[1].xyz;
  tmpvar_19[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (_WorldSpaceLightPos0.xyz - (_Object2World * vertex_3).xyz);
  tmpvar_2 = tmpvar_21;
  gl_Position = (glstate_matrix_mvp * vertex_3);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * vertex_3)).xyz;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_4;
  x_4 = (tmpvar_3.w - _Cutoff);
  if ((x_4 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_5;
  highp float tmpvar_6;
  tmpvar_6 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 c_7;
  c_7.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * ((max (0.0, dot (xlv_TEXCOORD1, lightDir_2)) * (texture2D (_LightTextureB0, vec2(tmpvar_6)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w)) * 2.0));
  c_7.w = (tmpvar_3.w * xlv_COLOR0.w);
  c_1.xyz = c_7.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 vertex_3;
  vertex_3.yw = _glesVertex.yw;
  lowp vec4 color_4;
  color_4.xyz = _glesColor.xyz;
  lowp vec3 waveColor_5;
  highp vec3 waveMove_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_7);
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_7);
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_8);
  highp vec4 tmpvar_11;
  tmpvar_11 = (((tmpvar_7 + (tmpvar_9 * -0.161616)) + (tmpvar_10 * 0.0083333)) + ((tmpvar_10 * tmpvar_8) * -0.00019841));
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * tmpvar_11);
  highp vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * tmpvar_12);
  highp vec4 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_6.y = 0.0;
  waveMove_6.x = dot (tmpvar_14, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_6.z = dot (tmpvar_14, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_3.xz = (_glesVertex.xz - (waveMove_6.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_15;
  tmpvar_15 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_13, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_5 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (vertex_3.xyz - _CameraPosition.xyz);
  highp float tmpvar_17;
  tmpvar_17 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_16, tmpvar_16))) * _CameraPosition.w), 0.0, 1.0);
  color_4.w = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.xyz = ((2.0 * waveColor_5) * _glesColor.xyz);
  tmpvar_18.w = color_4.w;
  mat3 tmpvar_19;
  tmpvar_19[0] = _Object2World[0].xyz;
  tmpvar_19[1] = _Object2World[1].xyz;
  tmpvar_19[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (_WorldSpaceLightPos0.xyz - (_Object2World * vertex_3).xyz);
  tmpvar_2 = tmpvar_21;
  gl_Position = (glstate_matrix_mvp * vertex_3);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * vertex_3)).xyz;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_4;
  x_4 = (tmpvar_3.w - _Cutoff);
  if ((x_4 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_5;
  highp float tmpvar_6;
  tmpvar_6 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 c_7;
  c_7.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * ((max (0.0, dot (xlv_TEXCOORD1, lightDir_2)) * (texture (_LightTextureB0, vec2(tmpvar_6)).w * texture (_LightTexture0, xlv_TEXCOORD3).w)) * 2.0));
  c_7.w = (tmpvar_3.w * xlv_COLOR0.w);
  c_1.xyz = c_7.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 vertex_3;
  vertex_3.yw = _glesVertex.yw;
  lowp vec4 color_4;
  color_4.xyz = _glesColor.xyz;
  lowp vec3 waveColor_5;
  highp vec3 waveMove_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_7);
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_7);
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_8);
  highp vec4 tmpvar_11;
  tmpvar_11 = (((tmpvar_7 + (tmpvar_9 * -0.161616)) + (tmpvar_10 * 0.0083333)) + ((tmpvar_10 * tmpvar_8) * -0.00019841));
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * tmpvar_11);
  highp vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * tmpvar_12);
  highp vec4 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_6.y = 0.0;
  waveMove_6.x = dot (tmpvar_14, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_6.z = dot (tmpvar_14, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_3.xz = (_glesVertex.xz - (waveMove_6.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_15;
  tmpvar_15 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_13, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_5 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (vertex_3.xyz - _CameraPosition.xyz);
  highp float tmpvar_17;
  tmpvar_17 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_16, tmpvar_16))) * _CameraPosition.w), 0.0, 1.0);
  color_4.w = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.xyz = ((2.0 * waveColor_5) * _glesColor.xyz);
  tmpvar_18.w = color_4.w;
  mat3 tmpvar_19;
  tmpvar_19[0] = _Object2World[0].xyz;
  tmpvar_19[1] = _Object2World[1].xyz;
  tmpvar_19[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = _WorldSpaceLightPos0.xyz;
  tmpvar_2 = tmpvar_21;
  gl_Position = (glstate_matrix_mvp * vertex_3);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * vertex_3)).xy;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_4;
  x_4 = (tmpvar_3.w - _Cutoff);
  if ((x_4 < 0.0)) {
    discard;
  };
  lightDir_2 = xlv_TEXCOORD2;
  lowp vec4 c_5;
  c_5.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * ((max (0.0, dot (xlv_TEXCOORD1, lightDir_2)) * texture2D (_LightTexture0, xlv_TEXCOORD3).w) * 2.0));
  c_5.w = (tmpvar_3.w * xlv_COLOR0.w);
  c_1.xyz = c_5.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 vertex_3;
  vertex_3.yw = _glesVertex.yw;
  lowp vec4 color_4;
  color_4.xyz = _glesColor.xyz;
  lowp vec3 waveColor_5;
  highp vec3 waveMove_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_7);
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_7);
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_8);
  highp vec4 tmpvar_11;
  tmpvar_11 = (((tmpvar_7 + (tmpvar_9 * -0.161616)) + (tmpvar_10 * 0.0083333)) + ((tmpvar_10 * tmpvar_8) * -0.00019841));
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * tmpvar_11);
  highp vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * tmpvar_12);
  highp vec4 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_6.y = 0.0;
  waveMove_6.x = dot (tmpvar_14, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_6.z = dot (tmpvar_14, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_3.xz = (_glesVertex.xz - (waveMove_6.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_15;
  tmpvar_15 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_13, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_5 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (vertex_3.xyz - _CameraPosition.xyz);
  highp float tmpvar_17;
  tmpvar_17 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_16, tmpvar_16))) * _CameraPosition.w), 0.0, 1.0);
  color_4.w = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.xyz = ((2.0 * waveColor_5) * _glesColor.xyz);
  tmpvar_18.w = color_4.w;
  mat3 tmpvar_19;
  tmpvar_19[0] = _Object2World[0].xyz;
  tmpvar_19[1] = _Object2World[1].xyz;
  tmpvar_19[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = _WorldSpaceLightPos0.xyz;
  tmpvar_2 = tmpvar_21;
  gl_Position = (glstate_matrix_mvp * vertex_3);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * vertex_3)).xy;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_4;
  x_4 = (tmpvar_3.w - _Cutoff);
  if ((x_4 < 0.0)) {
    discard;
  };
  lightDir_2 = xlv_TEXCOORD2;
  lowp vec4 c_5;
  c_5.xyz = ((tmpvar_3.xyz * _LightColor0.xyz) * ((max (0.0, dot (xlv_TEXCOORD1, lightDir_2)) * texture (_LightTexture0, xlv_TEXCOORD3).w) * 2.0));
  c_5.w = (tmpvar_3.w * xlv_COLOR0.w);
  c_1.xyz = c_5.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "POINT" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3"
}
}
 }
 Pass {
  Name "PREPASS"
  Tags { "LIGHTMODE"="PrePassBase" "QUEUE"="Geometry+200" "IGNOREPROJECTOR"="true" "RenderType"="Grass" }
  Cull Off
  Fog { Mode Off }
  ColorMask RGB
Program "vp" {
SubProgram "gles " {
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec3 tmpvar_1;
  highp vec4 vertex_2;
  vertex_2.yw = _glesVertex.yw;
  lowp vec4 color_3;
  color_3.xyz = _glesColor.xyz;
  lowp vec3 waveColor_4;
  highp vec3 waveMove_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_6);
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_6);
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_7);
  highp vec4 tmpvar_10;
  tmpvar_10 = (((tmpvar_6 + (tmpvar_8 * -0.161616)) + (tmpvar_9 * 0.0083333)) + ((tmpvar_9 * tmpvar_7) * -0.00019841));
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * tmpvar_11);
  highp vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_5.y = 0.0;
  waveMove_5.x = dot (tmpvar_13, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_5.z = dot (tmpvar_13, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_2.xz = (_glesVertex.xz - (waveMove_5.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_14;
  tmpvar_14 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_12, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_4 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = (vertex_2.xyz - _CameraPosition.xyz);
  highp float tmpvar_16;
  tmpvar_16 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_15, tmpvar_15))) * _CameraPosition.w), 0.0, 1.0);
  color_3.w = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.xyz = ((2.0 * waveColor_4) * _glesColor.xyz);
  tmpvar_17.w = color_3.w;
  mat3 tmpvar_18;
  tmpvar_18[0] = _Object2World[0].xyz;
  tmpvar_18[1] = _Object2World[1].xyz;
  tmpvar_18[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_19;
  gl_Position = (glstate_matrix_mvp * vertex_2);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_17;
  xlv_TEXCOORD1 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 res_1;
  lowp float x_2;
  x_2 = ((texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0).w - _Cutoff);
  if ((x_2 < 0.0)) {
    discard;
  };
  res_1.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
  res_1.w = 0.0;
  gl_FragData[0] = res_1;
}



#endif"
}
SubProgram "gles3 " {
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec3 tmpvar_1;
  highp vec4 vertex_2;
  vertex_2.yw = _glesVertex.yw;
  lowp vec4 color_3;
  color_3.xyz = _glesColor.xyz;
  lowp vec3 waveColor_4;
  highp vec3 waveMove_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_6);
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_6);
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_7);
  highp vec4 tmpvar_10;
  tmpvar_10 = (((tmpvar_6 + (tmpvar_8 * -0.161616)) + (tmpvar_9 * 0.0083333)) + ((tmpvar_9 * tmpvar_7) * -0.00019841));
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * tmpvar_11);
  highp vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_5.y = 0.0;
  waveMove_5.x = dot (tmpvar_13, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_5.z = dot (tmpvar_13, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_2.xz = (_glesVertex.xz - (waveMove_5.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_14;
  tmpvar_14 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_12, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_4 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = (vertex_2.xyz - _CameraPosition.xyz);
  highp float tmpvar_16;
  tmpvar_16 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_15, tmpvar_15))) * _CameraPosition.w), 0.0, 1.0);
  color_3.w = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.xyz = ((2.0 * waveColor_4) * _glesColor.xyz);
  tmpvar_17.w = color_3.w;
  mat3 tmpvar_18;
  tmpvar_18[0] = _Object2World[0].xyz;
  tmpvar_18[1] = _Object2World[1].xyz;
  tmpvar_18[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_19;
  gl_Position = (glstate_matrix_mvp * vertex_2);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_17;
  xlv_TEXCOORD1 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 res_1;
  lowp float x_2;
  x_2 = ((texture (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0).w - _Cutoff);
  if ((x_2 < 0.0)) {
    discard;
  };
  res_1.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
  res_1.w = 0.0;
  _glesFragData[0] = res_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
"!!GLES"
}
SubProgram "gles3 " {
"!!GLES3"
}
}
 }
 Pass {
  Name "PREPASS"
  Tags { "LIGHTMODE"="PrePassFinal" "QUEUE"="Geometry+200" "IGNOREPROJECTOR"="true" "RenderType"="Grass" }
  ZWrite Off
  Cull Off
  ColorMask RGB
Program "vp" {
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 vertex_2;
  vertex_2.yw = _glesVertex.yw;
  lowp vec4 color_3;
  color_3.xyz = _glesColor.xyz;
  lowp vec3 waveColor_4;
  highp vec3 waveMove_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_6);
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_6);
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_7);
  highp vec4 tmpvar_10;
  tmpvar_10 = (((tmpvar_6 + (tmpvar_8 * -0.161616)) + (tmpvar_9 * 0.0083333)) + ((tmpvar_9 * tmpvar_7) * -0.00019841));
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * tmpvar_11);
  highp vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_5.y = 0.0;
  waveMove_5.x = dot (tmpvar_13, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_5.z = dot (tmpvar_13, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_2.xz = (_glesVertex.xz - (waveMove_5.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_14;
  tmpvar_14 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_12, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_4 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = (vertex_2.xyz - _CameraPosition.xyz);
  highp float tmpvar_16;
  tmpvar_16 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_15, tmpvar_15))) * _CameraPosition.w), 0.0, 1.0);
  color_3.w = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.xyz = ((2.0 * waveColor_4) * _glesColor.xyz);
  tmpvar_17.w = color_3.w;
  highp vec4 tmpvar_18;
  tmpvar_18 = (glstate_matrix_mvp * vertex_2);
  highp vec4 o_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * 0.5);
  highp vec2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (tmpvar_20.y * _ProjectionParams.x);
  o_19.xy = (tmpvar_21 + tmpvar_20.w);
  o_19.zw = tmpvar_18.zw;
  mat3 tmpvar_22;
  tmpvar_22[0] = _Object2World[0].xyz;
  tmpvar_22[1] = _Object2World[1].xyz;
  tmpvar_22[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = (tmpvar_22 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_24;
  mediump vec4 normal_25;
  normal_25 = tmpvar_23;
  highp float vC_26;
  mediump vec3 x3_27;
  mediump vec3 x2_28;
  mediump vec3 x1_29;
  highp float tmpvar_30;
  tmpvar_30 = dot (unity_SHAr, normal_25);
  x1_29.x = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = dot (unity_SHAg, normal_25);
  x1_29.y = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = dot (unity_SHAb, normal_25);
  x1_29.z = tmpvar_32;
  mediump vec4 tmpvar_33;
  tmpvar_33 = (normal_25.xyzz * normal_25.yzzx);
  highp float tmpvar_34;
  tmpvar_34 = dot (unity_SHBr, tmpvar_33);
  x2_28.x = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = dot (unity_SHBg, tmpvar_33);
  x2_28.y = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = dot (unity_SHBb, tmpvar_33);
  x2_28.z = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = ((normal_25.x * normal_25.x) - (normal_25.y * normal_25.y));
  vC_26 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = (unity_SHC.xyz * vC_26);
  x3_27 = tmpvar_38;
  tmpvar_24 = ((x1_29 + x2_28) + x3_27);
  tmpvar_1 = tmpvar_24;
  gl_Position = tmpvar_18;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_17;
  xlv_TEXCOORD1 = o_19;
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _LightBuffer;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_5;
  x_5 = (tmpvar_4.w - _Cutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_6;
  mediump vec4 tmpvar_7;
  tmpvar_7 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_7.w;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7.xyz + xlv_TEXCOORD2);
  light_3.xyz = tmpvar_8;
  lowp vec4 c_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_4.xyz * light_3.xyz);
  c_9.xyz = tmpvar_10;
  c_9.w = (tmpvar_4.w * xlv_COLOR0.w);
  c_2 = c_9;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 vertex_2;
  vertex_2.yw = _glesVertex.yw;
  lowp vec4 color_3;
  color_3.xyz = _glesColor.xyz;
  lowp vec3 waveColor_4;
  highp vec3 waveMove_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_6);
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_6);
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_7);
  highp vec4 tmpvar_10;
  tmpvar_10 = (((tmpvar_6 + (tmpvar_8 * -0.161616)) + (tmpvar_9 * 0.0083333)) + ((tmpvar_9 * tmpvar_7) * -0.00019841));
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * tmpvar_11);
  highp vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_5.y = 0.0;
  waveMove_5.x = dot (tmpvar_13, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_5.z = dot (tmpvar_13, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_2.xz = (_glesVertex.xz - (waveMove_5.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_14;
  tmpvar_14 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_12, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_4 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = (vertex_2.xyz - _CameraPosition.xyz);
  highp float tmpvar_16;
  tmpvar_16 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_15, tmpvar_15))) * _CameraPosition.w), 0.0, 1.0);
  color_3.w = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.xyz = ((2.0 * waveColor_4) * _glesColor.xyz);
  tmpvar_17.w = color_3.w;
  highp vec4 tmpvar_18;
  tmpvar_18 = (glstate_matrix_mvp * vertex_2);
  highp vec4 o_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * 0.5);
  highp vec2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (tmpvar_20.y * _ProjectionParams.x);
  o_19.xy = (tmpvar_21 + tmpvar_20.w);
  o_19.zw = tmpvar_18.zw;
  mat3 tmpvar_22;
  tmpvar_22[0] = _Object2World[0].xyz;
  tmpvar_22[1] = _Object2World[1].xyz;
  tmpvar_22[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = (tmpvar_22 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_24;
  mediump vec4 normal_25;
  normal_25 = tmpvar_23;
  highp float vC_26;
  mediump vec3 x3_27;
  mediump vec3 x2_28;
  mediump vec3 x1_29;
  highp float tmpvar_30;
  tmpvar_30 = dot (unity_SHAr, normal_25);
  x1_29.x = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = dot (unity_SHAg, normal_25);
  x1_29.y = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = dot (unity_SHAb, normal_25);
  x1_29.z = tmpvar_32;
  mediump vec4 tmpvar_33;
  tmpvar_33 = (normal_25.xyzz * normal_25.yzzx);
  highp float tmpvar_34;
  tmpvar_34 = dot (unity_SHBr, tmpvar_33);
  x2_28.x = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = dot (unity_SHBg, tmpvar_33);
  x2_28.y = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = dot (unity_SHBb, tmpvar_33);
  x2_28.z = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = ((normal_25.x * normal_25.x) - (normal_25.y * normal_25.y));
  vC_26 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = (unity_SHC.xyz * vC_26);
  x3_27 = tmpvar_38;
  tmpvar_24 = ((x1_29 + x2_28) + x3_27);
  tmpvar_1 = tmpvar_24;
  gl_Position = tmpvar_18;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_17;
  xlv_TEXCOORD1 = o_19;
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _LightBuffer;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = (texture (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_5;
  x_5 = (tmpvar_4.w - _Cutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_6;
  tmpvar_6 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_6;
  mediump vec4 tmpvar_7;
  tmpvar_7 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_7.w;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7.xyz + xlv_TEXCOORD2);
  light_3.xyz = tmpvar_8;
  lowp vec4 c_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_4.xyz * light_3.xyz);
  c_9.xyz = tmpvar_10;
  c_9.w = (tmpvar_4.w * xlv_COLOR0.w);
  c_2 = c_9;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 vertex_2;
  vertex_2.yw = _glesVertex.yw;
  lowp vec4 color_3;
  color_3.xyz = _glesColor.xyz;
  lowp vec3 waveColor_4;
  highp vec3 waveMove_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_6);
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_6);
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_7);
  highp vec4 tmpvar_10;
  tmpvar_10 = (((tmpvar_6 + (tmpvar_8 * -0.161616)) + (tmpvar_9 * 0.0083333)) + ((tmpvar_9 * tmpvar_7) * -0.00019841));
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * tmpvar_11);
  highp vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_5.y = 0.0;
  waveMove_5.x = dot (tmpvar_13, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_5.z = dot (tmpvar_13, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_2.xz = (_glesVertex.xz - (waveMove_5.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_14;
  tmpvar_14 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_12, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_4 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = (vertex_2.xyz - _CameraPosition.xyz);
  highp float tmpvar_16;
  tmpvar_16 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_15, tmpvar_15))) * _CameraPosition.w), 0.0, 1.0);
  color_3.w = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.xyz = ((2.0 * waveColor_4) * _glesColor.xyz);
  tmpvar_17.w = color_3.w;
  highp vec4 tmpvar_18;
  tmpvar_18 = (glstate_matrix_mvp * vertex_2);
  highp vec4 o_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * 0.5);
  highp vec2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (tmpvar_20.y * _ProjectionParams.x);
  o_19.xy = (tmpvar_21 + tmpvar_20.w);
  o_19.zw = tmpvar_18.zw;
  tmpvar_1.xyz = (((_Object2World * vertex_2).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_1.w = (-((glstate_matrix_modelview0 * vertex_2).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_18;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_17;
  xlv_TEXCOORD1 = o_19;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec3 lmIndirect_3;
  mediump vec3 lmFull_4;
  mediump float lmFade_5;
  mediump vec4 light_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_8;
  x_8 = (tmpvar_7.w - _Cutoff);
  if ((x_8 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_6 = tmpvar_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = -(log2(max (light_6, vec4(0.001, 0.001, 0.001, 0.001))));
  light_6.w = tmpvar_10.w;
  highp float tmpvar_11;
  tmpvar_11 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * unity_LightmapFade.z) + unity_LightmapFade.w);
  lmFade_5 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lmFull_4 = tmpvar_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = (2.0 * texture2D (unity_LightmapInd, xlv_TEXCOORD2).xyz);
  lmIndirect_3 = tmpvar_13;
  light_6.xyz = (tmpvar_10.xyz + mix (lmIndirect_3, lmFull_4, vec3(clamp (lmFade_5, 0.0, 1.0))));
  lowp vec4 c_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_7.xyz * light_6.xyz);
  c_14.xyz = tmpvar_15;
  c_14.w = (tmpvar_7.w * xlv_COLOR0.w);
  c_2 = c_14;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 vertex_2;
  vertex_2.yw = _glesVertex.yw;
  lowp vec4 color_3;
  color_3.xyz = _glesColor.xyz;
  lowp vec3 waveColor_4;
  highp vec3 waveMove_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_6);
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_6);
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_7);
  highp vec4 tmpvar_10;
  tmpvar_10 = (((tmpvar_6 + (tmpvar_8 * -0.161616)) + (tmpvar_9 * 0.0083333)) + ((tmpvar_9 * tmpvar_7) * -0.00019841));
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * tmpvar_11);
  highp vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_5.y = 0.0;
  waveMove_5.x = dot (tmpvar_13, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_5.z = dot (tmpvar_13, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_2.xz = (_glesVertex.xz - (waveMove_5.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_14;
  tmpvar_14 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_12, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_4 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = (vertex_2.xyz - _CameraPosition.xyz);
  highp float tmpvar_16;
  tmpvar_16 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_15, tmpvar_15))) * _CameraPosition.w), 0.0, 1.0);
  color_3.w = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.xyz = ((2.0 * waveColor_4) * _glesColor.xyz);
  tmpvar_17.w = color_3.w;
  highp vec4 tmpvar_18;
  tmpvar_18 = (glstate_matrix_mvp * vertex_2);
  highp vec4 o_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * 0.5);
  highp vec2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (tmpvar_20.y * _ProjectionParams.x);
  o_19.xy = (tmpvar_21 + tmpvar_20.w);
  o_19.zw = tmpvar_18.zw;
  tmpvar_1.xyz = (((_Object2World * vertex_2).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_1.w = (-((glstate_matrix_modelview0 * vertex_2).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_18;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_17;
  xlv_TEXCOORD1 = o_19;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec3 lmIndirect_3;
  mediump vec3 lmFull_4;
  mediump float lmFade_5;
  mediump vec4 light_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = (texture (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_8;
  x_8 = (tmpvar_7.w - _Cutoff);
  if ((x_8 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_6 = tmpvar_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = -(log2(max (light_6, vec4(0.001, 0.001, 0.001, 0.001))));
  light_6.w = tmpvar_10.w;
  highp float tmpvar_11;
  tmpvar_11 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * unity_LightmapFade.z) + unity_LightmapFade.w);
  lmFade_5 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lmFull_4 = tmpvar_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = (2.0 * texture (unity_LightmapInd, xlv_TEXCOORD2).xyz);
  lmIndirect_3 = tmpvar_13;
  light_6.xyz = (tmpvar_10.xyz + mix (lmIndirect_3, lmFull_4, vec3(clamp (lmFade_5, 0.0, 1.0))));
  lowp vec4 c_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_7.xyz * light_6.xyz);
  c_14.xyz = tmpvar_15;
  c_14.w = (tmpvar_7.w * xlv_COLOR0.w);
  c_2 = c_14;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec4 vertex_1;
  vertex_1.yw = _glesVertex.yw;
  lowp vec4 color_2;
  color_2.xyz = _glesColor.xyz;
  lowp vec3 waveColor_3;
  highp vec3 waveMove_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * tmpvar_5);
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_5);
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_6);
  highp vec4 tmpvar_9;
  tmpvar_9 = (((tmpvar_5 + (tmpvar_7 * -0.161616)) + (tmpvar_8 * 0.0083333)) + ((tmpvar_8 * tmpvar_6) * -0.00019841));
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_4.y = 0.0;
  waveMove_4.x = dot (tmpvar_12, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_4.z = dot (tmpvar_12, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_1.xz = (_glesVertex.xz - (waveMove_4.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_13;
  tmpvar_13 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_11, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (vertex_1.xyz - _CameraPosition.xyz);
  highp float tmpvar_15;
  tmpvar_15 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_14, tmpvar_14))) * _CameraPosition.w), 0.0, 1.0);
  color_2.w = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16.xyz = ((2.0 * waveColor_3) * _glesColor.xyz);
  tmpvar_16.w = color_2.w;
  highp vec4 tmpvar_17;
  tmpvar_17 = (glstate_matrix_mvp * vertex_1);
  highp vec4 o_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_17 * 0.5);
  highp vec2 tmpvar_20;
  tmpvar_20.x = tmpvar_19.x;
  tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
  o_18.xy = (tmpvar_20 + tmpvar_19.w);
  o_18.zw = tmpvar_17.zw;
  gl_Position = tmpvar_17;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_16;
  xlv_TEXCOORD1 = o_18;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_5;
  x_5 = (tmpvar_4.w - _Cutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_6;
  mediump vec3 lm_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lm_7 = tmpvar_8;
  mediump vec4 tmpvar_9;
  tmpvar_9.w = 0.0;
  tmpvar_9.xyz = lm_7;
  mediump vec4 tmpvar_10;
  tmpvar_10 = (-(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001)))) + tmpvar_9);
  light_3 = tmpvar_10;
  lowp vec4 c_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_4.xyz * tmpvar_10.xyz);
  c_11.xyz = tmpvar_12;
  c_11.w = (tmpvar_4.w * xlv_COLOR0.w);
  c_2 = c_11;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec4 vertex_1;
  vertex_1.yw = _glesVertex.yw;
  lowp vec4 color_2;
  color_2.xyz = _glesColor.xyz;
  lowp vec3 waveColor_3;
  highp vec3 waveMove_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * tmpvar_5);
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_5);
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_6);
  highp vec4 tmpvar_9;
  tmpvar_9 = (((tmpvar_5 + (tmpvar_7 * -0.161616)) + (tmpvar_8 * 0.0083333)) + ((tmpvar_8 * tmpvar_6) * -0.00019841));
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_4.y = 0.0;
  waveMove_4.x = dot (tmpvar_12, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_4.z = dot (tmpvar_12, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_1.xz = (_glesVertex.xz - (waveMove_4.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_13;
  tmpvar_13 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_11, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (vertex_1.xyz - _CameraPosition.xyz);
  highp float tmpvar_15;
  tmpvar_15 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_14, tmpvar_14))) * _CameraPosition.w), 0.0, 1.0);
  color_2.w = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16.xyz = ((2.0 * waveColor_3) * _glesColor.xyz);
  tmpvar_16.w = color_2.w;
  highp vec4 tmpvar_17;
  tmpvar_17 = (glstate_matrix_mvp * vertex_1);
  highp vec4 o_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_17 * 0.5);
  highp vec2 tmpvar_20;
  tmpvar_20.x = tmpvar_19.x;
  tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
  o_18.xy = (tmpvar_20 + tmpvar_19.w);
  o_18.zw = tmpvar_17.zw;
  gl_Position = tmpvar_17;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_16;
  xlv_TEXCOORD1 = o_18;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = (texture (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_5;
  x_5 = (tmpvar_4.w - _Cutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_6;
  tmpvar_6 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_6;
  mediump vec3 lm_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lm_7 = tmpvar_8;
  mediump vec4 tmpvar_9;
  tmpvar_9.w = 0.0;
  tmpvar_9.xyz = lm_7;
  mediump vec4 tmpvar_10;
  tmpvar_10 = (-(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001)))) + tmpvar_9);
  light_3 = tmpvar_10;
  lowp vec4 c_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_4.xyz * tmpvar_10.xyz);
  c_11.xyz = tmpvar_12;
  c_11.w = (tmpvar_4.w * xlv_COLOR0.w);
  c_2 = c_11;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 vertex_2;
  vertex_2.yw = _glesVertex.yw;
  lowp vec4 color_3;
  color_3.xyz = _glesColor.xyz;
  lowp vec3 waveColor_4;
  highp vec3 waveMove_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_6);
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_6);
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_7);
  highp vec4 tmpvar_10;
  tmpvar_10 = (((tmpvar_6 + (tmpvar_8 * -0.161616)) + (tmpvar_9 * 0.0083333)) + ((tmpvar_9 * tmpvar_7) * -0.00019841));
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * tmpvar_11);
  highp vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_5.y = 0.0;
  waveMove_5.x = dot (tmpvar_13, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_5.z = dot (tmpvar_13, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_2.xz = (_glesVertex.xz - (waveMove_5.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_14;
  tmpvar_14 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_12, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_4 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = (vertex_2.xyz - _CameraPosition.xyz);
  highp float tmpvar_16;
  tmpvar_16 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_15, tmpvar_15))) * _CameraPosition.w), 0.0, 1.0);
  color_3.w = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.xyz = ((2.0 * waveColor_4) * _glesColor.xyz);
  tmpvar_17.w = color_3.w;
  highp vec4 tmpvar_18;
  tmpvar_18 = (glstate_matrix_mvp * vertex_2);
  highp vec4 o_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * 0.5);
  highp vec2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (tmpvar_20.y * _ProjectionParams.x);
  o_19.xy = (tmpvar_21 + tmpvar_20.w);
  o_19.zw = tmpvar_18.zw;
  mat3 tmpvar_22;
  tmpvar_22[0] = _Object2World[0].xyz;
  tmpvar_22[1] = _Object2World[1].xyz;
  tmpvar_22[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = (tmpvar_22 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_24;
  mediump vec4 normal_25;
  normal_25 = tmpvar_23;
  highp float vC_26;
  mediump vec3 x3_27;
  mediump vec3 x2_28;
  mediump vec3 x1_29;
  highp float tmpvar_30;
  tmpvar_30 = dot (unity_SHAr, normal_25);
  x1_29.x = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = dot (unity_SHAg, normal_25);
  x1_29.y = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = dot (unity_SHAb, normal_25);
  x1_29.z = tmpvar_32;
  mediump vec4 tmpvar_33;
  tmpvar_33 = (normal_25.xyzz * normal_25.yzzx);
  highp float tmpvar_34;
  tmpvar_34 = dot (unity_SHBr, tmpvar_33);
  x2_28.x = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = dot (unity_SHBg, tmpvar_33);
  x2_28.y = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = dot (unity_SHBb, tmpvar_33);
  x2_28.z = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = ((normal_25.x * normal_25.x) - (normal_25.y * normal_25.y));
  vC_26 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = (unity_SHC.xyz * vC_26);
  x3_27 = tmpvar_38;
  tmpvar_24 = ((x1_29 + x2_28) + x3_27);
  tmpvar_1 = tmpvar_24;
  gl_Position = tmpvar_18;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_17;
  xlv_TEXCOORD1 = o_19;
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _LightBuffer;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_5;
  x_5 = (tmpvar_4.w - _Cutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_6;
  mediump vec4 tmpvar_7;
  tmpvar_7 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_7.w;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7.xyz + xlv_TEXCOORD2);
  light_3.xyz = tmpvar_8;
  lowp vec4 c_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_4.xyz * light_3.xyz);
  c_9.xyz = tmpvar_10;
  c_9.w = (tmpvar_4.w * xlv_COLOR0.w);
  c_2 = c_9;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 vertex_2;
  vertex_2.yw = _glesVertex.yw;
  lowp vec4 color_3;
  color_3.xyz = _glesColor.xyz;
  lowp vec3 waveColor_4;
  highp vec3 waveMove_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_6);
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_6);
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_7);
  highp vec4 tmpvar_10;
  tmpvar_10 = (((tmpvar_6 + (tmpvar_8 * -0.161616)) + (tmpvar_9 * 0.0083333)) + ((tmpvar_9 * tmpvar_7) * -0.00019841));
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * tmpvar_11);
  highp vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_5.y = 0.0;
  waveMove_5.x = dot (tmpvar_13, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_5.z = dot (tmpvar_13, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_2.xz = (_glesVertex.xz - (waveMove_5.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_14;
  tmpvar_14 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_12, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_4 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = (vertex_2.xyz - _CameraPosition.xyz);
  highp float tmpvar_16;
  tmpvar_16 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_15, tmpvar_15))) * _CameraPosition.w), 0.0, 1.0);
  color_3.w = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.xyz = ((2.0 * waveColor_4) * _glesColor.xyz);
  tmpvar_17.w = color_3.w;
  highp vec4 tmpvar_18;
  tmpvar_18 = (glstate_matrix_mvp * vertex_2);
  highp vec4 o_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * 0.5);
  highp vec2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (tmpvar_20.y * _ProjectionParams.x);
  o_19.xy = (tmpvar_21 + tmpvar_20.w);
  o_19.zw = tmpvar_18.zw;
  mat3 tmpvar_22;
  tmpvar_22[0] = _Object2World[0].xyz;
  tmpvar_22[1] = _Object2World[1].xyz;
  tmpvar_22[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = (tmpvar_22 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_24;
  mediump vec4 normal_25;
  normal_25 = tmpvar_23;
  highp float vC_26;
  mediump vec3 x3_27;
  mediump vec3 x2_28;
  mediump vec3 x1_29;
  highp float tmpvar_30;
  tmpvar_30 = dot (unity_SHAr, normal_25);
  x1_29.x = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = dot (unity_SHAg, normal_25);
  x1_29.y = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = dot (unity_SHAb, normal_25);
  x1_29.z = tmpvar_32;
  mediump vec4 tmpvar_33;
  tmpvar_33 = (normal_25.xyzz * normal_25.yzzx);
  highp float tmpvar_34;
  tmpvar_34 = dot (unity_SHBr, tmpvar_33);
  x2_28.x = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = dot (unity_SHBg, tmpvar_33);
  x2_28.y = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = dot (unity_SHBb, tmpvar_33);
  x2_28.z = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = ((normal_25.x * normal_25.x) - (normal_25.y * normal_25.y));
  vC_26 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = (unity_SHC.xyz * vC_26);
  x3_27 = tmpvar_38;
  tmpvar_24 = ((x1_29 + x2_28) + x3_27);
  tmpvar_1 = tmpvar_24;
  gl_Position = tmpvar_18;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_17;
  xlv_TEXCOORD1 = o_19;
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _LightBuffer;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = (texture (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_5;
  x_5 = (tmpvar_4.w - _Cutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_6;
  tmpvar_6 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_6;
  mediump vec4 tmpvar_7;
  tmpvar_7 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_7.w;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7.xyz + xlv_TEXCOORD2);
  light_3.xyz = tmpvar_8;
  lowp vec4 c_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_4.xyz * light_3.xyz);
  c_9.xyz = tmpvar_10;
  c_9.w = (tmpvar_4.w * xlv_COLOR0.w);
  c_2 = c_9;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 vertex_2;
  vertex_2.yw = _glesVertex.yw;
  lowp vec4 color_3;
  color_3.xyz = _glesColor.xyz;
  lowp vec3 waveColor_4;
  highp vec3 waveMove_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_6);
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_6);
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_7);
  highp vec4 tmpvar_10;
  tmpvar_10 = (((tmpvar_6 + (tmpvar_8 * -0.161616)) + (tmpvar_9 * 0.0083333)) + ((tmpvar_9 * tmpvar_7) * -0.00019841));
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * tmpvar_11);
  highp vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_5.y = 0.0;
  waveMove_5.x = dot (tmpvar_13, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_5.z = dot (tmpvar_13, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_2.xz = (_glesVertex.xz - (waveMove_5.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_14;
  tmpvar_14 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_12, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_4 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = (vertex_2.xyz - _CameraPosition.xyz);
  highp float tmpvar_16;
  tmpvar_16 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_15, tmpvar_15))) * _CameraPosition.w), 0.0, 1.0);
  color_3.w = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.xyz = ((2.0 * waveColor_4) * _glesColor.xyz);
  tmpvar_17.w = color_3.w;
  highp vec4 tmpvar_18;
  tmpvar_18 = (glstate_matrix_mvp * vertex_2);
  highp vec4 o_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * 0.5);
  highp vec2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (tmpvar_20.y * _ProjectionParams.x);
  o_19.xy = (tmpvar_21 + tmpvar_20.w);
  o_19.zw = tmpvar_18.zw;
  tmpvar_1.xyz = (((_Object2World * vertex_2).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_1.w = (-((glstate_matrix_modelview0 * vertex_2).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_18;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_17;
  xlv_TEXCOORD1 = o_19;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec3 lmIndirect_3;
  mediump vec3 lmFull_4;
  mediump float lmFade_5;
  mediump vec4 light_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_8;
  x_8 = (tmpvar_7.w - _Cutoff);
  if ((x_8 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_6 = tmpvar_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = max (light_6, vec4(0.001, 0.001, 0.001, 0.001));
  light_6.w = tmpvar_10.w;
  highp float tmpvar_11;
  tmpvar_11 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * unity_LightmapFade.z) + unity_LightmapFade.w);
  lmFade_5 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lmFull_4 = tmpvar_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = (2.0 * texture2D (unity_LightmapInd, xlv_TEXCOORD2).xyz);
  lmIndirect_3 = tmpvar_13;
  light_6.xyz = (tmpvar_10.xyz + mix (lmIndirect_3, lmFull_4, vec3(clamp (lmFade_5, 0.0, 1.0))));
  lowp vec4 c_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_7.xyz * light_6.xyz);
  c_14.xyz = tmpvar_15;
  c_14.w = (tmpvar_7.w * xlv_COLOR0.w);
  c_2 = c_14;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 vertex_2;
  vertex_2.yw = _glesVertex.yw;
  lowp vec4 color_3;
  color_3.xyz = _glesColor.xyz;
  lowp vec3 waveColor_4;
  highp vec3 waveMove_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_6);
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_6);
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_7);
  highp vec4 tmpvar_10;
  tmpvar_10 = (((tmpvar_6 + (tmpvar_8 * -0.161616)) + (tmpvar_9 * 0.0083333)) + ((tmpvar_9 * tmpvar_7) * -0.00019841));
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * tmpvar_11);
  highp vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_5.y = 0.0;
  waveMove_5.x = dot (tmpvar_13, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_5.z = dot (tmpvar_13, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_2.xz = (_glesVertex.xz - (waveMove_5.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_14;
  tmpvar_14 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_12, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_4 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = (vertex_2.xyz - _CameraPosition.xyz);
  highp float tmpvar_16;
  tmpvar_16 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_15, tmpvar_15))) * _CameraPosition.w), 0.0, 1.0);
  color_3.w = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.xyz = ((2.0 * waveColor_4) * _glesColor.xyz);
  tmpvar_17.w = color_3.w;
  highp vec4 tmpvar_18;
  tmpvar_18 = (glstate_matrix_mvp * vertex_2);
  highp vec4 o_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * 0.5);
  highp vec2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (tmpvar_20.y * _ProjectionParams.x);
  o_19.xy = (tmpvar_21 + tmpvar_20.w);
  o_19.zw = tmpvar_18.zw;
  tmpvar_1.xyz = (((_Object2World * vertex_2).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_1.w = (-((glstate_matrix_modelview0 * vertex_2).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_18;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_17;
  xlv_TEXCOORD1 = o_19;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec3 lmIndirect_3;
  mediump vec3 lmFull_4;
  mediump float lmFade_5;
  mediump vec4 light_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = (texture (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_8;
  x_8 = (tmpvar_7.w - _Cutoff);
  if ((x_8 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_6 = tmpvar_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = max (light_6, vec4(0.001, 0.001, 0.001, 0.001));
  light_6.w = tmpvar_10.w;
  highp float tmpvar_11;
  tmpvar_11 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * unity_LightmapFade.z) + unity_LightmapFade.w);
  lmFade_5 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lmFull_4 = tmpvar_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = (2.0 * texture (unity_LightmapInd, xlv_TEXCOORD2).xyz);
  lmIndirect_3 = tmpvar_13;
  light_6.xyz = (tmpvar_10.xyz + mix (lmIndirect_3, lmFull_4, vec3(clamp (lmFade_5, 0.0, 1.0))));
  lowp vec4 c_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_7.xyz * light_6.xyz);
  c_14.xyz = tmpvar_15;
  c_14.w = (tmpvar_7.w * xlv_COLOR0.w);
  c_2 = c_14;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec4 vertex_1;
  vertex_1.yw = _glesVertex.yw;
  lowp vec4 color_2;
  color_2.xyz = _glesColor.xyz;
  lowp vec3 waveColor_3;
  highp vec3 waveMove_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * tmpvar_5);
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_5);
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_6);
  highp vec4 tmpvar_9;
  tmpvar_9 = (((tmpvar_5 + (tmpvar_7 * -0.161616)) + (tmpvar_8 * 0.0083333)) + ((tmpvar_8 * tmpvar_6) * -0.00019841));
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_4.y = 0.0;
  waveMove_4.x = dot (tmpvar_12, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_4.z = dot (tmpvar_12, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_1.xz = (_glesVertex.xz - (waveMove_4.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_13;
  tmpvar_13 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_11, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (vertex_1.xyz - _CameraPosition.xyz);
  highp float tmpvar_15;
  tmpvar_15 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_14, tmpvar_14))) * _CameraPosition.w), 0.0, 1.0);
  color_2.w = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16.xyz = ((2.0 * waveColor_3) * _glesColor.xyz);
  tmpvar_16.w = color_2.w;
  highp vec4 tmpvar_17;
  tmpvar_17 = (glstate_matrix_mvp * vertex_1);
  highp vec4 o_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_17 * 0.5);
  highp vec2 tmpvar_20;
  tmpvar_20.x = tmpvar_19.x;
  tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
  o_18.xy = (tmpvar_20 + tmpvar_19.w);
  o_18.zw = tmpvar_17.zw;
  gl_Position = tmpvar_17;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_16;
  xlv_TEXCOORD1 = o_18;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_5;
  x_5 = (tmpvar_4.w - _Cutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_6;
  mediump vec3 lm_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lm_7 = tmpvar_8;
  mediump vec4 tmpvar_9;
  tmpvar_9.w = 0.0;
  tmpvar_9.xyz = lm_7;
  mediump vec4 tmpvar_10;
  tmpvar_10 = (max (light_3, vec4(0.001, 0.001, 0.001, 0.001)) + tmpvar_9);
  light_3 = tmpvar_10;
  lowp vec4 c_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_4.xyz * tmpvar_10.xyz);
  c_11.xyz = tmpvar_12;
  c_11.w = (tmpvar_4.w * xlv_COLOR0.w);
  c_2 = c_11;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec4 vertex_1;
  vertex_1.yw = _glesVertex.yw;
  lowp vec4 color_2;
  color_2.xyz = _glesColor.xyz;
  lowp vec3 waveColor_3;
  highp vec3 waveMove_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * tmpvar_5);
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_5);
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_6);
  highp vec4 tmpvar_9;
  tmpvar_9 = (((tmpvar_5 + (tmpvar_7 * -0.161616)) + (tmpvar_8 * 0.0083333)) + ((tmpvar_8 * tmpvar_6) * -0.00019841));
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_4.y = 0.0;
  waveMove_4.x = dot (tmpvar_12, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_4.z = dot (tmpvar_12, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_1.xz = (_glesVertex.xz - (waveMove_4.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_13;
  tmpvar_13 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_11, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (vertex_1.xyz - _CameraPosition.xyz);
  highp float tmpvar_15;
  tmpvar_15 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_14, tmpvar_14))) * _CameraPosition.w), 0.0, 1.0);
  color_2.w = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16.xyz = ((2.0 * waveColor_3) * _glesColor.xyz);
  tmpvar_16.w = color_2.w;
  highp vec4 tmpvar_17;
  tmpvar_17 = (glstate_matrix_mvp * vertex_1);
  highp vec4 o_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_17 * 0.5);
  highp vec2 tmpvar_20;
  tmpvar_20.x = tmpvar_19.x;
  tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
  o_18.xy = (tmpvar_20 + tmpvar_19.w);
  o_18.zw = tmpvar_17.zw;
  gl_Position = tmpvar_17;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_16;
  xlv_TEXCOORD1 = o_18;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = (texture (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_5;
  x_5 = (tmpvar_4.w - _Cutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_6;
  tmpvar_6 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_6;
  mediump vec3 lm_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lm_7 = tmpvar_8;
  mediump vec4 tmpvar_9;
  tmpvar_9.w = 0.0;
  tmpvar_9.xyz = lm_7;
  mediump vec4 tmpvar_10;
  tmpvar_10 = (max (light_3, vec4(0.001, 0.001, 0.001, 0.001)) + tmpvar_9);
  light_3 = tmpvar_10;
  lowp vec4 c_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_4.xyz * tmpvar_10.xyz);
  c_11.xyz = tmpvar_12;
  c_11.w = (tmpvar_4.w * xlv_COLOR0.w);
  c_2 = c_11;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3"
}
}
 }
 Pass {
  Name "SHADOWCASTER"
  Tags { "LIGHTMODE"="SHADOWCASTER" "SHADOWSUPPORT"="true" "QUEUE"="Geometry+200" "IGNOREPROJECTOR"="true" "RenderType"="Grass" }
  Cull Off
  Fog { Mode Off }
  ColorMask RGB
  Offset 1, 1
Program "vp" {
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 vertex_2;
  vertex_2.yw = _glesVertex.yw;
  lowp vec4 color_3;
  color_3.xyz = _glesColor.xyz;
  lowp vec3 waveColor_4;
  highp vec3 waveMove_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_6);
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_6);
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_7);
  highp vec4 tmpvar_10;
  tmpvar_10 = (((tmpvar_6 + (tmpvar_8 * -0.161616)) + (tmpvar_9 * 0.0083333)) + ((tmpvar_9 * tmpvar_7) * -0.00019841));
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * tmpvar_11);
  highp vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_5.y = 0.0;
  waveMove_5.x = dot (tmpvar_13, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_5.z = dot (tmpvar_13, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_2.xz = (_glesVertex.xz - (waveMove_5.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_14;
  tmpvar_14 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_12, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_4 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = (vertex_2.xyz - _CameraPosition.xyz);
  highp float tmpvar_16;
  tmpvar_16 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_15, tmpvar_15))) * _CameraPosition.w), 0.0, 1.0);
  color_3.w = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.xyz = ((2.0 * waveColor_4) * _glesColor.xyz);
  tmpvar_17.w = color_3.w;
  highp vec4 tmpvar_18;
  tmpvar_18 = (glstate_matrix_mvp * vertex_2);
  tmpvar_1.xyw = tmpvar_18.xyw;
  tmpvar_1.z = (tmpvar_18.z + unity_LightShadowBias.x);
  tmpvar_1.z = mix (tmpvar_1.z, max (tmpvar_1.z, (tmpvar_18.w * -1.0)), unity_LightShadowBias.y);
  gl_Position = tmpvar_1;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_17;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
varying highp vec2 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
void main ()
{
  lowp float x_1;
  x_1 = ((texture2D (_MainTex, xlv_TEXCOORD1) * xlv_COLOR0).w - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
out highp vec2 xlv_TEXCOORD1;
out lowp vec4 xlv_COLOR0;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 vertex_2;
  vertex_2.yw = _glesVertex.yw;
  lowp vec4 color_3;
  color_3.xyz = _glesColor.xyz;
  lowp vec3 waveColor_4;
  highp vec3 waveMove_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_6);
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_6);
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_7);
  highp vec4 tmpvar_10;
  tmpvar_10 = (((tmpvar_6 + (tmpvar_8 * -0.161616)) + (tmpvar_9 * 0.0083333)) + ((tmpvar_9 * tmpvar_7) * -0.00019841));
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * tmpvar_11);
  highp vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_5.y = 0.0;
  waveMove_5.x = dot (tmpvar_13, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_5.z = dot (tmpvar_13, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_2.xz = (_glesVertex.xz - (waveMove_5.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_14;
  tmpvar_14 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_12, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_4 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = (vertex_2.xyz - _CameraPosition.xyz);
  highp float tmpvar_16;
  tmpvar_16 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_15, tmpvar_15))) * _CameraPosition.w), 0.0, 1.0);
  color_3.w = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.xyz = ((2.0 * waveColor_4) * _glesColor.xyz);
  tmpvar_17.w = color_3.w;
  highp vec4 tmpvar_18;
  tmpvar_18 = (glstate_matrix_mvp * vertex_2);
  tmpvar_1.xyw = tmpvar_18.xyw;
  tmpvar_1.z = (tmpvar_18.z + unity_LightShadowBias.x);
  tmpvar_1.z = mix (tmpvar_1.z, max (tmpvar_1.z, (tmpvar_18.w * -1.0)), unity_LightShadowBias.y);
  gl_Position = tmpvar_1;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_17;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
in highp vec2 xlv_TEXCOORD1;
in lowp vec4 xlv_COLOR0;
void main ()
{
  lowp float x_1;
  x_1 = ((texture (_MainTex, xlv_TEXCOORD1) * xlv_COLOR0).w - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  _glesFragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}



#endif"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
void main ()
{
  highp vec4 vertex_1;
  vertex_1.yw = _glesVertex.yw;
  lowp vec4 color_2;
  color_2.xyz = _glesColor.xyz;
  lowp vec3 waveColor_3;
  highp vec3 waveMove_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * tmpvar_5);
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_5);
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_6);
  highp vec4 tmpvar_9;
  tmpvar_9 = (((tmpvar_5 + (tmpvar_7 * -0.161616)) + (tmpvar_8 * 0.0083333)) + ((tmpvar_8 * tmpvar_6) * -0.00019841));
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_4.y = 0.0;
  waveMove_4.x = dot (tmpvar_12, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_4.z = dot (tmpvar_12, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_1.xz = (_glesVertex.xz - (waveMove_4.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_13;
  tmpvar_13 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_11, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (vertex_1.xyz - _CameraPosition.xyz);
  highp float tmpvar_15;
  tmpvar_15 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_14, tmpvar_14))) * _CameraPosition.w), 0.0, 1.0);
  color_2.w = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16.xyz = ((2.0 * waveColor_3) * _glesColor.xyz);
  tmpvar_16.w = color_2.w;
  gl_Position = (glstate_matrix_mvp * vertex_1);
  xlv_TEXCOORD0 = ((_Object2World * vertex_1).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD1 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_16;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _LightPositionRange;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp float x_2;
  x_2 = ((texture2D (_MainTex, xlv_TEXCOORD1) * xlv_COLOR0).w - _Cutoff);
  if ((x_2 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_3;
  tmpvar_3 = fract((vec4(1.0, 255.0, 65025.0, 1.65814e+07) * min ((sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w), 0.999)));
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 - (tmpvar_3.yzww * 0.00392157));
  tmpvar_1 = tmpvar_4;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
out highp vec3 xlv_TEXCOORD0;
out highp vec2 xlv_TEXCOORD1;
out lowp vec4 xlv_COLOR0;
void main ()
{
  highp vec4 vertex_1;
  vertex_1.yw = _glesVertex.yw;
  lowp vec4 color_2;
  color_2.xyz = _glesColor.xyz;
  lowp vec3 waveColor_3;
  highp vec3 waveMove_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * tmpvar_5);
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_5);
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_6);
  highp vec4 tmpvar_9;
  tmpvar_9 = (((tmpvar_5 + (tmpvar_7 * -0.161616)) + (tmpvar_8 * 0.0083333)) + ((tmpvar_8 * tmpvar_6) * -0.00019841));
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_4.y = 0.0;
  waveMove_4.x = dot (tmpvar_12, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_4.z = dot (tmpvar_12, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_1.xz = (_glesVertex.xz - (waveMove_4.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_13;
  tmpvar_13 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_11, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (vertex_1.xyz - _CameraPosition.xyz);
  highp float tmpvar_15;
  tmpvar_15 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_14, tmpvar_14))) * _CameraPosition.w), 0.0, 1.0);
  color_2.w = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16.xyz = ((2.0 * waveColor_3) * _glesColor.xyz);
  tmpvar_16.w = color_2.w;
  gl_Position = (glstate_matrix_mvp * vertex_1);
  xlv_TEXCOORD0 = ((_Object2World * vertex_1).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD1 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_16;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform highp vec4 _LightPositionRange;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
in highp vec3 xlv_TEXCOORD0;
in highp vec2 xlv_TEXCOORD1;
in lowp vec4 xlv_COLOR0;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp float x_2;
  x_2 = ((texture (_MainTex, xlv_TEXCOORD1) * xlv_COLOR0).w - _Cutoff);
  if ((x_2 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_3;
  tmpvar_3 = fract((vec4(1.0, 255.0, 65025.0, 1.65814e+07) * min ((sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w), 0.999)));
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 - (tmpvar_3.yzww * 0.00392157));
  tmpvar_1 = tmpvar_4;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" }
"!!GLES3"
}
}
 }
 Pass {
  Name "SHADOWCOLLECTOR"
  Tags { "LIGHTMODE"="SHADOWCOLLECTOR" "QUEUE"="Geometry+200" "IGNOREPROJECTOR"="true" "RenderType"="Grass" }
  Cull Off
  Fog { Mode Off }
  ColorMask RGB
Program "vp" {
SubProgram "gles " {
Keywords { "SHADOWS_NONATIVE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD5;
varying lowp vec4 xlv_COLOR0;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 vertex_2;
  vertex_2.yw = _glesVertex.yw;
  lowp vec4 color_3;
  color_3.xyz = _glesColor.xyz;
  lowp vec3 waveColor_4;
  highp vec3 waveMove_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_6);
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_6);
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_7);
  highp vec4 tmpvar_10;
  tmpvar_10 = (((tmpvar_6 + (tmpvar_8 * -0.161616)) + (tmpvar_9 * 0.0083333)) + ((tmpvar_9 * tmpvar_7) * -0.00019841));
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * tmpvar_11);
  highp vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_5.y = 0.0;
  waveMove_5.x = dot (tmpvar_13, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_5.z = dot (tmpvar_13, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_2.xz = (_glesVertex.xz - (waveMove_5.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_14;
  tmpvar_14 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_12, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_4 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = (vertex_2.xyz - _CameraPosition.xyz);
  highp float tmpvar_16;
  tmpvar_16 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_15, tmpvar_15))) * _CameraPosition.w), 0.0, 1.0);
  color_3.w = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.xyz = ((2.0 * waveColor_4) * _glesColor.xyz);
  tmpvar_17.w = color_3.w;
  highp vec4 tmpvar_18;
  tmpvar_18 = (_Object2World * vertex_2);
  tmpvar_1.xyz = tmpvar_18.xyz;
  tmpvar_1.w = -((glstate_matrix_modelview0 * vertex_2).z);
  gl_Position = (glstate_matrix_mvp * vertex_2);
  xlv_TEXCOORD0 = (unity_World2Shadow[0] * tmpvar_18).xyz;
  xlv_TEXCOORD1 = (unity_World2Shadow[1] * tmpvar_18).xyz;
  xlv_TEXCOORD2 = (unity_World2Shadow[2] * tmpvar_18).xyz;
  xlv_TEXCOORD3 = (unity_World2Shadow[3] * tmpvar_18).xyz;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_17;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _ProjectionParams;
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp vec4 _LightShadowData;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD5;
varying lowp vec4 xlv_COLOR0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec4 res_2;
  highp vec4 zFar_3;
  highp vec4 zNear_4;
  lowp float x_5;
  x_5 = ((texture2D (_MainTex, xlv_TEXCOORD5) * xlv_COLOR0).w - _Cutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  bvec4 tmpvar_6;
  tmpvar_6 = greaterThanEqual (xlv_TEXCOORD4.wwww, _LightSplitsNear);
  lowp vec4 tmpvar_7;
  tmpvar_7 = vec4(tmpvar_6);
  zNear_4 = tmpvar_7;
  bvec4 tmpvar_8;
  tmpvar_8 = lessThan (xlv_TEXCOORD4.wwww, _LightSplitsFar);
  lowp vec4 tmpvar_9;
  tmpvar_9 = vec4(tmpvar_8);
  zFar_3 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (zNear_4 * zFar_3);
  highp float tmpvar_11;
  tmpvar_11 = clamp (((xlv_TEXCOORD4.w * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = ((((xlv_TEXCOORD0 * tmpvar_10.x) + (xlv_TEXCOORD1 * tmpvar_10.y)) + (xlv_TEXCOORD2 * tmpvar_10.z)) + (xlv_TEXCOORD3 * tmpvar_10.w));
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_ShadowMapTexture, tmpvar_12.xy);
  highp float tmpvar_14;
  if ((tmpvar_13.x < tmpvar_12.z)) {
    tmpvar_14 = _LightShadowData.x;
  } else {
    tmpvar_14 = 1.0;
  };
  res_2.x = clamp ((tmpvar_14 + tmpvar_11), 0.0, 1.0);
  res_2.y = 1.0;
  highp vec2 enc_15;
  highp vec2 tmpvar_16;
  tmpvar_16 = fract((vec2(1.0, 255.0) * (1.0 - (xlv_TEXCOORD4.w * _ProjectionParams.w))));
  enc_15.y = tmpvar_16.y;
  enc_15.x = (tmpvar_16.x - (tmpvar_16.y * 0.00392157));
  res_2.zw = enc_15;
  tmpvar_1 = res_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD5;
varying lowp vec4 xlv_COLOR0;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 vertex_2;
  vertex_2.yw = _glesVertex.yw;
  lowp vec4 color_3;
  color_3.xyz = _glesColor.xyz;
  lowp vec3 waveColor_4;
  highp vec3 waveMove_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_6);
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_6);
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_7);
  highp vec4 tmpvar_10;
  tmpvar_10 = (((tmpvar_6 + (tmpvar_8 * -0.161616)) + (tmpvar_9 * 0.0083333)) + ((tmpvar_9 * tmpvar_7) * -0.00019841));
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * tmpvar_11);
  highp vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_5.y = 0.0;
  waveMove_5.x = dot (tmpvar_13, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_5.z = dot (tmpvar_13, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_2.xz = (_glesVertex.xz - (waveMove_5.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_14;
  tmpvar_14 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_12, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_4 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = (vertex_2.xyz - _CameraPosition.xyz);
  highp float tmpvar_16;
  tmpvar_16 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_15, tmpvar_15))) * _CameraPosition.w), 0.0, 1.0);
  color_3.w = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.xyz = ((2.0 * waveColor_4) * _glesColor.xyz);
  tmpvar_17.w = color_3.w;
  highp vec4 tmpvar_18;
  tmpvar_18 = (_Object2World * vertex_2);
  tmpvar_1.xyz = tmpvar_18.xyz;
  tmpvar_1.w = -((glstate_matrix_modelview0 * vertex_2).z);
  gl_Position = (glstate_matrix_mvp * vertex_2);
  xlv_TEXCOORD0 = (unity_World2Shadow[0] * tmpvar_18).xyz;
  xlv_TEXCOORD1 = (unity_World2Shadow[1] * tmpvar_18).xyz;
  xlv_TEXCOORD2 = (unity_World2Shadow[2] * tmpvar_18).xyz;
  xlv_TEXCOORD3 = (unity_World2Shadow[3] * tmpvar_18).xyz;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_17;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD5;
varying lowp vec4 xlv_COLOR0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec4 res_2;
  mediump float shadow_3;
  highp vec4 zFar_4;
  highp vec4 zNear_5;
  lowp float x_6;
  x_6 = ((texture2D (_MainTex, xlv_TEXCOORD5) * xlv_COLOR0).w - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  bvec4 tmpvar_7;
  tmpvar_7 = greaterThanEqual (xlv_TEXCOORD4.wwww, _LightSplitsNear);
  lowp vec4 tmpvar_8;
  tmpvar_8 = vec4(tmpvar_7);
  zNear_5 = tmpvar_8;
  bvec4 tmpvar_9;
  tmpvar_9 = lessThan (xlv_TEXCOORD4.wwww, _LightSplitsFar);
  lowp vec4 tmpvar_10;
  tmpvar_10 = vec4(tmpvar_9);
  zFar_4 = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (zNear_5 * zFar_4);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = ((((xlv_TEXCOORD0 * tmpvar_11.x) + (xlv_TEXCOORD1 * tmpvar_11.y)) + (xlv_TEXCOORD2 * tmpvar_11.z)) + (xlv_TEXCOORD3 * tmpvar_11.w));
  lowp float tmpvar_13;
  tmpvar_13 = shadow2DEXT (_ShadowMapTexture, tmpvar_12.xyz);
  shadow_3 = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_LightShadowData.x + (shadow_3 * (1.0 - _LightShadowData.x)));
  shadow_3 = tmpvar_14;
  res_2.x = clamp ((shadow_3 + clamp (((xlv_TEXCOORD4.w * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0)), 0.0, 1.0);
  res_2.y = 1.0;
  highp vec2 enc_15;
  highp vec2 tmpvar_16;
  tmpvar_16 = fract((vec2(1.0, 255.0) * (1.0 - (xlv_TEXCOORD4.w * _ProjectionParams.w))));
  enc_15.y = tmpvar_16.y;
  enc_15.x = (tmpvar_16.x - (tmpvar_16.y * 0.00392157));
  res_2.zw = enc_15;
  tmpvar_1 = res_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec2 xlv_TEXCOORD5;
out lowp vec4 xlv_COLOR0;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 vertex_2;
  vertex_2.yw = _glesVertex.yw;
  lowp vec4 color_3;
  color_3.xyz = _glesColor.xyz;
  lowp vec3 waveColor_4;
  highp vec3 waveMove_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_6);
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_6);
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_7);
  highp vec4 tmpvar_10;
  tmpvar_10 = (((tmpvar_6 + (tmpvar_8 * -0.161616)) + (tmpvar_9 * 0.0083333)) + ((tmpvar_9 * tmpvar_7) * -0.00019841));
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * tmpvar_11);
  highp vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_5.y = 0.0;
  waveMove_5.x = dot (tmpvar_13, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_5.z = dot (tmpvar_13, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_2.xz = (_glesVertex.xz - (waveMove_5.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_14;
  tmpvar_14 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_12, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_4 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = (vertex_2.xyz - _CameraPosition.xyz);
  highp float tmpvar_16;
  tmpvar_16 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_15, tmpvar_15))) * _CameraPosition.w), 0.0, 1.0);
  color_3.w = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.xyz = ((2.0 * waveColor_4) * _glesColor.xyz);
  tmpvar_17.w = color_3.w;
  highp vec4 tmpvar_18;
  tmpvar_18 = (_Object2World * vertex_2);
  tmpvar_1.xyz = tmpvar_18.xyz;
  tmpvar_1.w = -((glstate_matrix_modelview0 * vertex_2).z);
  gl_Position = (glstate_matrix_mvp * vertex_2);
  xlv_TEXCOORD0 = (unity_World2Shadow[0] * tmpvar_18).xyz;
  xlv_TEXCOORD1 = (unity_World2Shadow[1] * tmpvar_18).xyz;
  xlv_TEXCOORD2 = (unity_World2Shadow[2] * tmpvar_18).xyz;
  xlv_TEXCOORD3 = (unity_World2Shadow[3] * tmpvar_18).xyz;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_17;
}



#endif
#ifdef FRAGMENT

out mediump vec4 _glesFragData[4];
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec2 xlv_TEXCOORD5;
in lowp vec4 xlv_COLOR0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec4 res_2;
  mediump float shadow_3;
  highp vec4 zFar_4;
  highp vec4 zNear_5;
  lowp float x_6;
  x_6 = ((texture (_MainTex, xlv_TEXCOORD5) * xlv_COLOR0).w - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  bvec4 tmpvar_7;
  tmpvar_7 = greaterThanEqual (xlv_TEXCOORD4.wwww, _LightSplitsNear);
  lowp vec4 tmpvar_8;
  tmpvar_8 = vec4(tmpvar_7);
  zNear_5 = tmpvar_8;
  bvec4 tmpvar_9;
  tmpvar_9 = lessThan (xlv_TEXCOORD4.wwww, _LightSplitsFar);
  lowp vec4 tmpvar_10;
  tmpvar_10 = vec4(tmpvar_9);
  zFar_4 = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (zNear_5 * zFar_4);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = ((((xlv_TEXCOORD0 * tmpvar_11.x) + (xlv_TEXCOORD1 * tmpvar_11.y)) + (xlv_TEXCOORD2 * tmpvar_11.z)) + (xlv_TEXCOORD3 * tmpvar_11.w));
  mediump float tmpvar_13;
  tmpvar_13 = texture (_ShadowMapTexture, tmpvar_12.xyz);
  highp float tmpvar_14;
  tmpvar_14 = (_LightShadowData.x + (tmpvar_13 * (1.0 - _LightShadowData.x)));
  shadow_3 = tmpvar_14;
  res_2.x = clamp ((shadow_3 + clamp (((xlv_TEXCOORD4.w * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0)), 0.0, 1.0);
  res_2.y = 1.0;
  highp vec2 enc_15;
  highp vec2 tmpvar_16;
  tmpvar_16 = fract((vec2(1.0, 255.0) * (1.0 - (xlv_TEXCOORD4.w * _ProjectionParams.w))));
  enc_15.y = tmpvar_16.y;
  enc_15.x = (tmpvar_16.x - (tmpvar_16.y * 0.00392157));
  res_2.zw = enc_15;
  tmpvar_1 = res_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "SHADOWS_SPLIT_SPHERES" "SHADOWS_NONATIVE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD5;
varying lowp vec4 xlv_COLOR0;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 vertex_2;
  vertex_2.yw = _glesVertex.yw;
  lowp vec4 color_3;
  color_3.xyz = _glesColor.xyz;
  lowp vec3 waveColor_4;
  highp vec3 waveMove_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = ((fract((((_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))) * 6.40885) - 3.14159);
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_6);
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_6);
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_7);
  highp vec4 tmpvar_10;
  tmpvar_10 = (((tmpvar_6 + (tmpvar_8 * -0.161616)) + (tmpvar_9 * 0.0083333)) + ((tmpvar_9 * tmpvar_7) * -0.00019841));
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_10);
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * tmpvar_11);
  highp vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_5.y = 0.0;
  waveMove_5.x = dot (tmpvar_13, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_5.z = dot (tmpvar_13, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_2.xz = (_glesVertex.xz - (waveMove_5.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_14;
  tmpvar_14 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3((dot (tmpvar_12, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)));
  waveColor_4 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = (vertex_2.xyz - _CameraPosition.xyz);
  highp float tmpvar_16;
  tmpvar_16 = clamp (((2.0 * (_WaveAndDistance.w - dot (tmpvar_15, tmpvar_15))) * _CameraPosition.w), 0.0, 1.0);
  color_3.w = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.xyz = ((2.0 * waveColor_4) * _glesColor.xyz);
  tmpvar_17.w = color_3.w;
  highp vec4 tmpvar_18;
  tmpvar_18 = (_Object2World * vertex_2);
  tmpvar_1.xyz = tmpvar_18.xyz;
  tmpvar_1.w = -((glstate_matrix_modelview0 * vertex_2).z);
  gl_Position = (glstate_matrix_mvp * vertex_2);
  xlv_TEXCOORD0 = (unity_World2Shadow[0] * tmpvar_18).xyz;
  xlv_TEXCOORD1 = (unity_World2Shadow[1] * tmpvar_18).xyz;
  xlv_TEXCOORD2 = (unity_World2Shadow[2] * tmpvar_18).xyz;
  xlv_TEXCOORD3 = (unity_World2Shadow[3] * tmpvar_18).xyz;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_17;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD5;
varying lowp vec4 xlv_COLOR0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec4 res_2;
  highp vec4 cascadeWeights_3;
  lowp float x_4;
  x_4 = ((texture2D (_MainTex, xlv_TEXCOORD5) * xlv_COLOR0).w - _Cutoff);
  if ((x_4 < 0.0)) {
    discard;
  };
  highp vec3 tmpvar_5;
  tmpvar_5 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[0].xyz);
  highp vec3 tmpvar_6;
  tmpvar_6 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[1].xyz);
  highp vec3 tmpvar_7;
  tmpvar_7 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[2].xyz);
  highp vec3 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[3].xyz);
  highp vec4 tmpvar_9;
  tmpvar_9.x = dot (tmpvar_5, tmpvar_5);
  tmpvar_9.y = dot (tmpvar_6, tmpvar_6);
  tmpvar_9.z = dot (tmpvar_7, tmpvar_7);
  tmpvar_9.w = dot (tmpvar_8, tmpvar_8);
  bvec4 tmpvar_10;
  tmpvar_10 = lessThan (tmpvar_9, unity_ShadowSplitSqRadii);
  lowp vec4 tmpvar_11;
  tmpvar_11 = vec4(tmpvar_10);
  cascadeWeights_3 = tmpvar_11;
  cascadeWeights_3.yzw = clamp ((cas